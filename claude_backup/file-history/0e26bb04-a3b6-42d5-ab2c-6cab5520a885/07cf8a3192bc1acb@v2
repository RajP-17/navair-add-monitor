"""Application settings and configuration management."""

import os
from functools import lru_cache
from pathlib import Path
from typing import Dict, List, Optional, Union

from pydantic_settings import BaseSettings
from pydantic import Field, field_validator


class SensorSettings(BaseSettings):
    """Sensor-specific configuration."""
    
    # BME280 Configuration
    bme280_address: int = 0x76
    bme280_polling_rate: int = 60  # seconds
    
    # MPU-6050 Configuration  
    mpu6050_bed_address: int = 0x68
    mpu6050_body_address: int = 0x69
    mpu6050_polling_rate: float = 0.05  # 20/second
    mpu6050_sample_rate: int = 1000  # Hz
    
    # Laser Array Configuration
    laser_x_serial_port: str = "/dev/ttyUSB0"
    laser_y_serial_port: str = "/dev/ttyUSB1"
    laser_polling_rate: float = 0.02  # 50/second
    laser_array_size: int = 36
    laser_timeout: float = 1.0
    
    # Printer API Configuration
    printer_api_url: str = "http://192.168.1.3"  # Ultimaker S5 static IP
    printer_api_timeout: float = 5.0
    printer_temp_polling_rate: float = 0.2  # 5/second
    printer_position_polling_rate: float = 0.1  # 10/second
    printer_auth_digest: bool = True  # Digest authentication enabled
    printer_auth_id: str = "6d66f08f5bf41a3bb07b1036286fc144"  # Auth ID from /auth/request
    printer_auth_key: str = "20f49bef0e94fb35fbf2045426a736c512703eabfa72f502a72a1b6cb621fa30"  # Auth key from /auth/request


class DatabaseSettings(BaseSettings):
    """Database configuration."""
    
    database_url: str = "sqlite:///data/navair_additive.db"
    encryption_key_file: str = "data/encryption.key"
    connection_pool_size: int = 10
    max_overflow: int = 20
    pool_timeout: int = 30
    
    # Circular buffer settings
    buffer_size_default: int = 1000
    buffer_size_high_freq: int = 5000  # For laser arrays
    batch_write_size: int = 100
    batch_write_interval: float = 5.0  # seconds


class MLSettings(BaseSettings):
    """Machine learning configuration."""
    
    model_path: str = "ml/models"
    feature_window_size: int = 100
    prediction_confidence_threshold: float = 0.7
    retrain_threshold_accuracy: float = 0.85
    
    # Material-specific settings
    materials: List[str] = ["ABS", "PETG", "Nylon"]
    
    # ABS specific
    abs_temp_range: tuple = (230, 250)
    abs_vibration_threshold: float = 0.5
    
    # PETG specific  
    petg_temp_range: tuple = (220, 245)
    petg_vibration_threshold: float = 0.4
    
    # Nylon specific
    nylon_temp_range: tuple = (240, 260)  
    nylon_vibration_threshold: float = 0.6


class AlertSettings(BaseSettings):
    """Alert and threshold configuration."""
    
    # Temperature thresholds
    temp_warning_threshold: float = 5.0  # °C deviation
    temp_critical_threshold: float = 10.0  # °C deviation
    
    # Vibration thresholds
    vibration_warning_threshold: float = 2.0  # m/s²
    vibration_critical_threshold: float = 5.0  # m/s²
    
    # Geometric thresholds
    geometric_warning_threshold: float = 0.1  # mm deviation
    geometric_critical_threshold: float = 0.5  # mm deviation
    
    # Flow thresholds
    flow_warning_threshold: float = 0.05  # flow rate deviation
    flow_critical_threshold: float = 0.15  # flow rate deviation
    
    # Alert settings
    alert_cooldown_period: int = 300  # seconds
    max_alerts_per_hour: int = 10
    email_notifications: bool = False
    sms_notifications: bool = False


class SecuritySettings(BaseSettings):
    """Security and encryption configuration."""
    
    encryption_algorithm: str = "AES-256-GCM"
    key_rotation_days: int = 90
    session_timeout: int = 14400  # 4 hours
    max_login_attempts: int = 5
    lockout_duration: int = 1800  # 30 minutes
    
    # Default credentials (must be changed)
    default_username: str = "admin"
    default_password: str = "navair2025"
    
    # API security
    api_rate_limit: int = 1000  # requests per hour
    cors_origins: List[str] = ["*"]  # Local network only


class NetworkSettings(BaseSettings):
    """Network and communication configuration."""
    
    # API server
    api_host: str = "0.0.0.0"
    api_port: int = 8000

    # mDNS configuration
    mdns_hostname: str = "navair-monitor"
    mdns_service_name: str = "_http._tcp.local."
    
    # Network discovery
    broadcast_enabled: bool = True
    discovery_interval: int = 30  # seconds


class PerformanceSettings(BaseSettings):
    """Performance monitoring and optimization."""
    
    # Resource limits
    max_cpu_percent: float = 80.0
    max_memory_mb: int = 512
    max_disk_usage_percent: float = 85.0
    
    # Processing limits
    max_concurrent_tasks: int = 10
    thread_pool_size: int = 4
    
    # Monitoring
    performance_check_interval: int = 60  # seconds
    log_performance_metrics: bool = True
    
    # Optimization
    enable_performance_mode: bool = True
    cpu_affinity: Optional[List[int]] = None


class Settings(BaseSettings):
    """Main application settings."""
    
    # Application info
    app_name: str = "NAVAIR_ADDITIVE"
    app_version: str = "1.0.0"
    app_description: str = "Machine Health Monitoring System"
    
    # Environment
    environment: str = Field(default="production", env="ENVIRONMENT")
    debug: bool = Field(default=False, env="DEBUG")
    log_level: str = Field(default="INFO", env="LOG_LEVEL")
    
    # Data directories
    data_dir: Path = Path("data")
    logs_dir: Path = Path("logs")
    models_dir: Path = Path("ml/models")
    
    # Component settings
    sensors: SensorSettings = SensorSettings()
    database: DatabaseSettings = DatabaseSettings()
    ml: MLSettings = MLSettings()
    alerts: AlertSettings = AlertSettings()
    security: SecuritySettings = SecuritySettings()
    network: NetworkSettings = NetworkSettings()
    performance: PerformanceSettings = PerformanceSettings()
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        env_nested_delimiter = "__"
        case_sensitive = False
    
    @field_validator("data_dir", "logs_dir", "models_dir", mode="before")
    @classmethod
    def create_directories(cls, v):
        """Create directories if they don't exist."""
        path = Path(v)
        path.mkdir(parents=True, exist_ok=True)
        return path
    
    @field_validator("log_level")
    @classmethod
    def validate_log_level(cls, v):
        """Validate log level."""
        valid_levels = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
        if v.upper() not in valid_levels:
            raise ValueError(f"Invalid log level: {v}")
        return v.upper()
    
    def get_database_url(self) -> str:
        """Get the complete database URL with path resolution."""
        if self.database.database_url.startswith("sqlite:///"):
            # Convert relative path to absolute
            db_path = self.database.database_url[10:]  # Remove 'sqlite:///'
            if not db_path.startswith("/"):  # If it's a relative path
                abs_path = (Path.cwd() / db_path).resolve()
            else:
                abs_path = Path(db_path).resolve()
            return f"sqlite:///{abs_path}"
        return self.database.database_url
    
    def get_encryption_key_path(self) -> Path:
        """Get the encryption key file path."""
        if self.database.encryption_key_file.startswith("/"):
            return Path(self.database.encryption_key_file)
        return self.data_dir / self.database.encryption_key_file
    
    def to_dict(self) -> Dict:
        """Convert settings to dictionary."""
        return self.dict()


@lru_cache()
def get_settings() -> Settings:
    """Get cached application settings."""
    return Settings()