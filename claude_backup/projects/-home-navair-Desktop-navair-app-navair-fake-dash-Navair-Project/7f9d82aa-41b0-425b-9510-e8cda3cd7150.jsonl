{"parentUuid":null,"isSidechain":true,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","type":"user","message":{"role":"user","content":"Warmup"},"uuid":"5f986888-6090-432f-9c8c-e04412de0350","timestamp":"2025-10-17T03:02:43.818Z"}
{"parentUuid":"5f986888-6090-432f-9c8c-e04412de0350","isSidechain":true,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-haiku-4-5-20251001","id":"msg_01RMasYiL69Aw9kCrY6cvvie","type":"message","role":"assistant","content":[{"type":"text","text":"I'm ready to help you search and explore this codebase! I'm Claude Code, your file search specialist for the NAVAIR project.\n\nI can help you:\n- **Find files** using glob patterns (broad searches)\n- **Search code contents** with regex and grep\n- **Read specific files** when you know the path\n- **Explore directory structure** with bash commands\n\nThe project I'm working with is located at:\n`/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project`\n\nThis appears to be a NAVAIR Additive Manufacturing Monitor dashboard project. Based on the recent git history, it includes HTML structure, styles, and a demo mode with mock data.\n\nWhat would you like me to search for or explore in this codebase?"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":564,"cache_creation_input_tokens":0,"cache_read_input_tokens":0,"cache_creation":{"ephemeral_5m_input_tokens":0,"ephemeral_1h_input_tokens":0},"output_tokens":181,"service_tier":"standard"}},"requestId":"req_011CUC2WmUMERv156yYfe6yb","type":"assistant","uuid":"5ea62eae-0a1e-47dc-a616-98294d577871","timestamp":"2025-10-17T03:02:46.436Z"}
{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","type":"user","message":{"role":"user","content":[{"type":"text","text":"so the part we are printing is back_bracket_cover_v4.stl the nozzle temp is supposed to be 252 and bed temp is supposed to be 85 update the demo mode values please and the print just tarted its supposed to take 11hrs and 7 minutes"}]},"uuid":"b1dcc55d-f46f-4bd0-bd14-3fa875f573b0","timestamp":"2025-10-17T03:09:57.732Z"}
{"parentUuid":"b1dcc55d-f46f-4bd0-bd14-3fa875f573b0","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01Vv9zyRddf8LspW7u59KUtq","type":"message","role":"assistant","content":[{"type":"text","text":"I'll update the demo mode values to match your actual print job details."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":2931,"cache_read_input_tokens":12201,"cache_creation":{"ephemeral_5m_input_tokens":2931,"ephemeral_1h_input_tokens":0},"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CUC34k4umY4F5jFXyrNiq","type":"assistant","uuid":"079a1f2b-6814-4149-8dbc-b5486e58c6c9","timestamp":"2025-10-17T03:10:01.083Z"}
{"parentUuid":"079a1f2b-6814-4149-8dbc-b5486e58c6c9","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01Vv9zyRddf8LspW7u59KUtq","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01NruyJPuS9izk5p1WEL7WK1","name":"Glob","input":{"pattern":"**/*demo*.js"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":2931,"cache_read_input_tokens":12201,"cache_creation":{"ephemeral_5m_input_tokens":2931,"ephemeral_1h_input_tokens":0},"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CUC34k4umY4F5jFXyrNiq","type":"assistant","uuid":"6c86bd81-66df-4cf9-997f-14749cca00f8","timestamp":"2025-10-17T03:10:02.110Z"}
{"parentUuid":"6c86bd81-66df-4cf9-997f-14749cca00f8","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01Vv9zyRddf8LspW7u59KUtq","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01EsBstGw1onPbR47vLgXHM4","name":"Glob","input":{"pattern":"**/*demo*.html"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":2931,"cache_read_input_tokens":12201,"cache_creation":{"ephemeral_5m_input_tokens":2931,"ephemeral_1h_input_tokens":0},"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CUC34k4umY4F5jFXyrNiq","type":"assistant","uuid":"ce6a0161-cb84-4873-bce3-b953f0fe286b","timestamp":"2025-10-17T03:10:02.172Z"}
{"parentUuid":"ce6a0161-cb84-4873-bce3-b953f0fe286b","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01Vv9zyRddf8LspW7u59KUtq","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01VELXyJcHU6tZkQrWNDdjtp","name":"Glob","input":{"pattern":"**/script.js"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":2931,"cache_read_input_tokens":12201,"cache_creation":{"ephemeral_5m_input_tokens":2931,"ephemeral_1h_input_tokens":0},"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CUC34k4umY4F5jFXyrNiq","type":"assistant","uuid":"6f1f3c18-ddf2-48b7-8fea-0b3f12d3c66a","timestamp":"2025-10-17T03:10:02.225Z"}
{"parentUuid":"6f1f3c18-ddf2-48b7-8fea-0b3f12d3c66a","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01NruyJPuS9izk5p1WEL7WK1","type":"tool_result","content":"No files found"}]},"uuid":"9ddfafc5-51ee-4fe5-85a8-5d9543f34be9","timestamp":"2025-10-17T03:10:02.851Z","toolUseResult":{"filenames":[],"durationMs":533,"numFiles":0,"truncated":false}}
{"parentUuid":"9ddfafc5-51ee-4fe5-85a8-5d9543f34be9","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01EsBstGw1onPbR47vLgXHM4","type":"tool_result","content":"No files found"}]},"uuid":"fd4d4e69-2930-4bd2-9573-5f2b741ef671","timestamp":"2025-10-17T03:10:02.860Z","toolUseResult":{"filenames":[],"durationMs":544,"numFiles":0,"truncated":false}}
{"parentUuid":"fd4d4e69-2930-4bd2-9573-5f2b741ef671","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01VELXyJcHU6tZkQrWNDdjtp","type":"tool_result","content":"No files found"}]},"uuid":"3207a248-dca6-495c-845b-927ee34e824d","timestamp":"2025-10-17T03:10:02.859Z","toolUseResult":{"filenames":[],"durationMs":542,"numFiles":0,"truncated":false}}
{"parentUuid":"3207a248-dca6-495c-845b-927ee34e824d","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01BdAXDVrXGVe7a7dEQxjtem","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_018wQw2MfnNZT2feN2KVQGoG","name":"Glob","input":{"pattern":"**/*.js"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":8,"cache_creation_input_tokens":240,"cache_read_input_tokens":15132,"cache_creation":{"ephemeral_5m_input_tokens":240,"ephemeral_1h_input_tokens":0},"output_tokens":24,"service_tier":"standard"}},"requestId":"req_011CUC357zmkHuTYnxoKGPpj","type":"assistant","uuid":"85ba6b8a-7aea-4306-9366-6928c4bbbca0","timestamp":"2025-10-17T03:10:05.204Z"}
{"parentUuid":"85ba6b8a-7aea-4306-9366-6928c4bbbca0","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01BdAXDVrXGVe7a7dEQxjtem","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01CfMCLgzL476zwMYFH5fPWJ","name":"Glob","input":{"pattern":"**/*.html"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":8,"cache_creation_input_tokens":240,"cache_read_input_tokens":15132,"cache_creation":{"ephemeral_5m_input_tokens":240,"ephemeral_1h_input_tokens":0},"output_tokens":24,"service_tier":"standard"}},"requestId":"req_011CUC357zmkHuTYnxoKGPpj","type":"assistant","uuid":"ade4670e-a3d9-4b82-8fba-33f500146c0d","timestamp":"2025-10-17T03:10:05.372Z"}
{"parentUuid":"ade4670e-a3d9-4b82-8fba-33f500146c0d","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_018wQw2MfnNZT2feN2KVQGoG","type":"tool_result","content":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/venv/lib/python3.11/site-packages/sklearn/utils/_repr_html/estimator.js\n/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js"}]},"uuid":"fc896fa0-8a89-4169-9ac8-048080231911","timestamp":"2025-10-17T03:10:05.760Z","toolUseResult":{"filenames":["/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/venv/lib/python3.11/site-packages/sklearn/utils/_repr_html/estimator.js","/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js"],"durationMs":334,"numFiles":2,"truncated":false}}
{"parentUuid":"fc896fa0-8a89-4169-9ac8-048080231911","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01CfMCLgzL476zwMYFH5fPWJ","type":"tool_result","content":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/index.html\n/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web/index.html"}]},"uuid":"16ca23cf-5e97-4da5-bc49-ccfb5cb76414","timestamp":"2025-10-17T03:10:05.767Z","toolUseResult":{"filenames":["/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/index.html","/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web/index.html"],"durationMs":341,"numFiles":2,"truncated":false}}
{"parentUuid":"16ca23cf-5e97-4da5-bc49-ccfb5cb76414","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_018aGGmXzuQdTzN1JW8JSBX2","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_017bYMtK9Fu8SvKUphEsunMg","name":"Read","input":{"file_path":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":8,"cache_creation_input_tokens":325,"cache_read_input_tokens":15372,"cache_creation":{"ephemeral_5m_input_tokens":325,"ephemeral_1h_input_tokens":0},"output_tokens":25,"service_tier":"standard"}},"requestId":"req_011CUC35LGTi9LHQa5aTZD8d","type":"assistant","uuid":"f380a2a5-f253-41d5-b5b0-4959aee3522b","timestamp":"2025-10-17T03:10:08.797Z"}
{"parentUuid":"f380a2a5-f253-41d5-b5b0-4959aee3522b","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_017bYMtK9Fu8SvKUphEsunMg","type":"tool_result","content":"     1→/**\n     2→ * NAVAIR Additive Manufacturing Dashboard\n     3→ * \n     4→ * A modern, professional web dashboard for monitoring NAVAIR 3D printer operations\n     5→ * with real-time data visualization, system health monitoring, and quality analytics.\n     6→ * \n     7→ * @version 2.0\n     8→ * @author NAVAIR Team\n     9→ * @created January 2025\n    10→ * \n    11→ * Features:\n    12→ * - Real-time sensor monitoring with gauges and charts\n    13→ * - Multi-page navigation with accessibility support\n    14→ * - API integration with comprehensive error handling\n    15→ * - Responsive design for mobile and desktop\n    16→ * - Professional UI with loading states and animations\n    17→ */\n    18→\n    19→/**\n    20→ * Main Dashboard Controller Class\n    21→ * \n    22→ * Manages all dashboard functionality including:\n    23→ * - API communication and data fetching\n    24→ * - Chart rendering and updates\n    25→ * - UI state management\n    26→ * - Error handling and user feedback\n    27→ */\n    28→class NAVAIRDashboard {\n    29→    /**\n    30→     * Initialize dashboard with configuration and state\n    31→     */\n    32→    constructor() {\n    33→        this.apiBaseUrl = 'http://localhost:8000/api';\n    34→        this.updateInterval = 2000; // 2 seconds\n    35→        this.charts = {};\n    36→        this.gauges = {};\n    37→        this.isConnected = {\n    38→            sensors: false,\n    39→            print: false\n    40→        };\n    41→        this.sensorHistory = [];\n    42→        this.maxHistoryPoints = 50;\n    43→\n    44→        // Demo mode for presentations\n    45→        this.demoMode = false;\n    46→        this.mockData = {\n    47→            nozzleTemp: 210,\n    48→            bedTemp: 60,\n    49→            humidity: 45,\n    50→            pressure: 1013,\n    51→            ambientTemp: 22,\n    52→            bedVibration: { x: 0.02, y: 0.015, z: 0.01 },\n    53→            bodyVibration: { x: 0.03, y: 0.025, z: 0.015 },\n    54→            printProgress: 65,\n    55→            qualityScore: 0.92\n    56→        };\n    57→\n    58→        this.init();\n    59→    }\n    60→\n    61→    /**\n    62→     * Initialize dashboard components and start data fetching\n    63→     */\n    64→    async init() {\n    65→        try {\n    66→            this.setupGauges();\n    67→        } catch (error) {\n    68→            console.error('Error setting up gauges:', error);\n    69→        }\n    70→\n    71→        try {\n    72→            this.setupCharts();\n    73→        } catch (error) {\n    74→            console.error('Error setting up charts:', error);\n    75→        }\n    76→\n    77→        try {\n    78→            this.startDataFetching();\n    79→            this.updateConnectionStatus();\n    80→        } catch (error) {\n    81→            console.error('Error starting data fetching:', error);\n    82→        }\n    83→\n    84→        console.log('Dashboard initialized successfully');\n    85→    }\n    86→\n    87→    // =============================================================================\n    88→    // CHART AND GAUGE SETUP METHODS\n    89→    // =============================================================================\n    90→\n    91→    /**\n    92→     * Setup gauges - simplified to just use text displays\n    93→     */\n    94→    setupGauges() {\n    95→        // Gauges removed - using simple text display instead\n    96→        console.log('Using simplified text-based display (gauges disabled)');\n    97→    }\n    98→\n    99→    /**\n   100→     * Setup line charts for vibration and historical data\n   101→     */\n   102→    setupCharts() {\n   103→        // Vibration Chart\n   104→        const vibCtx = document.getElementById('vibration-chart');\n   105→        if (vibCtx) {\n   106→            this.charts.vibration = new Chart(vibCtx, {\n   107→                type: 'line',\n   108→                data: {\n   109→                    labels: [],\n   110→                    datasets: [{\n   111→                        label: 'Bed Vibration',\n   112→                        data: [],\n   113→                        borderColor: '#e74c3c',\n   114→                        backgroundColor: 'rgba(231, 76, 60, 0.1)',\n   115→                        tension: 0.4\n   116→                    }, {\n   117→                        label: 'Body Vibration',\n   118→                        data: [],\n   119→                        borderColor: '#3498db',\n   120→                        backgroundColor: 'rgba(52, 152, 219, 0.1)',\n   121→                        tension: 0.4\n   122→                    }]\n   123→                },\n   124→                options: {\n   125→                    responsive: true,\n   126→                    maintainAspectRatio: false,\n   127→                    interaction: {\n   128→                        intersect: false,\n   129→                        mode: 'index'\n   130→                    },\n   131→                    scales: {\n   132→                        y: {\n   133→                            beginAtZero: true,\n   134→                            title: {\n   135→                                display: true,\n   136→                                text: 'Vibration (mm/s²)'\n   137→                            }\n   138→                        },\n   139→                        x: {\n   140→                            title: {\n   141→                                display: true,\n   142→                                text: 'Time'\n   143→                            }\n   144→                        }\n   145→                    },\n   146→                    plugins: {\n   147→                        legend: {\n   148→                            display: true,\n   149→                            position: 'top'\n   150→                        }\n   151→                    }\n   152→                }\n   153→            });\n   154→        }\n   155→\n   156→        // Historical Data Chart\n   157→        const historyCtx = document.getElementById('history-chart');\n   158→        if (historyCtx) {\n   159→            this.charts.history = new Chart(historyCtx, {\n   160→                type: 'line',\n   161→                data: {\n   162→                    labels: [],\n   163→                    datasets: [{\n   164→                        label: 'Nozzle Temp (°C)',\n   165→                        data: [],\n   166→                        borderColor: '#e74c3c',\n   167→                        backgroundColor: 'rgba(231, 76, 60, 0.1)',\n   168→                        yAxisID: 'y'\n   169→                    }, {\n   170→                        label: 'Bed Temp (°C)',\n   171→                        data: [],\n   172→                        borderColor: '#e67e22',\n   173→                        backgroundColor: 'rgba(230, 126, 34, 0.1)',\n   174→                        yAxisID: 'y'\n   175→                    }, {\n   176→                        label: 'Humidity (%)',\n   177→                        data: [],\n   178→                        borderColor: '#3498db',\n   179→                        backgroundColor: 'rgba(52, 152, 219, 0.1)',\n   180→                        yAxisID: 'y1'\n   181→                    }]\n   182→                },\n   183→                options: {\n   184→                    responsive: true,\n   185→                    maintainAspectRatio: false,\n   186→                    interaction: {\n   187→                        intersect: false,\n   188→                        mode: 'index'\n   189→                    },\n   190→                    scales: {\n   191→                        y: {\n   192→                            type: 'linear',\n   193→                            display: true,\n   194→                            position: 'left',\n   195→                            title: {\n   196→                                display: true,\n   197→                                text: 'Temperature (°C)'\n   198→                            }\n   199→                        },\n   200→                        y1: {\n   201→                            type: 'linear',\n   202→                            display: true,\n   203→                            position: 'right',\n   204→                            title: {\n   205→                                display: true,\n   206→                                text: 'Humidity (%)'\n   207→                            },\n   208→                            grid: {\n   209→                                drawOnChartArea: false,\n   210→                            },\n   211→                        },\n   212→                        x: {\n   213→                            title: {\n   214→                                display: true,\n   215→                                text: 'Time'\n   216→                            }\n   217→                        }\n   218→                    },\n   219→                    plugins: {\n   220→                        legend: {\n   221→                            display: true,\n   222→                            position: 'top'\n   223→                        }\n   224→                    }\n   225→                }\n   226→            });\n   227→        }\n   228→    }\n   229→\n   230→    // =============================================================================\n   231→    // DEMO MODE METHODS\n   232→    // =============================================================================\n   233→\n   234→    /**\n   235→     * Toggle demo mode on/off\n   236→     */\n   237→    toggleDemoMode() {\n   238→        this.demoMode = !this.demoMode;\n   239→\n   240→        if (this.demoMode) {\n   241→            // Immediately update connection status and fetch mock data\n   242→            this.setConnectionStatus('sensors', true);\n   243→            this.setConnectionStatus('print', true);\n   244→\n   245→            // Fetch mock data immediately\n   246→            this.fetchSensorData();\n   247→            this.fetchPrintStatus();\n   248→\n   249→            console.log('%c✓ DEMO MODE ENABLED', 'color: #27ae60; font-size: 16px; font-weight: bold;');\n   250→            console.log('The dashboard will now display realistic mock data.');\n   251→            console.log('To disable: dashboard.toggleDemoMode()');\n   252→        } else {\n   253→            console.log('%c✗ DEMO MODE DISABLED', 'color: #e74c3c; font-size: 16px; font-weight: bold;');\n   254→        }\n   255→    }\n   256→\n   257→    /**\n   258→     * Generate realistic mock sensor data with natural variations\n   259→     * @returns {Object} Mock sensor data\n   260→     */\n   261→    generateMockSensorData() {\n   262→        // Add realistic variations to mock data\n   263→        this.mockData.nozzleTemp += (Math.random() - 0.5) * 2; // ±1°C variation\n   264→        this.mockData.nozzleTemp = Math.max(200, Math.min(220, this.mockData.nozzleTemp));\n   265→\n   266→        this.mockData.bedTemp += (Math.random() - 0.5) * 1; // ±0.5°C variation\n   267→        this.mockData.bedTemp = Math.max(55, Math.min(65, this.mockData.bedTemp));\n   268→\n   269→        this.mockData.humidity += (Math.random() - 0.5) * 3; // ±1.5% variation\n   270→        this.mockData.humidity = Math.max(40, Math.min(50, this.mockData.humidity));\n   271→\n   272→        this.mockData.pressure += (Math.random() - 0.5) * 2;\n   273→        this.mockData.pressure = Math.max(1010, Math.min(1016, this.mockData.pressure));\n   274→\n   275→        this.mockData.ambientTemp += (Math.random() - 0.5) * 0.5;\n   276→        this.mockData.ambientTemp = Math.max(20, Math.min(24, this.mockData.ambientTemp));\n   277→\n   278→        // Vibration with small random variations\n   279→        this.mockData.bedVibration = {\n   280→            x: 0.02 + (Math.random() - 0.5) * 0.01,\n   281→            y: 0.015 + (Math.random() - 0.5) * 0.01,\n   282→            z: 0.01 + (Math.random() - 0.5) * 0.005\n   283→        };\n   284→\n   285→        this.mockData.bodyVibration = {\n   286→            x: 0.03 + (Math.random() - 0.5) * 0.015,\n   287→            y: 0.025 + (Math.random() - 0.5) * 0.015,\n   288→            z: 0.015 + (Math.random() - 0.5) * 0.01\n   289→        };\n   290→\n   291→        return {\n   292→            temperature: {\n   293→                nozzle: this.mockData.nozzleTemp,\n   294→                bed: this.mockData.bedTemp,\n   295→                ambient: this.mockData.ambientTemp\n   296→            },\n   297→            humidity: this.mockData.humidity,\n   298→            pressure: this.mockData.pressure,\n   299→            vibration: {\n   300→                bed: this.mockData.bedVibration,\n   301→                body: this.mockData.bodyVibration\n   302→            }\n   303→        };\n   304→    }\n   305→\n   306→    /**\n   307→     * Generate mock print status data\n   308→     * @returns {Object} Mock print data\n   309→     */\n   310→    generateMockPrintData() {\n   311→        // Simulate print progress\n   312→        this.mockData.printProgress += 0.5;\n   313→        if (this.mockData.printProgress > 100) {\n   314→            this.mockData.printProgress = 15; // Reset to new job\n   315→        }\n   316→\n   317→        // Quality score varies slightly\n   318→        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n   319→        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n   320→\n   321→        return {\n   322→            job_name: 'Bracket_Assembly_v3',\n   323→            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n   324→            progress: Math.round(this.mockData.printProgress),\n   325→            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 2.5)),\n   326→            quality_score: this.mockData.qualityScore,\n   327→            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n   328→        };\n   329→    }\n   330→\n   331→    /**\n   332→     * Generate mock system health data\n   333→     * @returns {Object} Mock health data\n   334→     */\n   335→    generateMockHealthData() {\n   336→        return {\n   337→            cpu_temp: 45 + Math.random() * 10,\n   338→            memory_usage: 55 + Math.random() * 15,\n   339→            disk_free: 128 + Math.random() * 5,\n   340→            cpu_usage: 30 + Math.random() * 20,\n   341→            network_status: 'Connected'\n   342→        };\n   343→    }\n   344→\n   345→    // =============================================================================\n   346→    // API COMMUNICATION METHODS\n   347→    // =============================================================================\n   348→\n   349→    /**\n   350→     * Fetch current sensor data from API with proper error handling\n   351→     * @returns {Object|null} Sensor data or null on error\n   352→     */\n   353→    async fetchSensorData() {\n   354→        // Use mock data in demo mode\n   355→        if (this.demoMode) {\n   356→            const mockData = this.generateMockSensorData();\n   357→            this.updateSensorData(mockData);\n   358→            this.setConnectionStatus('sensors', true);\n   359→            return mockData;\n   360→        }\n   361→\n   362→        // Show loading states\n   363→        this.setLoadingState('nozzle-temp-value');\n   364→        this.setLoadingState('bed-temp-value');\n   365→        this.setLoadingState('humidity-value');\n   366→\n   367→        try {\n   368→            const controller = new AbortController();\n   369→            const timeoutId = setTimeout(() => controller.abort(), 5000);\n   370→\n   371→            const response = await fetch(`${this.apiBaseUrl}/sensors/current`, {\n   372→                method: 'GET',\n   373→                headers: {\n   374→                    'Accept': 'application/json',\n   375→                    'Content-Type': 'application/json'\n   376→                },\n   377→                signal: controller.signal\n   378→            });\n   379→\n   380→            clearTimeout(timeoutId);\n   381→\n   382→            if (!response.ok) {\n   383→                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n   384→            }\n   385→\n   386→            const data = await response.json();\n   387→            this.updateSensorData(data);\n   388→            this.setConnectionStatus('sensors', true);\n   389→            return data;\n   390→\n   391→        } catch (error) {\n   392→            console.error('Sensor API Error:', error);\n   393→            this.setConnectionStatus('sensors', false);\n   394→\n   395→            let errorMessage = 'Unable to connect to sensor API';\n   396→            if (error.name === 'AbortError') {\n   397→                errorMessage = 'Sensor API request timed out';\n   398→            } else if (!navigator.onLine) {\n   399→                errorMessage = 'No internet connection';\n   400→            }\n   401→\n   402→            this.showSensorError(errorMessage);\n   403→            return null;\n   404→        }\n   405→    }\n   406→\n   407→    async fetchPrintStatus() {\n   408→        // Use mock data in demo mode\n   409→        if (this.demoMode) {\n   410→            const mockData = this.generateMockPrintData();\n   411→            this.updatePrintData(mockData);\n   412→            this.setConnectionStatus('print', true);\n   413→            return mockData;\n   414→        }\n   415→\n   416→        try {\n   417→            const response = await fetch(`${this.apiBaseUrl}/print/status`, {\n   418→                method: 'GET',\n   419→                headers: {\n   420→                    'Accept': 'application/json',\n   421→                    'Content-Type': 'application/json'\n   422→                },\n   423→                timeout: 5000\n   424→            });\n   425→\n   426→            if (!response.ok) {\n   427→                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n   428→            }\n   429→\n   430→            const data = await response.json();\n   431→            this.updatePrintData(data);\n   432→            this.setConnectionStatus('print', true);\n   433→            return data;\n   434→\n   435→        } catch (error) {\n   436→            console.error('Print API Error:', error);\n   437→            this.setConnectionStatus('print', false);\n   438→            this.showPrintError('Unable to connect to print API');\n   439→            return null;\n   440→        }\n   441→    }\n   442→\n   443→    updateSensorData(data) {\n   444→        if (!data || !data.temperature) {\n   445→            this.showSensorError('Invalid sensor data received');\n   446→            this.showAnalysisError();\n   447→            this.showHealthError();\n   448→            this.showQualityError();\n   449→            return;\n   450→        }\n   451→\n   452→        // Update temperature values (no gauges, just text)\n   453→        if (data.temperature.nozzle !== undefined) {\n   454→            const nozzleTemp = parseFloat(data.temperature.nozzle);\n   455→            this.updateElement('nozzle-temp-value', `${nozzleTemp.toFixed(1)}°C`);\n   456→        }\n   457→\n   458→        if (data.temperature.bed !== undefined) {\n   459→            const bedTemp = parseFloat(data.temperature.bed);\n   460→            this.updateElement('bed-temp-value', `${bedTemp.toFixed(1)}°C`);\n   461→        }\n   462→\n   463→        // Update environmental data\n   464→        if (data.humidity !== undefined) {\n   465→            this.updateElement('humidity-value', `${parseFloat(data.humidity).toFixed(1)}%`);\n   466→        }\n   467→        \n   468→        if (data.pressure !== undefined) {\n   469→            this.updateElement('pressure-value', `${parseFloat(data.pressure).toFixed(1)} hPa`);\n   470→        }\n   471→        \n   472→        if (data.temperature.ambient !== undefined) {\n   473→            this.updateElement('ambient-temp-value', `${parseFloat(data.temperature.ambient).toFixed(1)}°C`);\n   474→        }\n   475→\n   476→        // Update vibration data\n   477→        if (data.vibration) {\n   478→            const bedVib = this.calculateVibrationMagnitude(data.vibration.bed) * 1000;\n   479→            const bodyVib = this.calculateVibrationMagnitude(data.vibration.body) * 1000;\n   480→            \n   481→            this.updateElement('bed-vibration-value', `${bedVib.toFixed(2)} mm/s²`);\n   482→            this.updateElement('body-vibration-value', `${bodyVib.toFixed(2)} mm/s²`);\n   483→            \n   484→            this.updateVibrationChart(bedVib, bodyVib);\n   485→        }\n   486→\n   487→        // Store historical data\n   488→        this.addToHistory(data);\n   489→        this.updateHistoryChart();\n   490→    }\n   491→\n   492→    updatePrintData(data) {\n   493→        if (!data) {\n   494→            this.showPrintError('Invalid print data received');\n   495→            return;\n   496→        }\n   497→\n   498→        this.updateElement('job-name', data.job_name || 'No active job');\n   499→        this.updateElement('job-status', data.status || 'Unknown');\n   500→        this.updateElement('job-progress', `${data.progress || 0}%`);\n   501→        this.updateElement('time-remaining', data.time_remaining ? `${data.time_remaining}m` : '--');\n   502→\n   503→        // Update quality score (no gauge, just text)\n   504→        if (data.quality_score !== undefined) {\n   505→            const qualityScore = Math.round(data.quality_score * 100);\n   506→            this.updateElement('quality-value', `${qualityScore}%`);\n   507→        }\n   508→\n   509→        this.updateElement('ml-prediction', data.ml_prediction || 'No prediction');\n   510→    }\n   511→\n   512→    calculateVibrationMagnitude(vibData) {\n   513→        if (!vibData || typeof vibData.x !== 'number') return 0;\n   514→        return Math.sqrt(\n   515→            Math.pow(vibData.x, 2) + \n   516→            Math.pow(vibData.y, 2) + \n   517→            Math.pow(vibData.z, 2)\n   518→        );\n   519→    }\n   520→\n   521→    addToHistory(data) {\n   522→        const timestamp = new Date();\n   523→        const historyPoint = {\n   524→            timestamp: timestamp,\n   525→            nozzleTemp: data.temperature?.nozzle || 0,\n   526→            bedTemp: data.temperature?.bed || 0,\n   527→            humidity: data.humidity || 0\n   528→        };\n   529→\n   530→        this.sensorHistory.push(historyPoint);\n   531→        \n   532→        // Keep only last N points\n   533→        if (this.sensorHistory.length > this.maxHistoryPoints) {\n   534→            this.sensorHistory.shift();\n   535→        }\n   536→    }\n   537→\n   538→    updateVibrationChart(bedVib, bodyVib) {\n   539→        if (!this.charts.vibration) return;\n   540→\n   541→        const timestamp = new Date().toLocaleTimeString();\n   542→        const chart = this.charts.vibration;\n   543→\n   544→        chart.data.labels.push(timestamp);\n   545→        chart.data.datasets[0].data.push(bedVib);\n   546→        chart.data.datasets[1].data.push(bodyVib);\n   547→\n   548→        // Keep only last 20 points\n   549→        if (chart.data.labels.length > 20) {\n   550→            chart.data.labels.shift();\n   551→            chart.data.datasets[0].data.shift();\n   552→            chart.data.datasets[1].data.shift();\n   553→        }\n   554→\n   555→        chart.update('none');\n   556→    }\n   557→\n   558→    updateHistoryChart() {\n   559→        if (!this.charts.history || this.sensorHistory.length === 0) return;\n   560→\n   561→        const chart = this.charts.history;\n   562→        const labels = this.sensorHistory.map(point => point.timestamp.toLocaleTimeString());\n   563→        \n   564→        chart.data.labels = labels;\n   565→        chart.data.datasets[0].data = this.sensorHistory.map(point => point.nozzleTemp);\n   566→        chart.data.datasets[1].data = this.sensorHistory.map(point => point.bedTemp);\n   567→        chart.data.datasets[2].data = this.sensorHistory.map(point => point.humidity);\n   568→\n   569→        chart.update('none');\n   570→    }\n   571→\n   572→    setConnectionStatus(type, connected) {\n   573→        this.isConnected[type] = connected;\n   574→        this.showConnectionStatus(type, connected);\n   575→    }\n   576→\n   577→    updateConnectionStatus() {\n   578→        this.updateElement('last-update', new Date().toLocaleTimeString());\n   579→    }\n   580→\n   581→    showSensorError(message) {\n   582→        this.updateElement('nozzle-temp-value', 'API Error', 'error');\n   583→        this.updateElement('bed-temp-value', 'API Error', 'error');\n   584→        this.updateElement('humidity-value', 'API Error', 'error');\n   585→        this.updateElement('pressure-value', 'API Error', 'error');\n   586→        this.updateElement('ambient-temp-value', 'API Error', 'error');\n   587→        this.updateElement('bed-vibration-value', 'API Error', 'error');\n   588→        this.updateElement('body-vibration-value', 'API Error', 'error');\n   589→        this.showConnectionStatus('sensors', false, message);\n   590→    }\n   591→\n   592→    showPrintError(message) {\n   593→        this.updateElement('job-name', 'API Connection Failed', 'error');\n   594→        this.updateElement('job-status', 'Disconnected', 'error');\n   595→        this.updateElement('job-progress', 'API Error', 'error');\n   596→        this.updateElement('time-remaining', 'No Connection', 'error');\n   597→        this.updateElement('quality-value', 'API Error', 'error');\n   598→        this.updateElement('ml-prediction', 'No connection', 'error');\n   599→        this.showConnectionStatus('print', false, message);\n   600→        this.showQualityError();\n   601→    }\n   602→\n   603→    showAnalysisError() {\n   604→        this.updateElement('correlation-status', 'API Not Connected');\n   605→        this.updateElement('anomaly-count', 'No Data Available');\n   606→        this.updateElement('prediction-accuracy', 'API Error');\n   607→        this.updateElement('process-capability', 'No Connection');\n   608→        this.updateElement('ml-confidence', 'API Error');\n   609→        this.updateElement('training-accuracy', 'No Data');\n   610→        this.updateElement('failure-risk', 'API Not Available');\n   611→        this.updateElement('quality-risk', 'No Connection');\n   612→    }\n   613→\n   614→    showHealthError() {\n   615→        this.updateElement('cpu-temp', 'API Error');\n   616→        this.updateElement('memory-usage', 'API Error');\n   617→        this.updateElement('disk-usage', 'API Error');\n   618→        this.updateElement('network-status', 'Disconnected');\n   619→        this.updateElement('bme280-status', 'API Error');\n   620→        this.updateElement('mpu-bed-status', 'API Error');\n   621→        this.updateElement('mpu-body-status', 'API Error');\n   622→        this.updateElement('laser-status', 'API Error');\n   623→    }\n   624→\n   625→    showQualityError() {\n   626→        this.updateElement('overall-quality', 'API Not Available');\n   627→        this.updateElement('successful-prints', 'No Data');\n   628→        this.updateElement('avg-print-time', 'API Error');\n   629→        this.updateElement('material-efficiency', 'No Connection');\n   630→        this.updateElement('critical-failures', 'API Error');\n   631→        this.updateElement('medium-risk', 'API Error');\n   632→        this.updateElement('low-risk', 'API Error');\n   633→        this.updateElement('rpn-average', 'No Data');\n   634→    }\n   635→\n   636→    showMaintenanceError() {\n   637→        this.updateElement('next-calibration', 'API Error');\n   638→        this.updateElement('sensor-cleaning', 'No Data Available');\n   639→        this.updateElement('filter-replacement', 'API Error');\n   640→        this.updateElement('system-backup', 'API Not Connected');\n   641→        this.updateElement('last-bme280-cal', 'API Error');\n   642→        this.updateElement('last-mpu-cal', 'API Error');\n   643→        this.updateElement('laser-check', 'No Data');\n   644→        this.updateElement('drift-compensation', 'API Error');\n   645→    }\n   646→\n   647→    // =============================================================================\n   648→    // UI UPDATE AND STATE MANAGEMENT METHODS\n   649→    // =============================================================================\n   650→    \n   651→    /**\n   652→     * Update DOM element with value and optional CSS class\n   653→     * @param {string} id - Element ID\n   654→     * @param {string} value - Text content to set\n   655→     * @param {string} className - Optional CSS class to add\n   656→     */\n   657→    updateElement(id, value, className = '') {\n   658→        const element = document.getElementById(id);\n   659→        if (element) {\n   660→            element.textContent = value;\n   661→            \n   662→            // Remove existing state classes\n   663→            element.classList.remove('loading', 'error', 'success');\n   664→            \n   665→            // Add new class if specified\n   666→            if (className) {\n   667→                element.classList.add(className);\n   668→            }\n   669→        }\n   670→    }\n   671→\n   672→    setLoadingState(id, loading = true) {\n   673→        const element = document.getElementById(id);\n   674→        if (element) {\n   675→            if (loading) {\n   676→                element.classList.add('loading');\n   677→                element.textContent = 'Loading...';\n   678→            } else {\n   679→                element.classList.remove('loading');\n   680→            }\n   681→        }\n   682→    }\n   683→\n   684→    showConnectionStatus(type, connected, details = '') {\n   685→        const statusDot = document.getElementById(`${type}-status`);\n   686→        const statusText = document.getElementById(`${type}-connection`);\n   687→        \n   688→        if (statusDot) {\n   689→            statusDot.className = `status-dot ${connected ? 'connected' : 'disconnected'}`;\n   690→            statusDot.setAttribute('aria-label', connected ? 'Connected' : 'Disconnected');\n   691→        }\n   692→        \n   693→        if (statusText) {\n   694→            const status = connected ? 'Connected' : 'Disconnected';\n   695→            statusText.textContent = details ? `${status} - ${details}` : status;\n   696→            statusText.className = `connection-status ${connected ? 'connected' : 'disconnected'}`;\n   697→        }\n   698→    }\n   699→\n   700→    showAlert(message, type = 'error') {\n   701→        const alert = document.getElementById(`${type}-alert`);\n   702→        if (alert) {\n   703→            alert.textContent = message;\n   704→            alert.style.display = 'block';\n   705→            setTimeout(() => {\n   706→                alert.style.display = 'none';\n   707→            }, 5000);\n   708→        }\n   709→    }\n   710→\n   711→    startDataFetching() {\n   712→        // Initial fetch\n   713→        this.fetchSensorData();\n   714→        this.fetchPrintStatus();\n   715→        \n   716→        // Show initial errors for all pages\n   717→        this.showAnalysisError();\n   718→        this.showHealthError();\n   719→        this.showQualityError();\n   720→        this.showMaintenanceError();\n   721→\n   722→        // Set up intervals\n   723→        setInterval(() => {\n   724→            this.fetchSensorData();\n   725→            this.updateConnectionStatus();\n   726→        }, this.updateInterval);\n   727→\n   728→        setInterval(() => {\n   729→            this.fetchPrintStatus();\n   730→        }, 5000); // Print status every 5 seconds\n   731→    }\n   732→}\n   733→\n   734→// =============================================================================\n   735→// CONTROL FUNCTIONS - System Control Actions\n   736→// =============================================================================\n   737→\n   738→/**\n   739→ * Emergency stop function - immediately halts printer operation\n   740→ */\n   741→async function emergencyStop() {\n   742→    dashboard.showAlert('Emergency stop activated!', 'error');\n   743→    try {\n   744→        const response = await fetch(`${dashboard.apiBaseUrl}/controls/emergency_stop`, {\n   745→            method: 'POST',\n   746→            headers: { 'Content-Type': 'application/json' }\n   747→        });\n   748→        if (response.ok) {\n   749→            dashboard.showAlert('Emergency stop successful', 'success');\n   750→        }\n   751→    } catch (error) {\n   752→        console.error('Emergency stop failed:', error);\n   753→    }\n   754→}\n   755→\n   756→async function pauseResume() {\n   757→    try {\n   758→        const response = await fetch(`${dashboard.apiBaseUrl}/controls/pause_resume`, {\n   759→            method: 'POST',\n   760→            headers: { 'Content-Type': 'application/json' }\n   761→        });\n   762→        if (response.ok) {\n   763→            dashboard.showAlert('Pause/Resume command sent', 'success');\n   764→        }\n   765→    } catch (error) {\n   766→        console.error('Pause/Resume failed:', error);\n   767→        dashboard.showAlert('Unable to send pause/resume command', 'error');\n   768→    }\n   769→}\n   770→\n   771→async function calibrateSensors() {\n   772→    dashboard.showAlert('Starting sensor calibration...', 'success');\n   773→    try {\n   774→        const response = await fetch(`${dashboard.apiBaseUrl}/controls/calibrate`, {\n   775→            method: 'POST',\n   776→            headers: { 'Content-Type': 'application/json' }\n   777→        });\n   778→        if (response.ok) {\n   779→            dashboard.showAlert('Sensor calibration initiated', 'success');\n   780→        }\n   781→    } catch (error) {\n   782→        console.error('Calibration failed:', error);\n   783→        dashboard.showAlert('Unable to start calibration', 'error');\n   784→    }\n   785→}\n   786→\n   787→async function exportData() {\n   788→    try {\n   789→        const response = await fetch(`${dashboard.apiBaseUrl}/data/export`, {\n   790→            method: 'GET',\n   791→            headers: { 'Accept': 'application/json' }\n   792→        });\n   793→        if (response.ok) {\n   794→            const blob = await response.blob();\n   795→            const url = window.URL.createObjectURL(blob);\n   796→            const a = document.createElement('a');\n   797→            a.href = url;\n   798→            a.download = `navair_data_${new Date().toISOString().split('T')[0]}.json`;\n   799→            a.click();\n   800→            dashboard.showAlert('Data export completed', 'success');\n   801→        }\n   802→    } catch (error) {\n   803→        console.error('Export failed:', error);\n   804→        dashboard.showAlert('Unable to export data', 'error');\n   805→    }\n   806→}\n   807→\n   808→// =============================================================================\n   809→// PAGE NAVIGATION SYSTEM\n   810→// =============================================================================\n   811→\n   812→/**\n   813→ * Show specified page and update navigation state\n   814→ * @param {string} pageId - ID of page to show\n   815→ * @param {HTMLElement} element - Navigation element that was clicked\n   816→ */\n   817→function showPage(pageId, element) {\n   818→    // Hide all pages and update ARIA attributes\n   819→    const pages = document.querySelectorAll('.page');\n   820→    pages.forEach(page => {\n   821→        page.classList.remove('active');\n   822→        page.setAttribute('aria-hidden', 'true');\n   823→    });\n   824→    \n   825→    // Show selected page\n   826→    const selectedPage = document.getElementById(pageId + '-page');\n   827→    if (selectedPage) {\n   828→        selectedPage.classList.add('active');\n   829→        selectedPage.setAttribute('aria-hidden', 'false');\n   830→    }\n   831→    \n   832→    // Update navigation ARIA attributes\n   833→    const navItems = document.querySelectorAll('.nav-item');\n   834→    navItems.forEach(item => {\n   835→        item.classList.remove('active');\n   836→        item.setAttribute('aria-selected', 'false');\n   837→        item.setAttribute('tabindex', '-1');\n   838→    });\n   839→    \n   840→    if (element) {\n   841→        element.classList.add('active');\n   842→        element.setAttribute('aria-selected', 'true');\n   843→        element.setAttribute('tabindex', '0');\n   844→    }\n   845→    \n   846→    // Initialize page-specific content\n   847→    initializePage(pageId);\n   848→    \n   849→    // Update page title\n   850→    updatePageTitle(pageId);\n   851→}\n   852→\n   853→function updatePageTitle(pageId) {\n   854→    const titles = {\n   855→        'dashboard': 'Dashboard',\n   856→        'analysis': 'Analysis',\n   857→        'health': 'System Health',\n   858→        'quality': 'Quality Reports',\n   859→        'maintenance': 'Maintenance',\n   860→        'settings': 'Settings'\n   861→    };\n   862→    document.title = `NAVAIR Monitor - ${titles[pageId] || 'Dashboard'}`;\n   863→}\n   864→\n   865→function initializePage(pageId) {\n   866→    switch(pageId) {\n   867→        case 'analysis':\n   868→            setupAnalysisCharts();\n   869→            break;\n   870→        case 'health':\n   871→            setupHealthMonitoring();\n   872→            break;\n   873→        case 'quality':\n   874→            setupQualityCharts();\n   875→            break;\n   876→        case 'maintenance':\n   877→            updateMaintenanceStatus();\n   878→            break;\n   879→        case 'settings':\n   880→            loadSettings();\n   881→            break;\n   882→    }\n   883→}\n   884→\n   885→// Analysis Page Functions\n   886→function setupAnalysisCharts() {\n   887→    // Populate analysis metrics in demo mode\n   888→    if (dashboard && dashboard.demoMode) {\n   889→        document.getElementById('correlation-status').textContent = 'Positive (0.78)';\n   890→        document.getElementById('anomaly-count').textContent = '3 detected';\n   891→        document.getElementById('prediction-accuracy').textContent = '96.4%';\n   892→        document.getElementById('process-capability').textContent = '1.45 (Capable)';\n   893→        document.getElementById('ml-confidence').textContent = '94.2%';\n   894→        document.getElementById('training-accuracy').textContent = '96.4%';\n   895→        document.getElementById('failure-risk').textContent = 'Low (12%)';\n   896→        document.getElementById('quality-risk').textContent = 'Very Low (5%)';\n   897→    }\n   898→\n   899→    // Correlation Chart\n   900→    const correlationCtx = document.getElementById('correlation-chart');\n   901→    if (correlationCtx && !correlationCtx.chart) {\n   902→        correlationCtx.chart = new Chart(correlationCtx, {\n   903→            type: 'scatter',\n   904→            data: {\n   905→                datasets: [{\n   906→                    label: 'Temperature vs Quality',\n   907→                    data: generateCorrelationData(),\n   908→                    backgroundColor: 'rgba(52, 152, 219, 0.5)',\n   909→                    borderColor: '#3498db'\n   910→                }]\n   911→            },\n   912→            options: {\n   913→                responsive: true,\n   914→                maintainAspectRatio: false,\n   915→                scales: {\n   916→                    x: {\n   917→                        title: {\n   918→                            display: true,\n   919→                            text: 'Temperature (°C)'\n   920→                        }\n   921→                    },\n   922→                    y: {\n   923→                        title: {\n   924→                            display: true,\n   925→                            text: 'Quality Score'\n   926→                        },\n   927→                        min: 0,\n   928→                        max: 1\n   929→                    }\n   930→                }\n   931→            }\n   932→        });\n   933→    }\n   934→\n   935→    // ML Performance Chart\n   936→    const mlCtx = document.getElementById('ml-performance-chart');\n   937→    if (mlCtx && !mlCtx.chart) {\n   938→        mlCtx.chart = new Chart(mlCtx, {\n   939→            type: 'line',\n   940→            data: {\n   941→                labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7'],\n   942→                datasets: [{\n   943→                    label: 'Accuracy',\n   944→                    data: [85, 87, 89, 92, 94, 96, 96.4],\n   945→                    borderColor: '#27ae60',\n   946→                    backgroundColor: 'rgba(39, 174, 96, 0.1)'\n   947→                }]\n   948→            },\n   949→            options: {\n   950→                responsive: true,\n   951→                maintainAspectRatio: false,\n   952→                scales: {\n   953→                    y: {\n   954→                        beginAtZero: false,\n   955→                        min: 80,\n   956→                        max: 100,\n   957→                        title: {\n   958→                            display: true,\n   959→                            text: 'Accuracy (%)'\n   960→                        }\n   961→                    }\n   962→                }\n   963→            }\n   964→        });\n   965→    }\n   966→}\n   967→\n   968→function generateCorrelationData() {\n   969→    // Generate mock correlation data in demo mode\n   970→    if (dashboard && dashboard.demoMode) {\n   971→        const mockPoints = [];\n   972→        for (let i = 0; i < 30; i++) {\n   973→            mockPoints.push({\n   974→                x: 200 + Math.random() * 25,\n   975→                y: 0.85 + Math.random() * 0.13\n   976→            });\n   977→        }\n   978→        return mockPoints;\n   979→    }\n   980→\n   981→    // Only generate data if APIs are connected\n   982→    if (!dashboard || (!dashboard.isConnected.sensors && !dashboard.isConnected.print)) {\n   983→        return [{ x: 0, y: 0, label: 'No API Connection' }];\n   984→    }\n   985→\n   986→    // Use actual historical data if available\n   987→    if (dashboard.sensorHistory.length > 0) {\n   988→        return dashboard.sensorHistory.map(point => ({\n   989→            x: point.nozzleTemp || 0,\n   990→            y: (point.qualityScore || 0) / 100\n   991→        }));\n   992→    }\n   993→\n   994→    return [{ x: 0, y: 0, label: 'No Historical Data' }];\n   995→}\n   996→\n   997→// Health Monitoring Functions\n   998→function setupHealthMonitoring() {\n   999→    updateSystemHealth();\n  1000→    \n  1001→    const perfCtx = document.getElementById('performance-chart');\n  1002→    if (perfCtx && !perfCtx.chart) {\n  1003→        perfCtx.chart = new Chart(perfCtx, {\n  1004→            type: 'line',\n  1005→            data: {\n  1006→                labels: [],\n  1007→                datasets: [{\n  1008→                    label: 'CPU Usage (%)',\n  1009→                    data: [],\n  1010→                    borderColor: '#e74c3c',\n  1011→                    backgroundColor: 'rgba(231, 76, 60, 0.1)'\n  1012→                }, {\n  1013→                    label: 'Memory Usage (%)',\n  1014→                    data: [],\n  1015→                    borderColor: '#3498db',\n  1016→                    backgroundColor: 'rgba(52, 152, 219, 0.1)'\n  1017→                }]\n  1018→            },\n  1019→            options: {\n  1020→                responsive: true,\n  1021→                maintainAspectRatio: false,\n  1022→                scales: {\n  1023→                    y: {\n  1024→                        beginAtZero: true,\n  1025→                        max: 100,\n  1026→                        title: {\n  1027→                            display: true,\n  1028→                            text: 'Usage (%)'\n  1029→                        }\n  1030→                    }\n  1031→                }\n  1032→            }\n  1033→        });\n  1034→        \n  1035→        // Simulate real-time performance data\n  1036→        setInterval(() => {\n  1037→            updatePerformanceChart(perfCtx.chart);\n  1038→        }, 5000);\n  1039→    }\n  1040→}\n  1041→\n  1042→async function updateSystemHealth() {\n  1043→    // Use mock data in demo mode\n  1044→    if (dashboard.demoMode) {\n  1045→        const mockData = dashboard.generateMockHealthData();\n  1046→        document.getElementById('cpu-temp').textContent = `${mockData.cpu_temp.toFixed(1)}°C`;\n  1047→        document.getElementById('memory-usage').textContent = `${mockData.memory_usage.toFixed(1)}%`;\n  1048→        document.getElementById('disk-usage').textContent = `${mockData.disk_free.toFixed(1)}GB free`;\n  1049→        document.getElementById('network-status').textContent = mockData.network_status;\n  1050→        document.getElementById('bme280-status').textContent = 'Operational';\n  1051→        document.getElementById('mpu-bed-status').textContent = 'Operational';\n  1052→        document.getElementById('mpu-body-status').textContent = 'Operational';\n  1053→        document.getElementById('laser-status').textContent = 'Operational';\n  1054→        return;\n  1055→    }\n  1056→\n  1057→    try {\n  1058→        const response = await fetch(`${dashboard.apiBaseUrl}/system/health`, {\n  1059→            method: 'GET',\n  1060→            headers: { 'Accept': 'application/json' },\n  1061→            timeout: 5000\n  1062→        });\n  1063→\n  1064→        if (!response.ok) {\n  1065→            throw new Error('API connection failed');\n  1066→        }\n  1067→\n  1068→        const data = await response.json();\n  1069→\n  1070→        document.getElementById('cpu-temp').textContent = data.cpu_temp ? `${data.cpu_temp}°C` : 'No Data';\n  1071→        document.getElementById('memory-usage').textContent = data.memory_usage ? `${data.memory_usage}%` : 'No Data';\n  1072→        document.getElementById('disk-usage').textContent = data.disk_free ? `${data.disk_free}GB free` : 'No Data';\n  1073→\n  1074→    } catch (error) {\n  1075→        console.error('System Health API Error:', error);\n  1076→        document.getElementById('cpu-temp').textContent = 'API Error';\n  1077→        document.getElementById('memory-usage').textContent = 'API Error';\n  1078→        document.getElementById('disk-usage').textContent = 'API Error';\n  1079→    }\n  1080→}\n  1081→\n  1082→async function updatePerformanceChart(chart) {\n  1083→    const timestamp = new Date().toLocaleTimeString();\n  1084→\n  1085→    // Use mock data in demo mode\n  1086→    if (dashboard.demoMode) {\n  1087→        const mockData = dashboard.generateMockHealthData();\n  1088→        chart.data.labels.push(timestamp);\n  1089→        chart.data.datasets[0].data.push(mockData.cpu_usage);\n  1090→        chart.data.datasets[1].data.push(mockData.memory_usage);\n  1091→\n  1092→        if (chart.data.labels.length > 20) {\n  1093→            chart.data.labels.shift();\n  1094→            chart.data.datasets[0].data.shift();\n  1095→            chart.data.datasets[1].data.shift();\n  1096→        }\n  1097→\n  1098→        chart.update('none');\n  1099→        return;\n  1100→    }\n  1101→\n  1102→    try {\n  1103→        const response = await fetch(`${dashboard.apiBaseUrl}/system/performance`, {\n  1104→            method: 'GET',\n  1105→            headers: { 'Accept': 'application/json' },\n  1106→            timeout: 5000\n  1107→        });\n  1108→\n  1109→        if (!response.ok) {\n  1110→            throw new Error('Performance API connection failed');\n  1111→        }\n  1112→\n  1113→        const data = await response.json();\n  1114→\n  1115→        chart.data.labels.push(timestamp);\n  1116→        chart.data.datasets[0].data.push(data.cpu_usage || 0);\n  1117→        chart.data.datasets[1].data.push(data.memory_usage || 0);\n  1118→\n  1119→        if (chart.data.labels.length > 20) {\n  1120→            chart.data.labels.shift();\n  1121→            chart.data.datasets[0].data.shift();\n  1122→            chart.data.datasets[1].data.shift();\n  1123→        }\n  1124→\n  1125→        chart.update('none');\n  1126→\n  1127→    } catch (error) {\n  1128→        console.error('Performance Chart Error:', error);\n  1129→        // Don't update chart if API is not available\n  1130→        chart.data.labels.push(timestamp);\n  1131→        chart.data.datasets[0].data.push(null);\n  1132→        chart.data.datasets[1].data.push(null);\n  1133→\n  1134→        if (chart.data.labels.length > 20) {\n  1135→            chart.data.labels.shift();\n  1136→            chart.data.datasets[0].data.shift();\n  1137→            chart.data.datasets[1].data.shift();\n  1138→        }\n  1139→\n  1140→        chart.update('none');\n  1141→    }\n  1142→}\n  1143→\n  1144→// Quality Page Functions\n  1145→function setupQualityCharts() {\n  1146→    // Populate quality metrics in demo mode\n  1147→    if (dashboard && dashboard.demoMode) {\n  1148→        document.getElementById('overall-quality').textContent = '92.3%';\n  1149→        document.getElementById('successful-prints').textContent = '';\n  1150→        document.getElementById('avg-print-time').textContent = '3h 24m';\n  1151→        document.getElementById('material-efficiency').textContent = '94.7%';\n  1152→        document.getElementById('critical-failures').textContent = '2';\n  1153→        document.getElementById('medium-risk').textContent = '8';\n  1154→        document.getElementById('low-risk').textContent = '15';\n  1155→        document.getElementById('rpn-average').textContent = '34.2';\n  1156→    }\n  1157→\n  1158→    const qualityCtx = document.getElementById('quality-distribution-chart');\n  1159→    if (qualityCtx && !qualityCtx.chart) {\n  1160→        qualityCtx.chart = new Chart(qualityCtx, {\n  1161→            type: 'doughnut',\n  1162→            data: {\n  1163→                labels: ['Excellent', 'Good', 'Fair', 'Poor'],\n  1164→                datasets: [{\n  1165→                    data: [65, 25, 8, 2],\n  1166→                    backgroundColor: [\n  1167→                        '#27ae60',\n  1168→                        '#f39c12',\n  1169→                        '#e67e22',\n  1170→                        '#e74c3c'\n  1171→                    ]\n  1172→                }]\n  1173→            },\n  1174→            options: {\n  1175→                responsive: true,\n  1176→                maintainAspectRatio: false,\n  1177→                plugins: {\n  1178→                    legend: {\n  1179→                        position: 'bottom'\n  1180→                    }\n  1181→                }\n  1182→            }\n  1183→        });\n  1184→    }\n  1185→}\n  1186→\n  1187→// Maintenance Functions\n  1188→function updateMaintenanceStatus() {\n  1189→    // Populate maintenance data in demo mode\n  1190→    if (dashboard && dashboard.demoMode) {\n  1191→        const today = new Date();\n  1192→        const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n  1193→        const nextMonth = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000);\n  1194→        const lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n  1195→        const lastMonth = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\n  1196→\n  1197→        document.getElementById('next-calibration').textContent = nextWeek.toLocaleDateString();\n  1198→        document.getElementById('sensor-cleaning').textContent = nextMonth.toLocaleDateString();\n  1199→        document.getElementById('filter-replacement').textContent = '---';\n  1200→        document.getElementById('system-backup').textContent = 'Last: ' + today.toLocaleDateString();\n  1201→        document.getElementById('last-bme280-cal').textContent = lastWeek.toLocaleDateString();\n  1202→        document.getElementById('last-mpu-cal').textContent = lastMonth.toLocaleDateString();\n  1203→        document.getElementById('laser-check').textContent = lastWeek.toLocaleDateString();\n  1204→        document.getElementById('drift-compensation').textContent = 'Active';\n  1205→    }\n  1206→\n  1207→    console.log('Maintenance status updated');\n  1208→}\n  1209→\n  1210→function startCalibration() {\n  1211→    alert('Starting sensor calibration process...');\n  1212→}\n  1213→\n  1214→function runDiagnostics() {\n  1215→    alert('Running system diagnostics...');\n  1216→}\n  1217→\n  1218→function backupSystem() {\n  1219→    alert('Starting system backup...');\n  1220→}\n  1221→\n  1222→function generateReport() {\n  1223→    alert('Generating maintenance report...');\n  1224→}\n  1225→\n  1226→// Settings Functions\n  1227→function loadSettings() {\n  1228→    // Load saved settings from localStorage\n  1229→    const updateInterval = localStorage.getItem('updateInterval') || '2000';\n  1230→    const tempUnits = localStorage.getItem('tempUnits') || 'celsius';\n  1231→    const alertSounds = localStorage.getItem('alertSounds') !== 'false';\n  1232→    const autoExport = localStorage.getItem('autoExport') === 'true';\n  1233→    const theme = localStorage.getItem('theme') || 'blue';\n  1234→    const defaultPage = localStorage.getItem('defaultPage') || 'dashboard';\n  1235→    \n  1236→    document.getElementById('update-interval').value = updateInterval;\n  1237→    document.getElementById('temp-units').value = tempUnits;\n  1238→    document.getElementById('alert-sounds').checked = alertSounds;\n  1239→    document.getElementById('auto-export').checked = autoExport;\n  1240→    document.getElementById('theme').value = theme;\n  1241→    document.getElementById('default-page').value = defaultPage;\n  1242→}\n  1243→\n  1244→function saveSettings() {\n  1245→    const updateInterval = document.getElementById('update-interval').value;\n  1246→    const tempUnits = document.getElementById('temp-units').value;\n  1247→    const alertSounds = document.getElementById('alert-sounds').checked;\n  1248→    const autoExport = document.getElementById('auto-export').checked;\n  1249→    const theme = document.getElementById('theme').value;\n  1250→    const defaultPage = document.getElementById('default-page').value;\n  1251→    \n  1252→    localStorage.setItem('updateInterval', updateInterval);\n  1253→    localStorage.setItem('tempUnits', tempUnits);\n  1254→    localStorage.setItem('alertSounds', alertSounds);\n  1255→    localStorage.setItem('autoExport', autoExport);\n  1256→    localStorage.setItem('theme', theme);\n  1257→    localStorage.setItem('defaultPage', defaultPage);\n  1258→    \n  1259→    alert('Settings saved successfully!');\n  1260→    \n  1261→    // Apply settings\n  1262→    if (dashboard) {\n  1263→        dashboard.updateInterval = parseInt(updateInterval);\n  1264→    }\n  1265→}\n  1266→\n  1267→function resetSettings() {\n  1268→    if (confirm('Are you sure you want to reset all settings to default?')) {\n  1269→        localStorage.clear();\n  1270→        loadSettings();\n  1271→        alert('Settings reset to default values');\n  1272→    }\n  1273→}\n  1274→\n  1275→function exportSettings() {\n  1276→    const settings = {\n  1277→        updateInterval: document.getElementById('update-interval').value,\n  1278→        tempUnits: document.getElementById('temp-units').value,\n  1279→        alertSounds: document.getElementById('alert-sounds').checked,\n  1280→        autoExport: document.getElementById('auto-export').checked,\n  1281→        theme: document.getElementById('theme').value,\n  1282→        defaultPage: document.getElementById('default-page').value\n  1283→    };\n  1284→    \n  1285→    const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });\n  1286→    const url = URL.createObjectURL(blob);\n  1287→    const a = document.createElement('a');\n  1288→    a.href = url;\n  1289→    a.download = 'navair_settings.json';\n  1290→    a.click();\n  1291→    URL.revokeObjectURL(url);\n  1292→}\n  1293→\n  1294→function importSettings() {\n  1295→    const input = document.createElement('input');\n  1296→    input.type = 'file';\n  1297→    input.accept = '.json';\n  1298→    input.onchange = function(e) {\n  1299→        const file = e.target.files[0];\n  1300→        if (file) {\n  1301→            const reader = new FileReader();\n  1302→            reader.onload = function(e) {\n  1303→                try {\n  1304→                    const settings = JSON.parse(e.target.result);\n  1305→                    Object.keys(settings).forEach(key => {\n  1306→                        localStorage.setItem(key, settings[key]);\n  1307→                    });\n  1308→                    loadSettings();\n  1309→                    alert('Settings imported successfully!');\n  1310→                } catch (error) {\n  1311→                    alert('Error importing settings: Invalid file format');\n  1312→                }\n  1313→            };\n  1314→            reader.readAsText(file);\n  1315→        }\n  1316→    };\n  1317→    input.click();\n  1318→}\n  1319→\n  1320→// =============================================================================\n  1321→// APPLICATION INITIALIZATION\n  1322→// =============================================================================\n  1323→\n  1324→/**\n  1325→ * Initialize dashboard when DOM is loaded\n  1326→ */\n  1327→let dashboard;\n  1328→document.addEventListener('DOMContentLoaded', () => {\n  1329→    dashboard = new NAVAIRDashboard();\n  1330→    \n  1331→    // Setup navigation event listeners\n  1332→    setupNavigation();\n  1333→    \n  1334→    // Load default page from settings\n  1335→    const defaultPage = localStorage.getItem('defaultPage') || 'dashboard';\n  1336→    if (defaultPage !== 'dashboard') {\n  1337→        setTimeout(() => {\n  1338→            const navItem = document.querySelector(`[data-page=\"${defaultPage}\"]`);\n  1339→            if (navItem) {\n  1340→                showPage(defaultPage, navItem);\n  1341→            }\n  1342→        }, 100);\n  1343→    }\n  1344→    \n  1345→    // Setup periodic health updates\n  1346→    setInterval(() => {\n  1347→        if (document.getElementById('health-page').classList.contains('active')) {\n  1348→            updateSystemHealth();\n  1349→        }\n  1350→    }, 10000);\n  1351→    \n  1352→    // Add keyboard navigation support\n  1353→    setupKeyboardNavigation();\n  1354→});\n  1355→\n  1356→function setupNavigation() {\n  1357→    const navItems = document.querySelectorAll('.nav-item[data-page]');\n  1358→    navItems.forEach(item => {\n  1359→        item.addEventListener('click', (e) => {\n  1360→            e.preventDefault();\n  1361→            const pageId = item.getAttribute('data-page');\n  1362→            showPage(pageId, item);\n  1363→        });\n  1364→        \n  1365→        // Add keyboard support\n  1366→        item.addEventListener('keydown', (e) => {\n  1367→            if (e.key === 'Enter' || e.key === ' ') {\n  1368→                e.preventDefault();\n  1369→                const pageId = item.getAttribute('data-page');\n  1370→                showPage(pageId, item);\n  1371→            }\n  1372→        });\n  1373→    });\n  1374→}\n  1375→\n  1376→function setupKeyboardNavigation() {\n  1377→    document.addEventListener('keydown', (e) => {\n  1378→        // Alt + number keys for quick navigation\n  1379→        if (e.altKey && e.key >= '1' && e.key <= '6') {\n  1380→            e.preventDefault();\n  1381→            const pageIndex = parseInt(e.key) - 1;\n  1382→            const navItems = document.querySelectorAll('.nav-item[data-page]');\n  1383→            if (navItems[pageIndex]) {\n  1384→                const pageId = navItems[pageIndex].getAttribute('data-page');\n  1385→                showPage(pageId, navItems[pageIndex]);\n  1386→                navItems[pageIndex].focus();\n  1387→            }\n  1388→        }\n  1389→    });\n  1390→}\n  1391→\n  1392→// =============================================================================\n  1393→// STANDALONE DEMO MODE FUNCTION\n  1394→// =============================================================================\n  1395→\n  1396→/**\n  1397→ * Toggle demo mode - works even if dashboard object fails to initialize\n  1398→ * Can also be called directly: dashboard.toggleDemoMode()\n  1399→ */\n  1400→function toggleDemo() {\n  1401→    if (dashboard && typeof dashboard.toggleDemoMode === 'function') {\n  1402→        dashboard.toggleDemoMode();\n  1403→    } else {\n  1404→        console.error('%c✗ DEMO MODE ERROR', 'color: #e74c3c; font-size: 16px; font-weight: bold;');\n  1405→        console.error('Dashboard object not initialized or toggleDemoMode method not available');\n  1406→        console.error('Check for JavaScript errors above');\n  1407→    }\n  1408→}\n  1409→\n  1410→// Add helpful message on load\n  1411→console.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');\n  1412→console.log('%c NAVAIR Dashboard Console', 'color: #3498db; font-size: 14px; font-weight: bold;');\n  1413→console.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');\n  1414→console.log('%cTo enable DEMO MODE for presentation:', 'font-weight: bold;');\n  1415→console.log('%c  dashboard.toggleDemoMode()', 'color: #27ae60; font-family: monospace;');\n  1416→console.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"f868badf-e4dc-4447-9b54-c6237633c782","timestamp":"2025-10-17T03:10:09.008Z","toolUseResult":{"type":"text","file":{"filePath":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js","content":"/**\n * NAVAIR Additive Manufacturing Dashboard\n * \n * A modern, professional web dashboard for monitoring NAVAIR 3D printer operations\n * with real-time data visualization, system health monitoring, and quality analytics.\n * \n * @version 2.0\n * @author NAVAIR Team\n * @created January 2025\n * \n * Features:\n * - Real-time sensor monitoring with gauges and charts\n * - Multi-page navigation with accessibility support\n * - API integration with comprehensive error handling\n * - Responsive design for mobile and desktop\n * - Professional UI with loading states and animations\n */\n\n/**\n * Main Dashboard Controller Class\n * \n * Manages all dashboard functionality including:\n * - API communication and data fetching\n * - Chart rendering and updates\n * - UI state management\n * - Error handling and user feedback\n */\nclass NAVAIRDashboard {\n    /**\n     * Initialize dashboard with configuration and state\n     */\n    constructor() {\n        this.apiBaseUrl = 'http://localhost:8000/api';\n        this.updateInterval = 2000; // 2 seconds\n        this.charts = {};\n        this.gauges = {};\n        this.isConnected = {\n            sensors: false,\n            print: false\n        };\n        this.sensorHistory = [];\n        this.maxHistoryPoints = 50;\n\n        // Demo mode for presentations\n        this.demoMode = false;\n        this.mockData = {\n            nozzleTemp: 210,\n            bedTemp: 60,\n            humidity: 45,\n            pressure: 1013,\n            ambientTemp: 22,\n            bedVibration: { x: 0.02, y: 0.015, z: 0.01 },\n            bodyVibration: { x: 0.03, y: 0.025, z: 0.015 },\n            printProgress: 65,\n            qualityScore: 0.92\n        };\n\n        this.init();\n    }\n\n    /**\n     * Initialize dashboard components and start data fetching\n     */\n    async init() {\n        try {\n            this.setupGauges();\n        } catch (error) {\n            console.error('Error setting up gauges:', error);\n        }\n\n        try {\n            this.setupCharts();\n        } catch (error) {\n            console.error('Error setting up charts:', error);\n        }\n\n        try {\n            this.startDataFetching();\n            this.updateConnectionStatus();\n        } catch (error) {\n            console.error('Error starting data fetching:', error);\n        }\n\n        console.log('Dashboard initialized successfully');\n    }\n\n    // =============================================================================\n    // CHART AND GAUGE SETUP METHODS\n    // =============================================================================\n\n    /**\n     * Setup gauges - simplified to just use text displays\n     */\n    setupGauges() {\n        // Gauges removed - using simple text display instead\n        console.log('Using simplified text-based display (gauges disabled)');\n    }\n\n    /**\n     * Setup line charts for vibration and historical data\n     */\n    setupCharts() {\n        // Vibration Chart\n        const vibCtx = document.getElementById('vibration-chart');\n        if (vibCtx) {\n            this.charts.vibration = new Chart(vibCtx, {\n                type: 'line',\n                data: {\n                    labels: [],\n                    datasets: [{\n                        label: 'Bed Vibration',\n                        data: [],\n                        borderColor: '#e74c3c',\n                        backgroundColor: 'rgba(231, 76, 60, 0.1)',\n                        tension: 0.4\n                    }, {\n                        label: 'Body Vibration',\n                        data: [],\n                        borderColor: '#3498db',\n                        backgroundColor: 'rgba(52, 152, 219, 0.1)',\n                        tension: 0.4\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        intersect: false,\n                        mode: 'index'\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            title: {\n                                display: true,\n                                text: 'Vibration (mm/s²)'\n                            }\n                        },\n                        x: {\n                            title: {\n                                display: true,\n                                text: 'Time'\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            display: true,\n                            position: 'top'\n                        }\n                    }\n                }\n            });\n        }\n\n        // Historical Data Chart\n        const historyCtx = document.getElementById('history-chart');\n        if (historyCtx) {\n            this.charts.history = new Chart(historyCtx, {\n                type: 'line',\n                data: {\n                    labels: [],\n                    datasets: [{\n                        label: 'Nozzle Temp (°C)',\n                        data: [],\n                        borderColor: '#e74c3c',\n                        backgroundColor: 'rgba(231, 76, 60, 0.1)',\n                        yAxisID: 'y'\n                    }, {\n                        label: 'Bed Temp (°C)',\n                        data: [],\n                        borderColor: '#e67e22',\n                        backgroundColor: 'rgba(230, 126, 34, 0.1)',\n                        yAxisID: 'y'\n                    }, {\n                        label: 'Humidity (%)',\n                        data: [],\n                        borderColor: '#3498db',\n                        backgroundColor: 'rgba(52, 152, 219, 0.1)',\n                        yAxisID: 'y1'\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        intersect: false,\n                        mode: 'index'\n                    },\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            display: true,\n                            position: 'left',\n                            title: {\n                                display: true,\n                                text: 'Temperature (°C)'\n                            }\n                        },\n                        y1: {\n                            type: 'linear',\n                            display: true,\n                            position: 'right',\n                            title: {\n                                display: true,\n                                text: 'Humidity (%)'\n                            },\n                            grid: {\n                                drawOnChartArea: false,\n                            },\n                        },\n                        x: {\n                            title: {\n                                display: true,\n                                text: 'Time'\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            display: true,\n                            position: 'top'\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    // =============================================================================\n    // DEMO MODE METHODS\n    // =============================================================================\n\n    /**\n     * Toggle demo mode on/off\n     */\n    toggleDemoMode() {\n        this.demoMode = !this.demoMode;\n\n        if (this.demoMode) {\n            // Immediately update connection status and fetch mock data\n            this.setConnectionStatus('sensors', true);\n            this.setConnectionStatus('print', true);\n\n            // Fetch mock data immediately\n            this.fetchSensorData();\n            this.fetchPrintStatus();\n\n            console.log('%c✓ DEMO MODE ENABLED', 'color: #27ae60; font-size: 16px; font-weight: bold;');\n            console.log('The dashboard will now display realistic mock data.');\n            console.log('To disable: dashboard.toggleDemoMode()');\n        } else {\n            console.log('%c✗ DEMO MODE DISABLED', 'color: #e74c3c; font-size: 16px; font-weight: bold;');\n        }\n    }\n\n    /**\n     * Generate realistic mock sensor data with natural variations\n     * @returns {Object} Mock sensor data\n     */\n    generateMockSensorData() {\n        // Add realistic variations to mock data\n        this.mockData.nozzleTemp += (Math.random() - 0.5) * 2; // ±1°C variation\n        this.mockData.nozzleTemp = Math.max(200, Math.min(220, this.mockData.nozzleTemp));\n\n        this.mockData.bedTemp += (Math.random() - 0.5) * 1; // ±0.5°C variation\n        this.mockData.bedTemp = Math.max(55, Math.min(65, this.mockData.bedTemp));\n\n        this.mockData.humidity += (Math.random() - 0.5) * 3; // ±1.5% variation\n        this.mockData.humidity = Math.max(40, Math.min(50, this.mockData.humidity));\n\n        this.mockData.pressure += (Math.random() - 0.5) * 2;\n        this.mockData.pressure = Math.max(1010, Math.min(1016, this.mockData.pressure));\n\n        this.mockData.ambientTemp += (Math.random() - 0.5) * 0.5;\n        this.mockData.ambientTemp = Math.max(20, Math.min(24, this.mockData.ambientTemp));\n\n        // Vibration with small random variations\n        this.mockData.bedVibration = {\n            x: 0.02 + (Math.random() - 0.5) * 0.01,\n            y: 0.015 + (Math.random() - 0.5) * 0.01,\n            z: 0.01 + (Math.random() - 0.5) * 0.005\n        };\n\n        this.mockData.bodyVibration = {\n            x: 0.03 + (Math.random() - 0.5) * 0.015,\n            y: 0.025 + (Math.random() - 0.5) * 0.015,\n            z: 0.015 + (Math.random() - 0.5) * 0.01\n        };\n\n        return {\n            temperature: {\n                nozzle: this.mockData.nozzleTemp,\n                bed: this.mockData.bedTemp,\n                ambient: this.mockData.ambientTemp\n            },\n            humidity: this.mockData.humidity,\n            pressure: this.mockData.pressure,\n            vibration: {\n                bed: this.mockData.bedVibration,\n                body: this.mockData.bodyVibration\n            }\n        };\n    }\n\n    /**\n     * Generate mock print status data\n     * @returns {Object} Mock print data\n     */\n    generateMockPrintData() {\n        // Simulate print progress\n        this.mockData.printProgress += 0.5;\n        if (this.mockData.printProgress > 100) {\n            this.mockData.printProgress = 15; // Reset to new job\n        }\n\n        // Quality score varies slightly\n        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n\n        return {\n            job_name: 'Bracket_Assembly_v3',\n            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n            progress: Math.round(this.mockData.printProgress),\n            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 2.5)),\n            quality_score: this.mockData.qualityScore,\n            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n        };\n    }\n\n    /**\n     * Generate mock system health data\n     * @returns {Object} Mock health data\n     */\n    generateMockHealthData() {\n        return {\n            cpu_temp: 45 + Math.random() * 10,\n            memory_usage: 55 + Math.random() * 15,\n            disk_free: 128 + Math.random() * 5,\n            cpu_usage: 30 + Math.random() * 20,\n            network_status: 'Connected'\n        };\n    }\n\n    // =============================================================================\n    // API COMMUNICATION METHODS\n    // =============================================================================\n\n    /**\n     * Fetch current sensor data from API with proper error handling\n     * @returns {Object|null} Sensor data or null on error\n     */\n    async fetchSensorData() {\n        // Use mock data in demo mode\n        if (this.demoMode) {\n            const mockData = this.generateMockSensorData();\n            this.updateSensorData(mockData);\n            this.setConnectionStatus('sensors', true);\n            return mockData;\n        }\n\n        // Show loading states\n        this.setLoadingState('nozzle-temp-value');\n        this.setLoadingState('bed-temp-value');\n        this.setLoadingState('humidity-value');\n\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() => controller.abort(), 5000);\n\n            const response = await fetch(`${this.apiBaseUrl}/sensors/current`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                signal: controller.signal\n            });\n\n            clearTimeout(timeoutId);\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            this.updateSensorData(data);\n            this.setConnectionStatus('sensors', true);\n            return data;\n\n        } catch (error) {\n            console.error('Sensor API Error:', error);\n            this.setConnectionStatus('sensors', false);\n\n            let errorMessage = 'Unable to connect to sensor API';\n            if (error.name === 'AbortError') {\n                errorMessage = 'Sensor API request timed out';\n            } else if (!navigator.onLine) {\n                errorMessage = 'No internet connection';\n            }\n\n            this.showSensorError(errorMessage);\n            return null;\n        }\n    }\n\n    async fetchPrintStatus() {\n        // Use mock data in demo mode\n        if (this.demoMode) {\n            const mockData = this.generateMockPrintData();\n            this.updatePrintData(mockData);\n            this.setConnectionStatus('print', true);\n            return mockData;\n        }\n\n        try {\n            const response = await fetch(`${this.apiBaseUrl}/print/status`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                timeout: 5000\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            this.updatePrintData(data);\n            this.setConnectionStatus('print', true);\n            return data;\n\n        } catch (error) {\n            console.error('Print API Error:', error);\n            this.setConnectionStatus('print', false);\n            this.showPrintError('Unable to connect to print API');\n            return null;\n        }\n    }\n\n    updateSensorData(data) {\n        if (!data || !data.temperature) {\n            this.showSensorError('Invalid sensor data received');\n            this.showAnalysisError();\n            this.showHealthError();\n            this.showQualityError();\n            return;\n        }\n\n        // Update temperature values (no gauges, just text)\n        if (data.temperature.nozzle !== undefined) {\n            const nozzleTemp = parseFloat(data.temperature.nozzle);\n            this.updateElement('nozzle-temp-value', `${nozzleTemp.toFixed(1)}°C`);\n        }\n\n        if (data.temperature.bed !== undefined) {\n            const bedTemp = parseFloat(data.temperature.bed);\n            this.updateElement('bed-temp-value', `${bedTemp.toFixed(1)}°C`);\n        }\n\n        // Update environmental data\n        if (data.humidity !== undefined) {\n            this.updateElement('humidity-value', `${parseFloat(data.humidity).toFixed(1)}%`);\n        }\n        \n        if (data.pressure !== undefined) {\n            this.updateElement('pressure-value', `${parseFloat(data.pressure).toFixed(1)} hPa`);\n        }\n        \n        if (data.temperature.ambient !== undefined) {\n            this.updateElement('ambient-temp-value', `${parseFloat(data.temperature.ambient).toFixed(1)}°C`);\n        }\n\n        // Update vibration data\n        if (data.vibration) {\n            const bedVib = this.calculateVibrationMagnitude(data.vibration.bed) * 1000;\n            const bodyVib = this.calculateVibrationMagnitude(data.vibration.body) * 1000;\n            \n            this.updateElement('bed-vibration-value', `${bedVib.toFixed(2)} mm/s²`);\n            this.updateElement('body-vibration-value', `${bodyVib.toFixed(2)} mm/s²`);\n            \n            this.updateVibrationChart(bedVib, bodyVib);\n        }\n\n        // Store historical data\n        this.addToHistory(data);\n        this.updateHistoryChart();\n    }\n\n    updatePrintData(data) {\n        if (!data) {\n            this.showPrintError('Invalid print data received');\n            return;\n        }\n\n        this.updateElement('job-name', data.job_name || 'No active job');\n        this.updateElement('job-status', data.status || 'Unknown');\n        this.updateElement('job-progress', `${data.progress || 0}%`);\n        this.updateElement('time-remaining', data.time_remaining ? `${data.time_remaining}m` : '--');\n\n        // Update quality score (no gauge, just text)\n        if (data.quality_score !== undefined) {\n            const qualityScore = Math.round(data.quality_score * 100);\n            this.updateElement('quality-value', `${qualityScore}%`);\n        }\n\n        this.updateElement('ml-prediction', data.ml_prediction || 'No prediction');\n    }\n\n    calculateVibrationMagnitude(vibData) {\n        if (!vibData || typeof vibData.x !== 'number') return 0;\n        return Math.sqrt(\n            Math.pow(vibData.x, 2) + \n            Math.pow(vibData.y, 2) + \n            Math.pow(vibData.z, 2)\n        );\n    }\n\n    addToHistory(data) {\n        const timestamp = new Date();\n        const historyPoint = {\n            timestamp: timestamp,\n            nozzleTemp: data.temperature?.nozzle || 0,\n            bedTemp: data.temperature?.bed || 0,\n            humidity: data.humidity || 0\n        };\n\n        this.sensorHistory.push(historyPoint);\n        \n        // Keep only last N points\n        if (this.sensorHistory.length > this.maxHistoryPoints) {\n            this.sensorHistory.shift();\n        }\n    }\n\n    updateVibrationChart(bedVib, bodyVib) {\n        if (!this.charts.vibration) return;\n\n        const timestamp = new Date().toLocaleTimeString();\n        const chart = this.charts.vibration;\n\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(bedVib);\n        chart.data.datasets[1].data.push(bodyVib);\n\n        // Keep only last 20 points\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n    }\n\n    updateHistoryChart() {\n        if (!this.charts.history || this.sensorHistory.length === 0) return;\n\n        const chart = this.charts.history;\n        const labels = this.sensorHistory.map(point => point.timestamp.toLocaleTimeString());\n        \n        chart.data.labels = labels;\n        chart.data.datasets[0].data = this.sensorHistory.map(point => point.nozzleTemp);\n        chart.data.datasets[1].data = this.sensorHistory.map(point => point.bedTemp);\n        chart.data.datasets[2].data = this.sensorHistory.map(point => point.humidity);\n\n        chart.update('none');\n    }\n\n    setConnectionStatus(type, connected) {\n        this.isConnected[type] = connected;\n        this.showConnectionStatus(type, connected);\n    }\n\n    updateConnectionStatus() {\n        this.updateElement('last-update', new Date().toLocaleTimeString());\n    }\n\n    showSensorError(message) {\n        this.updateElement('nozzle-temp-value', 'API Error', 'error');\n        this.updateElement('bed-temp-value', 'API Error', 'error');\n        this.updateElement('humidity-value', 'API Error', 'error');\n        this.updateElement('pressure-value', 'API Error', 'error');\n        this.updateElement('ambient-temp-value', 'API Error', 'error');\n        this.updateElement('bed-vibration-value', 'API Error', 'error');\n        this.updateElement('body-vibration-value', 'API Error', 'error');\n        this.showConnectionStatus('sensors', false, message);\n    }\n\n    showPrintError(message) {\n        this.updateElement('job-name', 'API Connection Failed', 'error');\n        this.updateElement('job-status', 'Disconnected', 'error');\n        this.updateElement('job-progress', 'API Error', 'error');\n        this.updateElement('time-remaining', 'No Connection', 'error');\n        this.updateElement('quality-value', 'API Error', 'error');\n        this.updateElement('ml-prediction', 'No connection', 'error');\n        this.showConnectionStatus('print', false, message);\n        this.showQualityError();\n    }\n\n    showAnalysisError() {\n        this.updateElement('correlation-status', 'API Not Connected');\n        this.updateElement('anomaly-count', 'No Data Available');\n        this.updateElement('prediction-accuracy', 'API Error');\n        this.updateElement('process-capability', 'No Connection');\n        this.updateElement('ml-confidence', 'API Error');\n        this.updateElement('training-accuracy', 'No Data');\n        this.updateElement('failure-risk', 'API Not Available');\n        this.updateElement('quality-risk', 'No Connection');\n    }\n\n    showHealthError() {\n        this.updateElement('cpu-temp', 'API Error');\n        this.updateElement('memory-usage', 'API Error');\n        this.updateElement('disk-usage', 'API Error');\n        this.updateElement('network-status', 'Disconnected');\n        this.updateElement('bme280-status', 'API Error');\n        this.updateElement('mpu-bed-status', 'API Error');\n        this.updateElement('mpu-body-status', 'API Error');\n        this.updateElement('laser-status', 'API Error');\n    }\n\n    showQualityError() {\n        this.updateElement('overall-quality', 'API Not Available');\n        this.updateElement('successful-prints', 'No Data');\n        this.updateElement('avg-print-time', 'API Error');\n        this.updateElement('material-efficiency', 'No Connection');\n        this.updateElement('critical-failures', 'API Error');\n        this.updateElement('medium-risk', 'API Error');\n        this.updateElement('low-risk', 'API Error');\n        this.updateElement('rpn-average', 'No Data');\n    }\n\n    showMaintenanceError() {\n        this.updateElement('next-calibration', 'API Error');\n        this.updateElement('sensor-cleaning', 'No Data Available');\n        this.updateElement('filter-replacement', 'API Error');\n        this.updateElement('system-backup', 'API Not Connected');\n        this.updateElement('last-bme280-cal', 'API Error');\n        this.updateElement('last-mpu-cal', 'API Error');\n        this.updateElement('laser-check', 'No Data');\n        this.updateElement('drift-compensation', 'API Error');\n    }\n\n    // =============================================================================\n    // UI UPDATE AND STATE MANAGEMENT METHODS\n    // =============================================================================\n    \n    /**\n     * Update DOM element with value and optional CSS class\n     * @param {string} id - Element ID\n     * @param {string} value - Text content to set\n     * @param {string} className - Optional CSS class to add\n     */\n    updateElement(id, value, className = '') {\n        const element = document.getElementById(id);\n        if (element) {\n            element.textContent = value;\n            \n            // Remove existing state classes\n            element.classList.remove('loading', 'error', 'success');\n            \n            // Add new class if specified\n            if (className) {\n                element.classList.add(className);\n            }\n        }\n    }\n\n    setLoadingState(id, loading = true) {\n        const element = document.getElementById(id);\n        if (element) {\n            if (loading) {\n                element.classList.add('loading');\n                element.textContent = 'Loading...';\n            } else {\n                element.classList.remove('loading');\n            }\n        }\n    }\n\n    showConnectionStatus(type, connected, details = '') {\n        const statusDot = document.getElementById(`${type}-status`);\n        const statusText = document.getElementById(`${type}-connection`);\n        \n        if (statusDot) {\n            statusDot.className = `status-dot ${connected ? 'connected' : 'disconnected'}`;\n            statusDot.setAttribute('aria-label', connected ? 'Connected' : 'Disconnected');\n        }\n        \n        if (statusText) {\n            const status = connected ? 'Connected' : 'Disconnected';\n            statusText.textContent = details ? `${status} - ${details}` : status;\n            statusText.className = `connection-status ${connected ? 'connected' : 'disconnected'}`;\n        }\n    }\n\n    showAlert(message, type = 'error') {\n        const alert = document.getElementById(`${type}-alert`);\n        if (alert) {\n            alert.textContent = message;\n            alert.style.display = 'block';\n            setTimeout(() => {\n                alert.style.display = 'none';\n            }, 5000);\n        }\n    }\n\n    startDataFetching() {\n        // Initial fetch\n        this.fetchSensorData();\n        this.fetchPrintStatus();\n        \n        // Show initial errors for all pages\n        this.showAnalysisError();\n        this.showHealthError();\n        this.showQualityError();\n        this.showMaintenanceError();\n\n        // Set up intervals\n        setInterval(() => {\n            this.fetchSensorData();\n            this.updateConnectionStatus();\n        }, this.updateInterval);\n\n        setInterval(() => {\n            this.fetchPrintStatus();\n        }, 5000); // Print status every 5 seconds\n    }\n}\n\n// =============================================================================\n// CONTROL FUNCTIONS - System Control Actions\n// =============================================================================\n\n/**\n * Emergency stop function - immediately halts printer operation\n */\nasync function emergencyStop() {\n    dashboard.showAlert('Emergency stop activated!', 'error');\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/emergency_stop`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Emergency stop successful', 'success');\n        }\n    } catch (error) {\n        console.error('Emergency stop failed:', error);\n    }\n}\n\nasync function pauseResume() {\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/pause_resume`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Pause/Resume command sent', 'success');\n        }\n    } catch (error) {\n        console.error('Pause/Resume failed:', error);\n        dashboard.showAlert('Unable to send pause/resume command', 'error');\n    }\n}\n\nasync function calibrateSensors() {\n    dashboard.showAlert('Starting sensor calibration...', 'success');\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/calibrate`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Sensor calibration initiated', 'success');\n        }\n    } catch (error) {\n        console.error('Calibration failed:', error);\n        dashboard.showAlert('Unable to start calibration', 'error');\n    }\n}\n\nasync function exportData() {\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/data/export`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' }\n        });\n        if (response.ok) {\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `navair_data_${new Date().toISOString().split('T')[0]}.json`;\n            a.click();\n            dashboard.showAlert('Data export completed', 'success');\n        }\n    } catch (error) {\n        console.error('Export failed:', error);\n        dashboard.showAlert('Unable to export data', 'error');\n    }\n}\n\n// =============================================================================\n// PAGE NAVIGATION SYSTEM\n// =============================================================================\n\n/**\n * Show specified page and update navigation state\n * @param {string} pageId - ID of page to show\n * @param {HTMLElement} element - Navigation element that was clicked\n */\nfunction showPage(pageId, element) {\n    // Hide all pages and update ARIA attributes\n    const pages = document.querySelectorAll('.page');\n    pages.forEach(page => {\n        page.classList.remove('active');\n        page.setAttribute('aria-hidden', 'true');\n    });\n    \n    // Show selected page\n    const selectedPage = document.getElementById(pageId + '-page');\n    if (selectedPage) {\n        selectedPage.classList.add('active');\n        selectedPage.setAttribute('aria-hidden', 'false');\n    }\n    \n    // Update navigation ARIA attributes\n    const navItems = document.querySelectorAll('.nav-item');\n    navItems.forEach(item => {\n        item.classList.remove('active');\n        item.setAttribute('aria-selected', 'false');\n        item.setAttribute('tabindex', '-1');\n    });\n    \n    if (element) {\n        element.classList.add('active');\n        element.setAttribute('aria-selected', 'true');\n        element.setAttribute('tabindex', '0');\n    }\n    \n    // Initialize page-specific content\n    initializePage(pageId);\n    \n    // Update page title\n    updatePageTitle(pageId);\n}\n\nfunction updatePageTitle(pageId) {\n    const titles = {\n        'dashboard': 'Dashboard',\n        'analysis': 'Analysis',\n        'health': 'System Health',\n        'quality': 'Quality Reports',\n        'maintenance': 'Maintenance',\n        'settings': 'Settings'\n    };\n    document.title = `NAVAIR Monitor - ${titles[pageId] || 'Dashboard'}`;\n}\n\nfunction initializePage(pageId) {\n    switch(pageId) {\n        case 'analysis':\n            setupAnalysisCharts();\n            break;\n        case 'health':\n            setupHealthMonitoring();\n            break;\n        case 'quality':\n            setupQualityCharts();\n            break;\n        case 'maintenance':\n            updateMaintenanceStatus();\n            break;\n        case 'settings':\n            loadSettings();\n            break;\n    }\n}\n\n// Analysis Page Functions\nfunction setupAnalysisCharts() {\n    // Populate analysis metrics in demo mode\n    if (dashboard && dashboard.demoMode) {\n        document.getElementById('correlation-status').textContent = 'Positive (0.78)';\n        document.getElementById('anomaly-count').textContent = '3 detected';\n        document.getElementById('prediction-accuracy').textContent = '96.4%';\n        document.getElementById('process-capability').textContent = '1.45 (Capable)';\n        document.getElementById('ml-confidence').textContent = '94.2%';\n        document.getElementById('training-accuracy').textContent = '96.4%';\n        document.getElementById('failure-risk').textContent = 'Low (12%)';\n        document.getElementById('quality-risk').textContent = 'Very Low (5%)';\n    }\n\n    // Correlation Chart\n    const correlationCtx = document.getElementById('correlation-chart');\n    if (correlationCtx && !correlationCtx.chart) {\n        correlationCtx.chart = new Chart(correlationCtx, {\n            type: 'scatter',\n            data: {\n                datasets: [{\n                    label: 'Temperature vs Quality',\n                    data: generateCorrelationData(),\n                    backgroundColor: 'rgba(52, 152, 219, 0.5)',\n                    borderColor: '#3498db'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    x: {\n                        title: {\n                            display: true,\n                            text: 'Temperature (°C)'\n                        }\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: 'Quality Score'\n                        },\n                        min: 0,\n                        max: 1\n                    }\n                }\n            }\n        });\n    }\n\n    // ML Performance Chart\n    const mlCtx = document.getElementById('ml-performance-chart');\n    if (mlCtx && !mlCtx.chart) {\n        mlCtx.chart = new Chart(mlCtx, {\n            type: 'line',\n            data: {\n                labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7'],\n                datasets: [{\n                    label: 'Accuracy',\n                    data: [85, 87, 89, 92, 94, 96, 96.4],\n                    borderColor: '#27ae60',\n                    backgroundColor: 'rgba(39, 174, 96, 0.1)'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: false,\n                        min: 80,\n                        max: 100,\n                        title: {\n                            display: true,\n                            text: 'Accuracy (%)'\n                        }\n                    }\n                }\n            }\n        });\n    }\n}\n\nfunction generateCorrelationData() {\n    // Generate mock correlation data in demo mode\n    if (dashboard && dashboard.demoMode) {\n        const mockPoints = [];\n        for (let i = 0; i < 30; i++) {\n            mockPoints.push({\n                x: 200 + Math.random() * 25,\n                y: 0.85 + Math.random() * 0.13\n            });\n        }\n        return mockPoints;\n    }\n\n    // Only generate data if APIs are connected\n    if (!dashboard || (!dashboard.isConnected.sensors && !dashboard.isConnected.print)) {\n        return [{ x: 0, y: 0, label: 'No API Connection' }];\n    }\n\n    // Use actual historical data if available\n    if (dashboard.sensorHistory.length > 0) {\n        return dashboard.sensorHistory.map(point => ({\n            x: point.nozzleTemp || 0,\n            y: (point.qualityScore || 0) / 100\n        }));\n    }\n\n    return [{ x: 0, y: 0, label: 'No Historical Data' }];\n}\n\n// Health Monitoring Functions\nfunction setupHealthMonitoring() {\n    updateSystemHealth();\n    \n    const perfCtx = document.getElementById('performance-chart');\n    if (perfCtx && !perfCtx.chart) {\n        perfCtx.chart = new Chart(perfCtx, {\n            type: 'line',\n            data: {\n                labels: [],\n                datasets: [{\n                    label: 'CPU Usage (%)',\n                    data: [],\n                    borderColor: '#e74c3c',\n                    backgroundColor: 'rgba(231, 76, 60, 0.1)'\n                }, {\n                    label: 'Memory Usage (%)',\n                    data: [],\n                    borderColor: '#3498db',\n                    backgroundColor: 'rgba(52, 152, 219, 0.1)'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        max: 100,\n                        title: {\n                            display: true,\n                            text: 'Usage (%)'\n                        }\n                    }\n                }\n            }\n        });\n        \n        // Simulate real-time performance data\n        setInterval(() => {\n            updatePerformanceChart(perfCtx.chart);\n        }, 5000);\n    }\n}\n\nasync function updateSystemHealth() {\n    // Use mock data in demo mode\n    if (dashboard.demoMode) {\n        const mockData = dashboard.generateMockHealthData();\n        document.getElementById('cpu-temp').textContent = `${mockData.cpu_temp.toFixed(1)}°C`;\n        document.getElementById('memory-usage').textContent = `${mockData.memory_usage.toFixed(1)}%`;\n        document.getElementById('disk-usage').textContent = `${mockData.disk_free.toFixed(1)}GB free`;\n        document.getElementById('network-status').textContent = mockData.network_status;\n        document.getElementById('bme280-status').textContent = 'Operational';\n        document.getElementById('mpu-bed-status').textContent = 'Operational';\n        document.getElementById('mpu-body-status').textContent = 'Operational';\n        document.getElementById('laser-status').textContent = 'Operational';\n        return;\n    }\n\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/system/health`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' },\n            timeout: 5000\n        });\n\n        if (!response.ok) {\n            throw new Error('API connection failed');\n        }\n\n        const data = await response.json();\n\n        document.getElementById('cpu-temp').textContent = data.cpu_temp ? `${data.cpu_temp}°C` : 'No Data';\n        document.getElementById('memory-usage').textContent = data.memory_usage ? `${data.memory_usage}%` : 'No Data';\n        document.getElementById('disk-usage').textContent = data.disk_free ? `${data.disk_free}GB free` : 'No Data';\n\n    } catch (error) {\n        console.error('System Health API Error:', error);\n        document.getElementById('cpu-temp').textContent = 'API Error';\n        document.getElementById('memory-usage').textContent = 'API Error';\n        document.getElementById('disk-usage').textContent = 'API Error';\n    }\n}\n\nasync function updatePerformanceChart(chart) {\n    const timestamp = new Date().toLocaleTimeString();\n\n    // Use mock data in demo mode\n    if (dashboard.demoMode) {\n        const mockData = dashboard.generateMockHealthData();\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(mockData.cpu_usage);\n        chart.data.datasets[1].data.push(mockData.memory_usage);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n        return;\n    }\n\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/system/performance`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' },\n            timeout: 5000\n        });\n\n        if (!response.ok) {\n            throw new Error('Performance API connection failed');\n        }\n\n        const data = await response.json();\n\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(data.cpu_usage || 0);\n        chart.data.datasets[1].data.push(data.memory_usage || 0);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n\n    } catch (error) {\n        console.error('Performance Chart Error:', error);\n        // Don't update chart if API is not available\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(null);\n        chart.data.datasets[1].data.push(null);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n    }\n}\n\n// Quality Page Functions\nfunction setupQualityCharts() {\n    // Populate quality metrics in demo mode\n    if (dashboard && dashboard.demoMode) {\n        document.getElementById('overall-quality').textContent = '92.3%';\n        document.getElementById('successful-prints').textContent = '';\n        document.getElementById('avg-print-time').textContent = '3h 24m';\n        document.getElementById('material-efficiency').textContent = '94.7%';\n        document.getElementById('critical-failures').textContent = '2';\n        document.getElementById('medium-risk').textContent = '8';\n        document.getElementById('low-risk').textContent = '15';\n        document.getElementById('rpn-average').textContent = '34.2';\n    }\n\n    const qualityCtx = document.getElementById('quality-distribution-chart');\n    if (qualityCtx && !qualityCtx.chart) {\n        qualityCtx.chart = new Chart(qualityCtx, {\n            type: 'doughnut',\n            data: {\n                labels: ['Excellent', 'Good', 'Fair', 'Poor'],\n                datasets: [{\n                    data: [65, 25, 8, 2],\n                    backgroundColor: [\n                        '#27ae60',\n                        '#f39c12',\n                        '#e67e22',\n                        '#e74c3c'\n                    ]\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n}\n\n// Maintenance Functions\nfunction updateMaintenanceStatus() {\n    // Populate maintenance data in demo mode\n    if (dashboard && dashboard.demoMode) {\n        const today = new Date();\n        const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n        const nextMonth = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000);\n        const lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n        const lastMonth = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n        document.getElementById('next-calibration').textContent = nextWeek.toLocaleDateString();\n        document.getElementById('sensor-cleaning').textContent = nextMonth.toLocaleDateString();\n        document.getElementById('filter-replacement').textContent = '---';\n        document.getElementById('system-backup').textContent = 'Last: ' + today.toLocaleDateString();\n        document.getElementById('last-bme280-cal').textContent = lastWeek.toLocaleDateString();\n        document.getElementById('last-mpu-cal').textContent = lastMonth.toLocaleDateString();\n        document.getElementById('laser-check').textContent = lastWeek.toLocaleDateString();\n        document.getElementById('drift-compensation').textContent = 'Active';\n    }\n\n    console.log('Maintenance status updated');\n}\n\nfunction startCalibration() {\n    alert('Starting sensor calibration process...');\n}\n\nfunction runDiagnostics() {\n    alert('Running system diagnostics...');\n}\n\nfunction backupSystem() {\n    alert('Starting system backup...');\n}\n\nfunction generateReport() {\n    alert('Generating maintenance report...');\n}\n\n// Settings Functions\nfunction loadSettings() {\n    // Load saved settings from localStorage\n    const updateInterval = localStorage.getItem('updateInterval') || '2000';\n    const tempUnits = localStorage.getItem('tempUnits') || 'celsius';\n    const alertSounds = localStorage.getItem('alertSounds') !== 'false';\n    const autoExport = localStorage.getItem('autoExport') === 'true';\n    const theme = localStorage.getItem('theme') || 'blue';\n    const defaultPage = localStorage.getItem('defaultPage') || 'dashboard';\n    \n    document.getElementById('update-interval').value = updateInterval;\n    document.getElementById('temp-units').value = tempUnits;\n    document.getElementById('alert-sounds').checked = alertSounds;\n    document.getElementById('auto-export').checked = autoExport;\n    document.getElementById('theme').value = theme;\n    document.getElementById('default-page').value = defaultPage;\n}\n\nfunction saveSettings() {\n    const updateInterval = document.getElementById('update-interval').value;\n    const tempUnits = document.getElementById('temp-units').value;\n    const alertSounds = document.getElementById('alert-sounds').checked;\n    const autoExport = document.getElementById('auto-export').checked;\n    const theme = document.getElementById('theme').value;\n    const defaultPage = document.getElementById('default-page').value;\n    \n    localStorage.setItem('updateInterval', updateInterval);\n    localStorage.setItem('tempUnits', tempUnits);\n    localStorage.setItem('alertSounds', alertSounds);\n    localStorage.setItem('autoExport', autoExport);\n    localStorage.setItem('theme', theme);\n    localStorage.setItem('defaultPage', defaultPage);\n    \n    alert('Settings saved successfully!');\n    \n    // Apply settings\n    if (dashboard) {\n        dashboard.updateInterval = parseInt(updateInterval);\n    }\n}\n\nfunction resetSettings() {\n    if (confirm('Are you sure you want to reset all settings to default?')) {\n        localStorage.clear();\n        loadSettings();\n        alert('Settings reset to default values');\n    }\n}\n\nfunction exportSettings() {\n    const settings = {\n        updateInterval: document.getElementById('update-interval').value,\n        tempUnits: document.getElementById('temp-units').value,\n        alertSounds: document.getElementById('alert-sounds').checked,\n        autoExport: document.getElementById('auto-export').checked,\n        theme: document.getElementById('theme').value,\n        defaultPage: document.getElementById('default-page').value\n    };\n    \n    const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'navair_settings.json';\n    a.click();\n    URL.revokeObjectURL(url);\n}\n\nfunction importSettings() {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    input.onchange = function(e) {\n        const file = e.target.files[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = function(e) {\n                try {\n                    const settings = JSON.parse(e.target.result);\n                    Object.keys(settings).forEach(key => {\n                        localStorage.setItem(key, settings[key]);\n                    });\n                    loadSettings();\n                    alert('Settings imported successfully!');\n                } catch (error) {\n                    alert('Error importing settings: Invalid file format');\n                }\n            };\n            reader.readAsText(file);\n        }\n    };\n    input.click();\n}\n\n// =============================================================================\n// APPLICATION INITIALIZATION\n// =============================================================================\n\n/**\n * Initialize dashboard when DOM is loaded\n */\nlet dashboard;\ndocument.addEventListener('DOMContentLoaded', () => {\n    dashboard = new NAVAIRDashboard();\n    \n    // Setup navigation event listeners\n    setupNavigation();\n    \n    // Load default page from settings\n    const defaultPage = localStorage.getItem('defaultPage') || 'dashboard';\n    if (defaultPage !== 'dashboard') {\n        setTimeout(() => {\n            const navItem = document.querySelector(`[data-page=\"${defaultPage}\"]`);\n            if (navItem) {\n                showPage(defaultPage, navItem);\n            }\n        }, 100);\n    }\n    \n    // Setup periodic health updates\n    setInterval(() => {\n        if (document.getElementById('health-page').classList.contains('active')) {\n            updateSystemHealth();\n        }\n    }, 10000);\n    \n    // Add keyboard navigation support\n    setupKeyboardNavigation();\n});\n\nfunction setupNavigation() {\n    const navItems = document.querySelectorAll('.nav-item[data-page]');\n    navItems.forEach(item => {\n        item.addEventListener('click', (e) => {\n            e.preventDefault();\n            const pageId = item.getAttribute('data-page');\n            showPage(pageId, item);\n        });\n        \n        // Add keyboard support\n        item.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                const pageId = item.getAttribute('data-page');\n                showPage(pageId, item);\n            }\n        });\n    });\n}\n\nfunction setupKeyboardNavigation() {\n    document.addEventListener('keydown', (e) => {\n        // Alt + number keys for quick navigation\n        if (e.altKey && e.key >= '1' && e.key <= '6') {\n            e.preventDefault();\n            const pageIndex = parseInt(e.key) - 1;\n            const navItems = document.querySelectorAll('.nav-item[data-page]');\n            if (navItems[pageIndex]) {\n                const pageId = navItems[pageIndex].getAttribute('data-page');\n                showPage(pageId, navItems[pageIndex]);\n                navItems[pageIndex].focus();\n            }\n        }\n    });\n}\n\n// =============================================================================\n// STANDALONE DEMO MODE FUNCTION\n// =============================================================================\n\n/**\n * Toggle demo mode - works even if dashboard object fails to initialize\n * Can also be called directly: dashboard.toggleDemoMode()\n */\nfunction toggleDemo() {\n    if (dashboard && typeof dashboard.toggleDemoMode === 'function') {\n        dashboard.toggleDemoMode();\n    } else {\n        console.error('%c✗ DEMO MODE ERROR', 'color: #e74c3c; font-size: 16px; font-weight: bold;');\n        console.error('Dashboard object not initialized or toggleDemoMode method not available');\n        console.error('Check for JavaScript errors above');\n    }\n}\n\n// Add helpful message on load\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');\nconsole.log('%c NAVAIR Dashboard Console', 'color: #3498db; font-size: 14px; font-weight: bold;');\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');\nconsole.log('%cTo enable DEMO MODE for presentation:', 'font-weight: bold;');\nconsole.log('%c  dashboard.toggleDemoMode()', 'color: #27ae60; font-family: monospace;');\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');","numLines":1416,"startLine":1,"totalLines":1416}}}
{"parentUuid":"f868badf-e4dc-4447-9b54-c6237633c782","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_011Nkx8s1fsTYFGs2pX7ZcpE","type":"message","role":"assistant","content":[{"type":"text","text":"Now I'll update the demo mode values to match your actual print job:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":18528,"cache_read_input_tokens":15697,"cache_creation":{"ephemeral_5m_input_tokens":18528,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CUC35ZyDmtSCphCcjJuEs","type":"assistant","uuid":"0d7c93d6-6e41-4a40-a688-e82226ec004a","timestamp":"2025-10-17T03:10:13.818Z"}
{"parentUuid":"0d7c93d6-6e41-4a40-a688-e82226ec004a","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_011Nkx8s1fsTYFGs2pX7ZcpE","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01JmfVSuzfERUGcuDhrjaBfm","name":"Edit","input":{"file_path":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js","old_string":"        // Demo mode for presentations\n        this.demoMode = false;\n        this.mockData = {\n            nozzleTemp: 210,\n            bedTemp: 60,\n            humidity: 45,\n            pressure: 1013,\n            ambientTemp: 22,\n            bedVibration: { x: 0.02, y: 0.015, z: 0.01 },\n            bodyVibration: { x: 0.03, y: 0.025, z: 0.015 },\n            printProgress: 65,\n            qualityScore: 0.92\n        };","new_string":"        // Demo mode for presentations\n        this.demoMode = false;\n        this.mockData = {\n            nozzleTemp: 252,\n            bedTemp: 85,\n            humidity: 45,\n            pressure: 1013,\n            ambientTemp: 22,\n            bedVibration: { x: 0.02, y: 0.015, z: 0.01 },\n            bodyVibration: { x: 0.03, y: 0.025, z: 0.015 },\n            printProgress: 0,\n            qualityScore: 0.92\n        };"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":18528,"cache_read_input_tokens":15697,"cache_creation":{"ephemeral_5m_input_tokens":18528,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CUC35ZyDmtSCphCcjJuEs","type":"assistant","uuid":"fa9619d3-ec77-4bf0-8831-3b876414e476","timestamp":"2025-10-17T03:10:19.125Z"}
{"parentUuid":"fa9619d3-ec77-4bf0-8831-3b876414e476","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01JmfVSuzfERUGcuDhrjaBfm","type":"tool_result","content":"The file /home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n    40→        };\n    41→        this.sensorHistory = [];\n    42→        this.maxHistoryPoints = 50;\n    43→\n    44→        // Demo mode for presentations\n    45→        this.demoMode = false;\n    46→        this.mockData = {\n    47→            nozzleTemp: 252,\n    48→            bedTemp: 85,\n    49→            humidity: 45,\n    50→            pressure: 1013,\n    51→            ambientTemp: 22,\n    52→            bedVibration: { x: 0.02, y: 0.015, z: 0.01 },\n    53→            bodyVibration: { x: 0.03, y: 0.025, z: 0.015 },\n    54→            printProgress: 0,\n    55→            qualityScore: 0.92\n    56→        };\n    57→\n    58→        this.init();\n    59→    }\n    60→"}]},"uuid":"7c2f84be-c283-4b73-8d83-9e722f9fa678","timestamp":"2025-10-17T03:10:31.755Z","toolUseResult":{"filePath":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js","oldString":"        // Demo mode for presentations\n        this.demoMode = false;\n        this.mockData = {\n            nozzleTemp: 210,\n            bedTemp: 60,\n            humidity: 45,\n            pressure: 1013,\n            ambientTemp: 22,\n            bedVibration: { x: 0.02, y: 0.015, z: 0.01 },\n            bodyVibration: { x: 0.03, y: 0.025, z: 0.015 },\n            printProgress: 65,\n            qualityScore: 0.92\n        };","newString":"        // Demo mode for presentations\n        this.demoMode = false;\n        this.mockData = {\n            nozzleTemp: 252,\n            bedTemp: 85,\n            humidity: 45,\n            pressure: 1013,\n            ambientTemp: 22,\n            bedVibration: { x: 0.02, y: 0.015, z: 0.01 },\n            bodyVibration: { x: 0.03, y: 0.025, z: 0.015 },\n            printProgress: 0,\n            qualityScore: 0.92\n        };","originalFile":"/**\n * NAVAIR Additive Manufacturing Dashboard\n * \n * A modern, professional web dashboard for monitoring NAVAIR 3D printer operations\n * with real-time data visualization, system health monitoring, and quality analytics.\n * \n * @version 2.0\n * @author NAVAIR Team\n * @created January 2025\n * \n * Features:\n * - Real-time sensor monitoring with gauges and charts\n * - Multi-page navigation with accessibility support\n * - API integration with comprehensive error handling\n * - Responsive design for mobile and desktop\n * - Professional UI with loading states and animations\n */\n\n/**\n * Main Dashboard Controller Class\n * \n * Manages all dashboard functionality including:\n * - API communication and data fetching\n * - Chart rendering and updates\n * - UI state management\n * - Error handling and user feedback\n */\nclass NAVAIRDashboard {\n    /**\n     * Initialize dashboard with configuration and state\n     */\n    constructor() {\n        this.apiBaseUrl = 'http://localhost:8000/api';\n        this.updateInterval = 2000; // 2 seconds\n        this.charts = {};\n        this.gauges = {};\n        this.isConnected = {\n            sensors: false,\n            print: false\n        };\n        this.sensorHistory = [];\n        this.maxHistoryPoints = 50;\n\n        // Demo mode for presentations\n        this.demoMode = false;\n        this.mockData = {\n            nozzleTemp: 210,\n            bedTemp: 60,\n            humidity: 45,\n            pressure: 1013,\n            ambientTemp: 22,\n            bedVibration: { x: 0.02, y: 0.015, z: 0.01 },\n            bodyVibration: { x: 0.03, y: 0.025, z: 0.015 },\n            printProgress: 65,\n            qualityScore: 0.92\n        };\n\n        this.init();\n    }\n\n    /**\n     * Initialize dashboard components and start data fetching\n     */\n    async init() {\n        try {\n            this.setupGauges();\n        } catch (error) {\n            console.error('Error setting up gauges:', error);\n        }\n\n        try {\n            this.setupCharts();\n        } catch (error) {\n            console.error('Error setting up charts:', error);\n        }\n\n        try {\n            this.startDataFetching();\n            this.updateConnectionStatus();\n        } catch (error) {\n            console.error('Error starting data fetching:', error);\n        }\n\n        console.log('Dashboard initialized successfully');\n    }\n\n    // =============================================================================\n    // CHART AND GAUGE SETUP METHODS\n    // =============================================================================\n\n    /**\n     * Setup gauges - simplified to just use text displays\n     */\n    setupGauges() {\n        // Gauges removed - using simple text display instead\n        console.log('Using simplified text-based display (gauges disabled)');\n    }\n\n    /**\n     * Setup line charts for vibration and historical data\n     */\n    setupCharts() {\n        // Vibration Chart\n        const vibCtx = document.getElementById('vibration-chart');\n        if (vibCtx) {\n            this.charts.vibration = new Chart(vibCtx, {\n                type: 'line',\n                data: {\n                    labels: [],\n                    datasets: [{\n                        label: 'Bed Vibration',\n                        data: [],\n                        borderColor: '#e74c3c',\n                        backgroundColor: 'rgba(231, 76, 60, 0.1)',\n                        tension: 0.4\n                    }, {\n                        label: 'Body Vibration',\n                        data: [],\n                        borderColor: '#3498db',\n                        backgroundColor: 'rgba(52, 152, 219, 0.1)',\n                        tension: 0.4\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        intersect: false,\n                        mode: 'index'\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            title: {\n                                display: true,\n                                text: 'Vibration (mm/s²)'\n                            }\n                        },\n                        x: {\n                            title: {\n                                display: true,\n                                text: 'Time'\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            display: true,\n                            position: 'top'\n                        }\n                    }\n                }\n            });\n        }\n\n        // Historical Data Chart\n        const historyCtx = document.getElementById('history-chart');\n        if (historyCtx) {\n            this.charts.history = new Chart(historyCtx, {\n                type: 'line',\n                data: {\n                    labels: [],\n                    datasets: [{\n                        label: 'Nozzle Temp (°C)',\n                        data: [],\n                        borderColor: '#e74c3c',\n                        backgroundColor: 'rgba(231, 76, 60, 0.1)',\n                        yAxisID: 'y'\n                    }, {\n                        label: 'Bed Temp (°C)',\n                        data: [],\n                        borderColor: '#e67e22',\n                        backgroundColor: 'rgba(230, 126, 34, 0.1)',\n                        yAxisID: 'y'\n                    }, {\n                        label: 'Humidity (%)',\n                        data: [],\n                        borderColor: '#3498db',\n                        backgroundColor: 'rgba(52, 152, 219, 0.1)',\n                        yAxisID: 'y1'\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        intersect: false,\n                        mode: 'index'\n                    },\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            display: true,\n                            position: 'left',\n                            title: {\n                                display: true,\n                                text: 'Temperature (°C)'\n                            }\n                        },\n                        y1: {\n                            type: 'linear',\n                            display: true,\n                            position: 'right',\n                            title: {\n                                display: true,\n                                text: 'Humidity (%)'\n                            },\n                            grid: {\n                                drawOnChartArea: false,\n                            },\n                        },\n                        x: {\n                            title: {\n                                display: true,\n                                text: 'Time'\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            display: true,\n                            position: 'top'\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    // =============================================================================\n    // DEMO MODE METHODS\n    // =============================================================================\n\n    /**\n     * Toggle demo mode on/off\n     */\n    toggleDemoMode() {\n        this.demoMode = !this.demoMode;\n\n        if (this.demoMode) {\n            // Immediately update connection status and fetch mock data\n            this.setConnectionStatus('sensors', true);\n            this.setConnectionStatus('print', true);\n\n            // Fetch mock data immediately\n            this.fetchSensorData();\n            this.fetchPrintStatus();\n\n            console.log('%c✓ DEMO MODE ENABLED', 'color: #27ae60; font-size: 16px; font-weight: bold;');\n            console.log('The dashboard will now display realistic mock data.');\n            console.log('To disable: dashboard.toggleDemoMode()');\n        } else {\n            console.log('%c✗ DEMO MODE DISABLED', 'color: #e74c3c; font-size: 16px; font-weight: bold;');\n        }\n    }\n\n    /**\n     * Generate realistic mock sensor data with natural variations\n     * @returns {Object} Mock sensor data\n     */\n    generateMockSensorData() {\n        // Add realistic variations to mock data\n        this.mockData.nozzleTemp += (Math.random() - 0.5) * 2; // ±1°C variation\n        this.mockData.nozzleTemp = Math.max(200, Math.min(220, this.mockData.nozzleTemp));\n\n        this.mockData.bedTemp += (Math.random() - 0.5) * 1; // ±0.5°C variation\n        this.mockData.bedTemp = Math.max(55, Math.min(65, this.mockData.bedTemp));\n\n        this.mockData.humidity += (Math.random() - 0.5) * 3; // ±1.5% variation\n        this.mockData.humidity = Math.max(40, Math.min(50, this.mockData.humidity));\n\n        this.mockData.pressure += (Math.random() - 0.5) * 2;\n        this.mockData.pressure = Math.max(1010, Math.min(1016, this.mockData.pressure));\n\n        this.mockData.ambientTemp += (Math.random() - 0.5) * 0.5;\n        this.mockData.ambientTemp = Math.max(20, Math.min(24, this.mockData.ambientTemp));\n\n        // Vibration with small random variations\n        this.mockData.bedVibration = {\n            x: 0.02 + (Math.random() - 0.5) * 0.01,\n            y: 0.015 + (Math.random() - 0.5) * 0.01,\n            z: 0.01 + (Math.random() - 0.5) * 0.005\n        };\n\n        this.mockData.bodyVibration = {\n            x: 0.03 + (Math.random() - 0.5) * 0.015,\n            y: 0.025 + (Math.random() - 0.5) * 0.015,\n            z: 0.015 + (Math.random() - 0.5) * 0.01\n        };\n\n        return {\n            temperature: {\n                nozzle: this.mockData.nozzleTemp,\n                bed: this.mockData.bedTemp,\n                ambient: this.mockData.ambientTemp\n            },\n            humidity: this.mockData.humidity,\n            pressure: this.mockData.pressure,\n            vibration: {\n                bed: this.mockData.bedVibration,\n                body: this.mockData.bodyVibration\n            }\n        };\n    }\n\n    /**\n     * Generate mock print status data\n     * @returns {Object} Mock print data\n     */\n    generateMockPrintData() {\n        // Simulate print progress\n        this.mockData.printProgress += 0.5;\n        if (this.mockData.printProgress > 100) {\n            this.mockData.printProgress = 15; // Reset to new job\n        }\n\n        // Quality score varies slightly\n        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n\n        return {\n            job_name: 'Bracket_Assembly_v3',\n            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n            progress: Math.round(this.mockData.printProgress),\n            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 2.5)),\n            quality_score: this.mockData.qualityScore,\n            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n        };\n    }\n\n    /**\n     * Generate mock system health data\n     * @returns {Object} Mock health data\n     */\n    generateMockHealthData() {\n        return {\n            cpu_temp: 45 + Math.random() * 10,\n            memory_usage: 55 + Math.random() * 15,\n            disk_free: 128 + Math.random() * 5,\n            cpu_usage: 30 + Math.random() * 20,\n            network_status: 'Connected'\n        };\n    }\n\n    // =============================================================================\n    // API COMMUNICATION METHODS\n    // =============================================================================\n\n    /**\n     * Fetch current sensor data from API with proper error handling\n     * @returns {Object|null} Sensor data or null on error\n     */\n    async fetchSensorData() {\n        // Use mock data in demo mode\n        if (this.demoMode) {\n            const mockData = this.generateMockSensorData();\n            this.updateSensorData(mockData);\n            this.setConnectionStatus('sensors', true);\n            return mockData;\n        }\n\n        // Show loading states\n        this.setLoadingState('nozzle-temp-value');\n        this.setLoadingState('bed-temp-value');\n        this.setLoadingState('humidity-value');\n\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() => controller.abort(), 5000);\n\n            const response = await fetch(`${this.apiBaseUrl}/sensors/current`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                signal: controller.signal\n            });\n\n            clearTimeout(timeoutId);\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            this.updateSensorData(data);\n            this.setConnectionStatus('sensors', true);\n            return data;\n\n        } catch (error) {\n            console.error('Sensor API Error:', error);\n            this.setConnectionStatus('sensors', false);\n\n            let errorMessage = 'Unable to connect to sensor API';\n            if (error.name === 'AbortError') {\n                errorMessage = 'Sensor API request timed out';\n            } else if (!navigator.onLine) {\n                errorMessage = 'No internet connection';\n            }\n\n            this.showSensorError(errorMessage);\n            return null;\n        }\n    }\n\n    async fetchPrintStatus() {\n        // Use mock data in demo mode\n        if (this.demoMode) {\n            const mockData = this.generateMockPrintData();\n            this.updatePrintData(mockData);\n            this.setConnectionStatus('print', true);\n            return mockData;\n        }\n\n        try {\n            const response = await fetch(`${this.apiBaseUrl}/print/status`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                timeout: 5000\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            this.updatePrintData(data);\n            this.setConnectionStatus('print', true);\n            return data;\n\n        } catch (error) {\n            console.error('Print API Error:', error);\n            this.setConnectionStatus('print', false);\n            this.showPrintError('Unable to connect to print API');\n            return null;\n        }\n    }\n\n    updateSensorData(data) {\n        if (!data || !data.temperature) {\n            this.showSensorError('Invalid sensor data received');\n            this.showAnalysisError();\n            this.showHealthError();\n            this.showQualityError();\n            return;\n        }\n\n        // Update temperature values (no gauges, just text)\n        if (data.temperature.nozzle !== undefined) {\n            const nozzleTemp = parseFloat(data.temperature.nozzle);\n            this.updateElement('nozzle-temp-value', `${nozzleTemp.toFixed(1)}°C`);\n        }\n\n        if (data.temperature.bed !== undefined) {\n            const bedTemp = parseFloat(data.temperature.bed);\n            this.updateElement('bed-temp-value', `${bedTemp.toFixed(1)}°C`);\n        }\n\n        // Update environmental data\n        if (data.humidity !== undefined) {\n            this.updateElement('humidity-value', `${parseFloat(data.humidity).toFixed(1)}%`);\n        }\n        \n        if (data.pressure !== undefined) {\n            this.updateElement('pressure-value', `${parseFloat(data.pressure).toFixed(1)} hPa`);\n        }\n        \n        if (data.temperature.ambient !== undefined) {\n            this.updateElement('ambient-temp-value', `${parseFloat(data.temperature.ambient).toFixed(1)}°C`);\n        }\n\n        // Update vibration data\n        if (data.vibration) {\n            const bedVib = this.calculateVibrationMagnitude(data.vibration.bed) * 1000;\n            const bodyVib = this.calculateVibrationMagnitude(data.vibration.body) * 1000;\n            \n            this.updateElement('bed-vibration-value', `${bedVib.toFixed(2)} mm/s²`);\n            this.updateElement('body-vibration-value', `${bodyVib.toFixed(2)} mm/s²`);\n            \n            this.updateVibrationChart(bedVib, bodyVib);\n        }\n\n        // Store historical data\n        this.addToHistory(data);\n        this.updateHistoryChart();\n    }\n\n    updatePrintData(data) {\n        if (!data) {\n            this.showPrintError('Invalid print data received');\n            return;\n        }\n\n        this.updateElement('job-name', data.job_name || 'No active job');\n        this.updateElement('job-status', data.status || 'Unknown');\n        this.updateElement('job-progress', `${data.progress || 0}%`);\n        this.updateElement('time-remaining', data.time_remaining ? `${data.time_remaining}m` : '--');\n\n        // Update quality score (no gauge, just text)\n        if (data.quality_score !== undefined) {\n            const qualityScore = Math.round(data.quality_score * 100);\n            this.updateElement('quality-value', `${qualityScore}%`);\n        }\n\n        this.updateElement('ml-prediction', data.ml_prediction || 'No prediction');\n    }\n\n    calculateVibrationMagnitude(vibData) {\n        if (!vibData || typeof vibData.x !== 'number') return 0;\n        return Math.sqrt(\n            Math.pow(vibData.x, 2) + \n            Math.pow(vibData.y, 2) + \n            Math.pow(vibData.z, 2)\n        );\n    }\n\n    addToHistory(data) {\n        const timestamp = new Date();\n        const historyPoint = {\n            timestamp: timestamp,\n            nozzleTemp: data.temperature?.nozzle || 0,\n            bedTemp: data.temperature?.bed || 0,\n            humidity: data.humidity || 0\n        };\n\n        this.sensorHistory.push(historyPoint);\n        \n        // Keep only last N points\n        if (this.sensorHistory.length > this.maxHistoryPoints) {\n            this.sensorHistory.shift();\n        }\n    }\n\n    updateVibrationChart(bedVib, bodyVib) {\n        if (!this.charts.vibration) return;\n\n        const timestamp = new Date().toLocaleTimeString();\n        const chart = this.charts.vibration;\n\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(bedVib);\n        chart.data.datasets[1].data.push(bodyVib);\n\n        // Keep only last 20 points\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n    }\n\n    updateHistoryChart() {\n        if (!this.charts.history || this.sensorHistory.length === 0) return;\n\n        const chart = this.charts.history;\n        const labels = this.sensorHistory.map(point => point.timestamp.toLocaleTimeString());\n        \n        chart.data.labels = labels;\n        chart.data.datasets[0].data = this.sensorHistory.map(point => point.nozzleTemp);\n        chart.data.datasets[1].data = this.sensorHistory.map(point => point.bedTemp);\n        chart.data.datasets[2].data = this.sensorHistory.map(point => point.humidity);\n\n        chart.update('none');\n    }\n\n    setConnectionStatus(type, connected) {\n        this.isConnected[type] = connected;\n        this.showConnectionStatus(type, connected);\n    }\n\n    updateConnectionStatus() {\n        this.updateElement('last-update', new Date().toLocaleTimeString());\n    }\n\n    showSensorError(message) {\n        this.updateElement('nozzle-temp-value', 'API Error', 'error');\n        this.updateElement('bed-temp-value', 'API Error', 'error');\n        this.updateElement('humidity-value', 'API Error', 'error');\n        this.updateElement('pressure-value', 'API Error', 'error');\n        this.updateElement('ambient-temp-value', 'API Error', 'error');\n        this.updateElement('bed-vibration-value', 'API Error', 'error');\n        this.updateElement('body-vibration-value', 'API Error', 'error');\n        this.showConnectionStatus('sensors', false, message);\n    }\n\n    showPrintError(message) {\n        this.updateElement('job-name', 'API Connection Failed', 'error');\n        this.updateElement('job-status', 'Disconnected', 'error');\n        this.updateElement('job-progress', 'API Error', 'error');\n        this.updateElement('time-remaining', 'No Connection', 'error');\n        this.updateElement('quality-value', 'API Error', 'error');\n        this.updateElement('ml-prediction', 'No connection', 'error');\n        this.showConnectionStatus('print', false, message);\n        this.showQualityError();\n    }\n\n    showAnalysisError() {\n        this.updateElement('correlation-status', 'API Not Connected');\n        this.updateElement('anomaly-count', 'No Data Available');\n        this.updateElement('prediction-accuracy', 'API Error');\n        this.updateElement('process-capability', 'No Connection');\n        this.updateElement('ml-confidence', 'API Error');\n        this.updateElement('training-accuracy', 'No Data');\n        this.updateElement('failure-risk', 'API Not Available');\n        this.updateElement('quality-risk', 'No Connection');\n    }\n\n    showHealthError() {\n        this.updateElement('cpu-temp', 'API Error');\n        this.updateElement('memory-usage', 'API Error');\n        this.updateElement('disk-usage', 'API Error');\n        this.updateElement('network-status', 'Disconnected');\n        this.updateElement('bme280-status', 'API Error');\n        this.updateElement('mpu-bed-status', 'API Error');\n        this.updateElement('mpu-body-status', 'API Error');\n        this.updateElement('laser-status', 'API Error');\n    }\n\n    showQualityError() {\n        this.updateElement('overall-quality', 'API Not Available');\n        this.updateElement('successful-prints', 'No Data');\n        this.updateElement('avg-print-time', 'API Error');\n        this.updateElement('material-efficiency', 'No Connection');\n        this.updateElement('critical-failures', 'API Error');\n        this.updateElement('medium-risk', 'API Error');\n        this.updateElement('low-risk', 'API Error');\n        this.updateElement('rpn-average', 'No Data');\n    }\n\n    showMaintenanceError() {\n        this.updateElement('next-calibration', 'API Error');\n        this.updateElement('sensor-cleaning', 'No Data Available');\n        this.updateElement('filter-replacement', 'API Error');\n        this.updateElement('system-backup', 'API Not Connected');\n        this.updateElement('last-bme280-cal', 'API Error');\n        this.updateElement('last-mpu-cal', 'API Error');\n        this.updateElement('laser-check', 'No Data');\n        this.updateElement('drift-compensation', 'API Error');\n    }\n\n    // =============================================================================\n    // UI UPDATE AND STATE MANAGEMENT METHODS\n    // =============================================================================\n    \n    /**\n     * Update DOM element with value and optional CSS class\n     * @param {string} id - Element ID\n     * @param {string} value - Text content to set\n     * @param {string} className - Optional CSS class to add\n     */\n    updateElement(id, value, className = '') {\n        const element = document.getElementById(id);\n        if (element) {\n            element.textContent = value;\n            \n            // Remove existing state classes\n            element.classList.remove('loading', 'error', 'success');\n            \n            // Add new class if specified\n            if (className) {\n                element.classList.add(className);\n            }\n        }\n    }\n\n    setLoadingState(id, loading = true) {\n        const element = document.getElementById(id);\n        if (element) {\n            if (loading) {\n                element.classList.add('loading');\n                element.textContent = 'Loading...';\n            } else {\n                element.classList.remove('loading');\n            }\n        }\n    }\n\n    showConnectionStatus(type, connected, details = '') {\n        const statusDot = document.getElementById(`${type}-status`);\n        const statusText = document.getElementById(`${type}-connection`);\n        \n        if (statusDot) {\n            statusDot.className = `status-dot ${connected ? 'connected' : 'disconnected'}`;\n            statusDot.setAttribute('aria-label', connected ? 'Connected' : 'Disconnected');\n        }\n        \n        if (statusText) {\n            const status = connected ? 'Connected' : 'Disconnected';\n            statusText.textContent = details ? `${status} - ${details}` : status;\n            statusText.className = `connection-status ${connected ? 'connected' : 'disconnected'}`;\n        }\n    }\n\n    showAlert(message, type = 'error') {\n        const alert = document.getElementById(`${type}-alert`);\n        if (alert) {\n            alert.textContent = message;\n            alert.style.display = 'block';\n            setTimeout(() => {\n                alert.style.display = 'none';\n            }, 5000);\n        }\n    }\n\n    startDataFetching() {\n        // Initial fetch\n        this.fetchSensorData();\n        this.fetchPrintStatus();\n        \n        // Show initial errors for all pages\n        this.showAnalysisError();\n        this.showHealthError();\n        this.showQualityError();\n        this.showMaintenanceError();\n\n        // Set up intervals\n        setInterval(() => {\n            this.fetchSensorData();\n            this.updateConnectionStatus();\n        }, this.updateInterval);\n\n        setInterval(() => {\n            this.fetchPrintStatus();\n        }, 5000); // Print status every 5 seconds\n    }\n}\n\n// =============================================================================\n// CONTROL FUNCTIONS - System Control Actions\n// =============================================================================\n\n/**\n * Emergency stop function - immediately halts printer operation\n */\nasync function emergencyStop() {\n    dashboard.showAlert('Emergency stop activated!', 'error');\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/emergency_stop`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Emergency stop successful', 'success');\n        }\n    } catch (error) {\n        console.error('Emergency stop failed:', error);\n    }\n}\n\nasync function pauseResume() {\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/pause_resume`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Pause/Resume command sent', 'success');\n        }\n    } catch (error) {\n        console.error('Pause/Resume failed:', error);\n        dashboard.showAlert('Unable to send pause/resume command', 'error');\n    }\n}\n\nasync function calibrateSensors() {\n    dashboard.showAlert('Starting sensor calibration...', 'success');\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/calibrate`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Sensor calibration initiated', 'success');\n        }\n    } catch (error) {\n        console.error('Calibration failed:', error);\n        dashboard.showAlert('Unable to start calibration', 'error');\n    }\n}\n\nasync function exportData() {\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/data/export`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' }\n        });\n        if (response.ok) {\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `navair_data_${new Date().toISOString().split('T')[0]}.json`;\n            a.click();\n            dashboard.showAlert('Data export completed', 'success');\n        }\n    } catch (error) {\n        console.error('Export failed:', error);\n        dashboard.showAlert('Unable to export data', 'error');\n    }\n}\n\n// =============================================================================\n// PAGE NAVIGATION SYSTEM\n// =============================================================================\n\n/**\n * Show specified page and update navigation state\n * @param {string} pageId - ID of page to show\n * @param {HTMLElement} element - Navigation element that was clicked\n */\nfunction showPage(pageId, element) {\n    // Hide all pages and update ARIA attributes\n    const pages = document.querySelectorAll('.page');\n    pages.forEach(page => {\n        page.classList.remove('active');\n        page.setAttribute('aria-hidden', 'true');\n    });\n    \n    // Show selected page\n    const selectedPage = document.getElementById(pageId + '-page');\n    if (selectedPage) {\n        selectedPage.classList.add('active');\n        selectedPage.setAttribute('aria-hidden', 'false');\n    }\n    \n    // Update navigation ARIA attributes\n    const navItems = document.querySelectorAll('.nav-item');\n    navItems.forEach(item => {\n        item.classList.remove('active');\n        item.setAttribute('aria-selected', 'false');\n        item.setAttribute('tabindex', '-1');\n    });\n    \n    if (element) {\n        element.classList.add('active');\n        element.setAttribute('aria-selected', 'true');\n        element.setAttribute('tabindex', '0');\n    }\n    \n    // Initialize page-specific content\n    initializePage(pageId);\n    \n    // Update page title\n    updatePageTitle(pageId);\n}\n\nfunction updatePageTitle(pageId) {\n    const titles = {\n        'dashboard': 'Dashboard',\n        'analysis': 'Analysis',\n        'health': 'System Health',\n        'quality': 'Quality Reports',\n        'maintenance': 'Maintenance',\n        'settings': 'Settings'\n    };\n    document.title = `NAVAIR Monitor - ${titles[pageId] || 'Dashboard'}`;\n}\n\nfunction initializePage(pageId) {\n    switch(pageId) {\n        case 'analysis':\n            setupAnalysisCharts();\n            break;\n        case 'health':\n            setupHealthMonitoring();\n            break;\n        case 'quality':\n            setupQualityCharts();\n            break;\n        case 'maintenance':\n            updateMaintenanceStatus();\n            break;\n        case 'settings':\n            loadSettings();\n            break;\n    }\n}\n\n// Analysis Page Functions\nfunction setupAnalysisCharts() {\n    // Populate analysis metrics in demo mode\n    if (dashboard && dashboard.demoMode) {\n        document.getElementById('correlation-status').textContent = 'Positive (0.78)';\n        document.getElementById('anomaly-count').textContent = '3 detected';\n        document.getElementById('prediction-accuracy').textContent = '96.4%';\n        document.getElementById('process-capability').textContent = '1.45 (Capable)';\n        document.getElementById('ml-confidence').textContent = '94.2%';\n        document.getElementById('training-accuracy').textContent = '96.4%';\n        document.getElementById('failure-risk').textContent = 'Low (12%)';\n        document.getElementById('quality-risk').textContent = 'Very Low (5%)';\n    }\n\n    // Correlation Chart\n    const correlationCtx = document.getElementById('correlation-chart');\n    if (correlationCtx && !correlationCtx.chart) {\n        correlationCtx.chart = new Chart(correlationCtx, {\n            type: 'scatter',\n            data: {\n                datasets: [{\n                    label: 'Temperature vs Quality',\n                    data: generateCorrelationData(),\n                    backgroundColor: 'rgba(52, 152, 219, 0.5)',\n                    borderColor: '#3498db'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    x: {\n                        title: {\n                            display: true,\n                            text: 'Temperature (°C)'\n                        }\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: 'Quality Score'\n                        },\n                        min: 0,\n                        max: 1\n                    }\n                }\n            }\n        });\n    }\n\n    // ML Performance Chart\n    const mlCtx = document.getElementById('ml-performance-chart');\n    if (mlCtx && !mlCtx.chart) {\n        mlCtx.chart = new Chart(mlCtx, {\n            type: 'line',\n            data: {\n                labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7'],\n                datasets: [{\n                    label: 'Accuracy',\n                    data: [85, 87, 89, 92, 94, 96, 96.4],\n                    borderColor: '#27ae60',\n                    backgroundColor: 'rgba(39, 174, 96, 0.1)'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: false,\n                        min: 80,\n                        max: 100,\n                        title: {\n                            display: true,\n                            text: 'Accuracy (%)'\n                        }\n                    }\n                }\n            }\n        });\n    }\n}\n\nfunction generateCorrelationData() {\n    // Generate mock correlation data in demo mode\n    if (dashboard && dashboard.demoMode) {\n        const mockPoints = [];\n        for (let i = 0; i < 30; i++) {\n            mockPoints.push({\n                x: 200 + Math.random() * 25,\n                y: 0.85 + Math.random() * 0.13\n            });\n        }\n        return mockPoints;\n    }\n\n    // Only generate data if APIs are connected\n    if (!dashboard || (!dashboard.isConnected.sensors && !dashboard.isConnected.print)) {\n        return [{ x: 0, y: 0, label: 'No API Connection' }];\n    }\n\n    // Use actual historical data if available\n    if (dashboard.sensorHistory.length > 0) {\n        return dashboard.sensorHistory.map(point => ({\n            x: point.nozzleTemp || 0,\n            y: (point.qualityScore || 0) / 100\n        }));\n    }\n\n    return [{ x: 0, y: 0, label: 'No Historical Data' }];\n}\n\n// Health Monitoring Functions\nfunction setupHealthMonitoring() {\n    updateSystemHealth();\n    \n    const perfCtx = document.getElementById('performance-chart');\n    if (perfCtx && !perfCtx.chart) {\n        perfCtx.chart = new Chart(perfCtx, {\n            type: 'line',\n            data: {\n                labels: [],\n                datasets: [{\n                    label: 'CPU Usage (%)',\n                    data: [],\n                    borderColor: '#e74c3c',\n                    backgroundColor: 'rgba(231, 76, 60, 0.1)'\n                }, {\n                    label: 'Memory Usage (%)',\n                    data: [],\n                    borderColor: '#3498db',\n                    backgroundColor: 'rgba(52, 152, 219, 0.1)'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        max: 100,\n                        title: {\n                            display: true,\n                            text: 'Usage (%)'\n                        }\n                    }\n                }\n            }\n        });\n        \n        // Simulate real-time performance data\n        setInterval(() => {\n            updatePerformanceChart(perfCtx.chart);\n        }, 5000);\n    }\n}\n\nasync function updateSystemHealth() {\n    // Use mock data in demo mode\n    if (dashboard.demoMode) {\n        const mockData = dashboard.generateMockHealthData();\n        document.getElementById('cpu-temp').textContent = `${mockData.cpu_temp.toFixed(1)}°C`;\n        document.getElementById('memory-usage').textContent = `${mockData.memory_usage.toFixed(1)}%`;\n        document.getElementById('disk-usage').textContent = `${mockData.disk_free.toFixed(1)}GB free`;\n        document.getElementById('network-status').textContent = mockData.network_status;\n        document.getElementById('bme280-status').textContent = 'Operational';\n        document.getElementById('mpu-bed-status').textContent = 'Operational';\n        document.getElementById('mpu-body-status').textContent = 'Operational';\n        document.getElementById('laser-status').textContent = 'Operational';\n        return;\n    }\n\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/system/health`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' },\n            timeout: 5000\n        });\n\n        if (!response.ok) {\n            throw new Error('API connection failed');\n        }\n\n        const data = await response.json();\n\n        document.getElementById('cpu-temp').textContent = data.cpu_temp ? `${data.cpu_temp}°C` : 'No Data';\n        document.getElementById('memory-usage').textContent = data.memory_usage ? `${data.memory_usage}%` : 'No Data';\n        document.getElementById('disk-usage').textContent = data.disk_free ? `${data.disk_free}GB free` : 'No Data';\n\n    } catch (error) {\n        console.error('System Health API Error:', error);\n        document.getElementById('cpu-temp').textContent = 'API Error';\n        document.getElementById('memory-usage').textContent = 'API Error';\n        document.getElementById('disk-usage').textContent = 'API Error';\n    }\n}\n\nasync function updatePerformanceChart(chart) {\n    const timestamp = new Date().toLocaleTimeString();\n\n    // Use mock data in demo mode\n    if (dashboard.demoMode) {\n        const mockData = dashboard.generateMockHealthData();\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(mockData.cpu_usage);\n        chart.data.datasets[1].data.push(mockData.memory_usage);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n        return;\n    }\n\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/system/performance`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' },\n            timeout: 5000\n        });\n\n        if (!response.ok) {\n            throw new Error('Performance API connection failed');\n        }\n\n        const data = await response.json();\n\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(data.cpu_usage || 0);\n        chart.data.datasets[1].data.push(data.memory_usage || 0);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n\n    } catch (error) {\n        console.error('Performance Chart Error:', error);\n        // Don't update chart if API is not available\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(null);\n        chart.data.datasets[1].data.push(null);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n    }\n}\n\n// Quality Page Functions\nfunction setupQualityCharts() {\n    // Populate quality metrics in demo mode\n    if (dashboard && dashboard.demoMode) {\n        document.getElementById('overall-quality').textContent = '92.3%';\n        document.getElementById('successful-prints').textContent = '';\n        document.getElementById('avg-print-time').textContent = '3h 24m';\n        document.getElementById('material-efficiency').textContent = '94.7%';\n        document.getElementById('critical-failures').textContent = '2';\n        document.getElementById('medium-risk').textContent = '8';\n        document.getElementById('low-risk').textContent = '15';\n        document.getElementById('rpn-average').textContent = '34.2';\n    }\n\n    const qualityCtx = document.getElementById('quality-distribution-chart');\n    if (qualityCtx && !qualityCtx.chart) {\n        qualityCtx.chart = new Chart(qualityCtx, {\n            type: 'doughnut',\n            data: {\n                labels: ['Excellent', 'Good', 'Fair', 'Poor'],\n                datasets: [{\n                    data: [65, 25, 8, 2],\n                    backgroundColor: [\n                        '#27ae60',\n                        '#f39c12',\n                        '#e67e22',\n                        '#e74c3c'\n                    ]\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n}\n\n// Maintenance Functions\nfunction updateMaintenanceStatus() {\n    // Populate maintenance data in demo mode\n    if (dashboard && dashboard.demoMode) {\n        const today = new Date();\n        const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n        const nextMonth = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000);\n        const lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n        const lastMonth = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n        document.getElementById('next-calibration').textContent = nextWeek.toLocaleDateString();\n        document.getElementById('sensor-cleaning').textContent = nextMonth.toLocaleDateString();\n        document.getElementById('filter-replacement').textContent = '---';\n        document.getElementById('system-backup').textContent = 'Last: ' + today.toLocaleDateString();\n        document.getElementById('last-bme280-cal').textContent = lastWeek.toLocaleDateString();\n        document.getElementById('last-mpu-cal').textContent = lastMonth.toLocaleDateString();\n        document.getElementById('laser-check').textContent = lastWeek.toLocaleDateString();\n        document.getElementById('drift-compensation').textContent = 'Active';\n    }\n\n    console.log('Maintenance status updated');\n}\n\nfunction startCalibration() {\n    alert('Starting sensor calibration process...');\n}\n\nfunction runDiagnostics() {\n    alert('Running system diagnostics...');\n}\n\nfunction backupSystem() {\n    alert('Starting system backup...');\n}\n\nfunction generateReport() {\n    alert('Generating maintenance report...');\n}\n\n// Settings Functions\nfunction loadSettings() {\n    // Load saved settings from localStorage\n    const updateInterval = localStorage.getItem('updateInterval') || '2000';\n    const tempUnits = localStorage.getItem('tempUnits') || 'celsius';\n    const alertSounds = localStorage.getItem('alertSounds') !== 'false';\n    const autoExport = localStorage.getItem('autoExport') === 'true';\n    const theme = localStorage.getItem('theme') || 'blue';\n    const defaultPage = localStorage.getItem('defaultPage') || 'dashboard';\n    \n    document.getElementById('update-interval').value = updateInterval;\n    document.getElementById('temp-units').value = tempUnits;\n    document.getElementById('alert-sounds').checked = alertSounds;\n    document.getElementById('auto-export').checked = autoExport;\n    document.getElementById('theme').value = theme;\n    document.getElementById('default-page').value = defaultPage;\n}\n\nfunction saveSettings() {\n    const updateInterval = document.getElementById('update-interval').value;\n    const tempUnits = document.getElementById('temp-units').value;\n    const alertSounds = document.getElementById('alert-sounds').checked;\n    const autoExport = document.getElementById('auto-export').checked;\n    const theme = document.getElementById('theme').value;\n    const defaultPage = document.getElementById('default-page').value;\n    \n    localStorage.setItem('updateInterval', updateInterval);\n    localStorage.setItem('tempUnits', tempUnits);\n    localStorage.setItem('alertSounds', alertSounds);\n    localStorage.setItem('autoExport', autoExport);\n    localStorage.setItem('theme', theme);\n    localStorage.setItem('defaultPage', defaultPage);\n    \n    alert('Settings saved successfully!');\n    \n    // Apply settings\n    if (dashboard) {\n        dashboard.updateInterval = parseInt(updateInterval);\n    }\n}\n\nfunction resetSettings() {\n    if (confirm('Are you sure you want to reset all settings to default?')) {\n        localStorage.clear();\n        loadSettings();\n        alert('Settings reset to default values');\n    }\n}\n\nfunction exportSettings() {\n    const settings = {\n        updateInterval: document.getElementById('update-interval').value,\n        tempUnits: document.getElementById('temp-units').value,\n        alertSounds: document.getElementById('alert-sounds').checked,\n        autoExport: document.getElementById('auto-export').checked,\n        theme: document.getElementById('theme').value,\n        defaultPage: document.getElementById('default-page').value\n    };\n    \n    const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'navair_settings.json';\n    a.click();\n    URL.revokeObjectURL(url);\n}\n\nfunction importSettings() {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    input.onchange = function(e) {\n        const file = e.target.files[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = function(e) {\n                try {\n                    const settings = JSON.parse(e.target.result);\n                    Object.keys(settings).forEach(key => {\n                        localStorage.setItem(key, settings[key]);\n                    });\n                    loadSettings();\n                    alert('Settings imported successfully!');\n                } catch (error) {\n                    alert('Error importing settings: Invalid file format');\n                }\n            };\n            reader.readAsText(file);\n        }\n    };\n    input.click();\n}\n\n// =============================================================================\n// APPLICATION INITIALIZATION\n// =============================================================================\n\n/**\n * Initialize dashboard when DOM is loaded\n */\nlet dashboard;\ndocument.addEventListener('DOMContentLoaded', () => {\n    dashboard = new NAVAIRDashboard();\n    \n    // Setup navigation event listeners\n    setupNavigation();\n    \n    // Load default page from settings\n    const defaultPage = localStorage.getItem('defaultPage') || 'dashboard';\n    if (defaultPage !== 'dashboard') {\n        setTimeout(() => {\n            const navItem = document.querySelector(`[data-page=\"${defaultPage}\"]`);\n            if (navItem) {\n                showPage(defaultPage, navItem);\n            }\n        }, 100);\n    }\n    \n    // Setup periodic health updates\n    setInterval(() => {\n        if (document.getElementById('health-page').classList.contains('active')) {\n            updateSystemHealth();\n        }\n    }, 10000);\n    \n    // Add keyboard navigation support\n    setupKeyboardNavigation();\n});\n\nfunction setupNavigation() {\n    const navItems = document.querySelectorAll('.nav-item[data-page]');\n    navItems.forEach(item => {\n        item.addEventListener('click', (e) => {\n            e.preventDefault();\n            const pageId = item.getAttribute('data-page');\n            showPage(pageId, item);\n        });\n        \n        // Add keyboard support\n        item.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                const pageId = item.getAttribute('data-page');\n                showPage(pageId, item);\n            }\n        });\n    });\n}\n\nfunction setupKeyboardNavigation() {\n    document.addEventListener('keydown', (e) => {\n        // Alt + number keys for quick navigation\n        if (e.altKey && e.key >= '1' && e.key <= '6') {\n            e.preventDefault();\n            const pageIndex = parseInt(e.key) - 1;\n            const navItems = document.querySelectorAll('.nav-item[data-page]');\n            if (navItems[pageIndex]) {\n                const pageId = navItems[pageIndex].getAttribute('data-page');\n                showPage(pageId, navItems[pageIndex]);\n                navItems[pageIndex].focus();\n            }\n        }\n    });\n}\n\n// =============================================================================\n// STANDALONE DEMO MODE FUNCTION\n// =============================================================================\n\n/**\n * Toggle demo mode - works even if dashboard object fails to initialize\n * Can also be called directly: dashboard.toggleDemoMode()\n */\nfunction toggleDemo() {\n    if (dashboard && typeof dashboard.toggleDemoMode === 'function') {\n        dashboard.toggleDemoMode();\n    } else {\n        console.error('%c✗ DEMO MODE ERROR', 'color: #e74c3c; font-size: 16px; font-weight: bold;');\n        console.error('Dashboard object not initialized or toggleDemoMode method not available');\n        console.error('Check for JavaScript errors above');\n    }\n}\n\n// Add helpful message on load\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');\nconsole.log('%c NAVAIR Dashboard Console', 'color: #3498db; font-size: 14px; font-weight: bold;');\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');\nconsole.log('%cTo enable DEMO MODE for presentation:', 'font-weight: bold;');\nconsole.log('%c  dashboard.toggleDemoMode()', 'color: #27ae60; font-family: monospace;');\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');","structuredPatch":[{"oldStart":44,"oldLines":14,"newStart":44,"newLines":14,"lines":["         // Demo mode for presentations","         this.demoMode = false;","         this.mockData = {","-            nozzleTemp: 210,","-            bedTemp: 60,","+            nozzleTemp: 252,","+            bedTemp: 85,","             humidity: 45,","             pressure: 1013,","             ambientTemp: 22,","             bedVibration: { x: 0.02, y: 0.015, z: 0.01 },","             bodyVibration: { x: 0.03, y: 0.025, z: 0.015 },","-            printProgress: 65,","+            printProgress: 0,","             qualityScore: 0.92","         };"," "]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"7c2f84be-c283-4b73-8d83-9e722f9fa678","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01CzwhGvJ7MkUzvRfLoBvzpA","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01DCXiViKduk3qzu49cit6Dn","name":"Edit","input":{"file_path":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js","old_string":"    generateMockSensorData() {\n        // Add realistic variations to mock data\n        this.mockData.nozzleTemp += (Math.random() - 0.5) * 2; // ±1°C variation\n        this.mockData.nozzleTemp = Math.max(200, Math.min(220, this.mockData.nozzleTemp));\n\n        this.mockData.bedTemp += (Math.random() - 0.5) * 1; // ±0.5°C variation\n        this.mockData.bedTemp = Math.max(55, Math.min(65, this.mockData.bedTemp));","new_string":"    generateMockSensorData() {\n        // Add realistic variations to mock data\n        this.mockData.nozzleTemp += (Math.random() - 0.5) * 2; // ±1°C variation\n        this.mockData.nozzleTemp = Math.max(250, Math.min(254, this.mockData.nozzleTemp));\n\n        this.mockData.bedTemp += (Math.random() - 0.5) * 1; // ±0.5°C variation\n        this.mockData.bedTemp = Math.max(83, Math.min(87, this.mockData.bedTemp));"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":760,"cache_read_input_tokens":34225,"cache_creation":{"ephemeral_5m_input_tokens":760,"ephemeral_1h_input_tokens":0},"output_tokens":25,"service_tier":"standard"}},"requestId":"req_011CUC37KimtG9yYBYQsdfuJ","type":"assistant","uuid":"178ee229-8229-4295-9870-ae062cface4c","timestamp":"2025-10-17T03:10:39.084Z"}
{"parentUuid":"178ee229-8229-4295-9870-ae062cface4c","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01DCXiViKduk3qzu49cit6Dn","type":"tool_result","content":"The file /home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   257→    /**\n   258→     * Generate realistic mock sensor data with natural variations\n   259→     * @returns {Object} Mock sensor data\n   260→     */\n   261→    generateMockSensorData() {\n   262→        // Add realistic variations to mock data\n   263→        this.mockData.nozzleTemp += (Math.random() - 0.5) * 2; // ±1°C variation\n   264→        this.mockData.nozzleTemp = Math.max(250, Math.min(254, this.mockData.nozzleTemp));\n   265→\n   266→        this.mockData.bedTemp += (Math.random() - 0.5) * 1; // ±0.5°C variation\n   267→        this.mockData.bedTemp = Math.max(83, Math.min(87, this.mockData.bedTemp));\n   268→\n   269→        this.mockData.humidity += (Math.random() - 0.5) * 3; // ±1.5% variation\n   270→        this.mockData.humidity = Math.max(40, Math.min(50, this.mockData.humidity));\n   271→"}]},"uuid":"d359c7d1-1eec-4772-8628-3aa9c4facb53","timestamp":"2025-10-17T03:10:52.199Z","toolUseResult":{"filePath":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js","oldString":"    generateMockSensorData() {\n        // Add realistic variations to mock data\n        this.mockData.nozzleTemp += (Math.random() - 0.5) * 2; // ±1°C variation\n        this.mockData.nozzleTemp = Math.max(200, Math.min(220, this.mockData.nozzleTemp));\n\n        this.mockData.bedTemp += (Math.random() - 0.5) * 1; // ±0.5°C variation\n        this.mockData.bedTemp = Math.max(55, Math.min(65, this.mockData.bedTemp));","newString":"    generateMockSensorData() {\n        // Add realistic variations to mock data\n        this.mockData.nozzleTemp += (Math.random() - 0.5) * 2; // ±1°C variation\n        this.mockData.nozzleTemp = Math.max(250, Math.min(254, this.mockData.nozzleTemp));\n\n        this.mockData.bedTemp += (Math.random() - 0.5) * 1; // ±0.5°C variation\n        this.mockData.bedTemp = Math.max(83, Math.min(87, this.mockData.bedTemp));","originalFile":"/**\n * NAVAIR Additive Manufacturing Dashboard\n * \n * A modern, professional web dashboard for monitoring NAVAIR 3D printer operations\n * with real-time data visualization, system health monitoring, and quality analytics.\n * \n * @version 2.0\n * @author NAVAIR Team\n * @created January 2025\n * \n * Features:\n * - Real-time sensor monitoring with gauges and charts\n * - Multi-page navigation with accessibility support\n * - API integration with comprehensive error handling\n * - Responsive design for mobile and desktop\n * - Professional UI with loading states and animations\n */\n\n/**\n * Main Dashboard Controller Class\n * \n * Manages all dashboard functionality including:\n * - API communication and data fetching\n * - Chart rendering and updates\n * - UI state management\n * - Error handling and user feedback\n */\nclass NAVAIRDashboard {\n    /**\n     * Initialize dashboard with configuration and state\n     */\n    constructor() {\n        this.apiBaseUrl = 'http://localhost:8000/api';\n        this.updateInterval = 2000; // 2 seconds\n        this.charts = {};\n        this.gauges = {};\n        this.isConnected = {\n            sensors: false,\n            print: false\n        };\n        this.sensorHistory = [];\n        this.maxHistoryPoints = 50;\n\n        // Demo mode for presentations\n        this.demoMode = false;\n        this.mockData = {\n            nozzleTemp: 252,\n            bedTemp: 85,\n            humidity: 45,\n            pressure: 1013,\n            ambientTemp: 22,\n            bedVibration: { x: 0.02, y: 0.015, z: 0.01 },\n            bodyVibration: { x: 0.03, y: 0.025, z: 0.015 },\n            printProgress: 0,\n            qualityScore: 0.92\n        };\n\n        this.init();\n    }\n\n    /**\n     * Initialize dashboard components and start data fetching\n     */\n    async init() {\n        try {\n            this.setupGauges();\n        } catch (error) {\n            console.error('Error setting up gauges:', error);\n        }\n\n        try {\n            this.setupCharts();\n        } catch (error) {\n            console.error('Error setting up charts:', error);\n        }\n\n        try {\n            this.startDataFetching();\n            this.updateConnectionStatus();\n        } catch (error) {\n            console.error('Error starting data fetching:', error);\n        }\n\n        console.log('Dashboard initialized successfully');\n    }\n\n    // =============================================================================\n    // CHART AND GAUGE SETUP METHODS\n    // =============================================================================\n\n    /**\n     * Setup gauges - simplified to just use text displays\n     */\n    setupGauges() {\n        // Gauges removed - using simple text display instead\n        console.log('Using simplified text-based display (gauges disabled)');\n    }\n\n    /**\n     * Setup line charts for vibration and historical data\n     */\n    setupCharts() {\n        // Vibration Chart\n        const vibCtx = document.getElementById('vibration-chart');\n        if (vibCtx) {\n            this.charts.vibration = new Chart(vibCtx, {\n                type: 'line',\n                data: {\n                    labels: [],\n                    datasets: [{\n                        label: 'Bed Vibration',\n                        data: [],\n                        borderColor: '#e74c3c',\n                        backgroundColor: 'rgba(231, 76, 60, 0.1)',\n                        tension: 0.4\n                    }, {\n                        label: 'Body Vibration',\n                        data: [],\n                        borderColor: '#3498db',\n                        backgroundColor: 'rgba(52, 152, 219, 0.1)',\n                        tension: 0.4\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        intersect: false,\n                        mode: 'index'\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            title: {\n                                display: true,\n                                text: 'Vibration (mm/s²)'\n                            }\n                        },\n                        x: {\n                            title: {\n                                display: true,\n                                text: 'Time'\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            display: true,\n                            position: 'top'\n                        }\n                    }\n                }\n            });\n        }\n\n        // Historical Data Chart\n        const historyCtx = document.getElementById('history-chart');\n        if (historyCtx) {\n            this.charts.history = new Chart(historyCtx, {\n                type: 'line',\n                data: {\n                    labels: [],\n                    datasets: [{\n                        label: 'Nozzle Temp (°C)',\n                        data: [],\n                        borderColor: '#e74c3c',\n                        backgroundColor: 'rgba(231, 76, 60, 0.1)',\n                        yAxisID: 'y'\n                    }, {\n                        label: 'Bed Temp (°C)',\n                        data: [],\n                        borderColor: '#e67e22',\n                        backgroundColor: 'rgba(230, 126, 34, 0.1)',\n                        yAxisID: 'y'\n                    }, {\n                        label: 'Humidity (%)',\n                        data: [],\n                        borderColor: '#3498db',\n                        backgroundColor: 'rgba(52, 152, 219, 0.1)',\n                        yAxisID: 'y1'\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        intersect: false,\n                        mode: 'index'\n                    },\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            display: true,\n                            position: 'left',\n                            title: {\n                                display: true,\n                                text: 'Temperature (°C)'\n                            }\n                        },\n                        y1: {\n                            type: 'linear',\n                            display: true,\n                            position: 'right',\n                            title: {\n                                display: true,\n                                text: 'Humidity (%)'\n                            },\n                            grid: {\n                                drawOnChartArea: false,\n                            },\n                        },\n                        x: {\n                            title: {\n                                display: true,\n                                text: 'Time'\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            display: true,\n                            position: 'top'\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    // =============================================================================\n    // DEMO MODE METHODS\n    // =============================================================================\n\n    /**\n     * Toggle demo mode on/off\n     */\n    toggleDemoMode() {\n        this.demoMode = !this.demoMode;\n\n        if (this.demoMode) {\n            // Immediately update connection status and fetch mock data\n            this.setConnectionStatus('sensors', true);\n            this.setConnectionStatus('print', true);\n\n            // Fetch mock data immediately\n            this.fetchSensorData();\n            this.fetchPrintStatus();\n\n            console.log('%c✓ DEMO MODE ENABLED', 'color: #27ae60; font-size: 16px; font-weight: bold;');\n            console.log('The dashboard will now display realistic mock data.');\n            console.log('To disable: dashboard.toggleDemoMode()');\n        } else {\n            console.log('%c✗ DEMO MODE DISABLED', 'color: #e74c3c; font-size: 16px; font-weight: bold;');\n        }\n    }\n\n    /**\n     * Generate realistic mock sensor data with natural variations\n     * @returns {Object} Mock sensor data\n     */\n    generateMockSensorData() {\n        // Add realistic variations to mock data\n        this.mockData.nozzleTemp += (Math.random() - 0.5) * 2; // ±1°C variation\n        this.mockData.nozzleTemp = Math.max(200, Math.min(220, this.mockData.nozzleTemp));\n\n        this.mockData.bedTemp += (Math.random() - 0.5) * 1; // ±0.5°C variation\n        this.mockData.bedTemp = Math.max(55, Math.min(65, this.mockData.bedTemp));\n\n        this.mockData.humidity += (Math.random() - 0.5) * 3; // ±1.5% variation\n        this.mockData.humidity = Math.max(40, Math.min(50, this.mockData.humidity));\n\n        this.mockData.pressure += (Math.random() - 0.5) * 2;\n        this.mockData.pressure = Math.max(1010, Math.min(1016, this.mockData.pressure));\n\n        this.mockData.ambientTemp += (Math.random() - 0.5) * 0.5;\n        this.mockData.ambientTemp = Math.max(20, Math.min(24, this.mockData.ambientTemp));\n\n        // Vibration with small random variations\n        this.mockData.bedVibration = {\n            x: 0.02 + (Math.random() - 0.5) * 0.01,\n            y: 0.015 + (Math.random() - 0.5) * 0.01,\n            z: 0.01 + (Math.random() - 0.5) * 0.005\n        };\n\n        this.mockData.bodyVibration = {\n            x: 0.03 + (Math.random() - 0.5) * 0.015,\n            y: 0.025 + (Math.random() - 0.5) * 0.015,\n            z: 0.015 + (Math.random() - 0.5) * 0.01\n        };\n\n        return {\n            temperature: {\n                nozzle: this.mockData.nozzleTemp,\n                bed: this.mockData.bedTemp,\n                ambient: this.mockData.ambientTemp\n            },\n            humidity: this.mockData.humidity,\n            pressure: this.mockData.pressure,\n            vibration: {\n                bed: this.mockData.bedVibration,\n                body: this.mockData.bodyVibration\n            }\n        };\n    }\n\n    /**\n     * Generate mock print status data\n     * @returns {Object} Mock print data\n     */\n    generateMockPrintData() {\n        // Simulate print progress\n        this.mockData.printProgress += 0.5;\n        if (this.mockData.printProgress > 100) {\n            this.mockData.printProgress = 15; // Reset to new job\n        }\n\n        // Quality score varies slightly\n        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n\n        return {\n            job_name: 'Bracket_Assembly_v3',\n            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n            progress: Math.round(this.mockData.printProgress),\n            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 2.5)),\n            quality_score: this.mockData.qualityScore,\n            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n        };\n    }\n\n    /**\n     * Generate mock system health data\n     * @returns {Object} Mock health data\n     */\n    generateMockHealthData() {\n        return {\n            cpu_temp: 45 + Math.random() * 10,\n            memory_usage: 55 + Math.random() * 15,\n            disk_free: 128 + Math.random() * 5,\n            cpu_usage: 30 + Math.random() * 20,\n            network_status: 'Connected'\n        };\n    }\n\n    // =============================================================================\n    // API COMMUNICATION METHODS\n    // =============================================================================\n\n    /**\n     * Fetch current sensor data from API with proper error handling\n     * @returns {Object|null} Sensor data or null on error\n     */\n    async fetchSensorData() {\n        // Use mock data in demo mode\n        if (this.demoMode) {\n            const mockData = this.generateMockSensorData();\n            this.updateSensorData(mockData);\n            this.setConnectionStatus('sensors', true);\n            return mockData;\n        }\n\n        // Show loading states\n        this.setLoadingState('nozzle-temp-value');\n        this.setLoadingState('bed-temp-value');\n        this.setLoadingState('humidity-value');\n\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() => controller.abort(), 5000);\n\n            const response = await fetch(`${this.apiBaseUrl}/sensors/current`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                signal: controller.signal\n            });\n\n            clearTimeout(timeoutId);\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            this.updateSensorData(data);\n            this.setConnectionStatus('sensors', true);\n            return data;\n\n        } catch (error) {\n            console.error('Sensor API Error:', error);\n            this.setConnectionStatus('sensors', false);\n\n            let errorMessage = 'Unable to connect to sensor API';\n            if (error.name === 'AbortError') {\n                errorMessage = 'Sensor API request timed out';\n            } else if (!navigator.onLine) {\n                errorMessage = 'No internet connection';\n            }\n\n            this.showSensorError(errorMessage);\n            return null;\n        }\n    }\n\n    async fetchPrintStatus() {\n        // Use mock data in demo mode\n        if (this.demoMode) {\n            const mockData = this.generateMockPrintData();\n            this.updatePrintData(mockData);\n            this.setConnectionStatus('print', true);\n            return mockData;\n        }\n\n        try {\n            const response = await fetch(`${this.apiBaseUrl}/print/status`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                timeout: 5000\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            this.updatePrintData(data);\n            this.setConnectionStatus('print', true);\n            return data;\n\n        } catch (error) {\n            console.error('Print API Error:', error);\n            this.setConnectionStatus('print', false);\n            this.showPrintError('Unable to connect to print API');\n            return null;\n        }\n    }\n\n    updateSensorData(data) {\n        if (!data || !data.temperature) {\n            this.showSensorError('Invalid sensor data received');\n            this.showAnalysisError();\n            this.showHealthError();\n            this.showQualityError();\n            return;\n        }\n\n        // Update temperature values (no gauges, just text)\n        if (data.temperature.nozzle !== undefined) {\n            const nozzleTemp = parseFloat(data.temperature.nozzle);\n            this.updateElement('nozzle-temp-value', `${nozzleTemp.toFixed(1)}°C`);\n        }\n\n        if (data.temperature.bed !== undefined) {\n            const bedTemp = parseFloat(data.temperature.bed);\n            this.updateElement('bed-temp-value', `${bedTemp.toFixed(1)}°C`);\n        }\n\n        // Update environmental data\n        if (data.humidity !== undefined) {\n            this.updateElement('humidity-value', `${parseFloat(data.humidity).toFixed(1)}%`);\n        }\n        \n        if (data.pressure !== undefined) {\n            this.updateElement('pressure-value', `${parseFloat(data.pressure).toFixed(1)} hPa`);\n        }\n        \n        if (data.temperature.ambient !== undefined) {\n            this.updateElement('ambient-temp-value', `${parseFloat(data.temperature.ambient).toFixed(1)}°C`);\n        }\n\n        // Update vibration data\n        if (data.vibration) {\n            const bedVib = this.calculateVibrationMagnitude(data.vibration.bed) * 1000;\n            const bodyVib = this.calculateVibrationMagnitude(data.vibration.body) * 1000;\n            \n            this.updateElement('bed-vibration-value', `${bedVib.toFixed(2)} mm/s²`);\n            this.updateElement('body-vibration-value', `${bodyVib.toFixed(2)} mm/s²`);\n            \n            this.updateVibrationChart(bedVib, bodyVib);\n        }\n\n        // Store historical data\n        this.addToHistory(data);\n        this.updateHistoryChart();\n    }\n\n    updatePrintData(data) {\n        if (!data) {\n            this.showPrintError('Invalid print data received');\n            return;\n        }\n\n        this.updateElement('job-name', data.job_name || 'No active job');\n        this.updateElement('job-status', data.status || 'Unknown');\n        this.updateElement('job-progress', `${data.progress || 0}%`);\n        this.updateElement('time-remaining', data.time_remaining ? `${data.time_remaining}m` : '--');\n\n        // Update quality score (no gauge, just text)\n        if (data.quality_score !== undefined) {\n            const qualityScore = Math.round(data.quality_score * 100);\n            this.updateElement('quality-value', `${qualityScore}%`);\n        }\n\n        this.updateElement('ml-prediction', data.ml_prediction || 'No prediction');\n    }\n\n    calculateVibrationMagnitude(vibData) {\n        if (!vibData || typeof vibData.x !== 'number') return 0;\n        return Math.sqrt(\n            Math.pow(vibData.x, 2) + \n            Math.pow(vibData.y, 2) + \n            Math.pow(vibData.z, 2)\n        );\n    }\n\n    addToHistory(data) {\n        const timestamp = new Date();\n        const historyPoint = {\n            timestamp: timestamp,\n            nozzleTemp: data.temperature?.nozzle || 0,\n            bedTemp: data.temperature?.bed || 0,\n            humidity: data.humidity || 0\n        };\n\n        this.sensorHistory.push(historyPoint);\n        \n        // Keep only last N points\n        if (this.sensorHistory.length > this.maxHistoryPoints) {\n            this.sensorHistory.shift();\n        }\n    }\n\n    updateVibrationChart(bedVib, bodyVib) {\n        if (!this.charts.vibration) return;\n\n        const timestamp = new Date().toLocaleTimeString();\n        const chart = this.charts.vibration;\n\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(bedVib);\n        chart.data.datasets[1].data.push(bodyVib);\n\n        // Keep only last 20 points\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n    }\n\n    updateHistoryChart() {\n        if (!this.charts.history || this.sensorHistory.length === 0) return;\n\n        const chart = this.charts.history;\n        const labels = this.sensorHistory.map(point => point.timestamp.toLocaleTimeString());\n        \n        chart.data.labels = labels;\n        chart.data.datasets[0].data = this.sensorHistory.map(point => point.nozzleTemp);\n        chart.data.datasets[1].data = this.sensorHistory.map(point => point.bedTemp);\n        chart.data.datasets[2].data = this.sensorHistory.map(point => point.humidity);\n\n        chart.update('none');\n    }\n\n    setConnectionStatus(type, connected) {\n        this.isConnected[type] = connected;\n        this.showConnectionStatus(type, connected);\n    }\n\n    updateConnectionStatus() {\n        this.updateElement('last-update', new Date().toLocaleTimeString());\n    }\n\n    showSensorError(message) {\n        this.updateElement('nozzle-temp-value', 'API Error', 'error');\n        this.updateElement('bed-temp-value', 'API Error', 'error');\n        this.updateElement('humidity-value', 'API Error', 'error');\n        this.updateElement('pressure-value', 'API Error', 'error');\n        this.updateElement('ambient-temp-value', 'API Error', 'error');\n        this.updateElement('bed-vibration-value', 'API Error', 'error');\n        this.updateElement('body-vibration-value', 'API Error', 'error');\n        this.showConnectionStatus('sensors', false, message);\n    }\n\n    showPrintError(message) {\n        this.updateElement('job-name', 'API Connection Failed', 'error');\n        this.updateElement('job-status', 'Disconnected', 'error');\n        this.updateElement('job-progress', 'API Error', 'error');\n        this.updateElement('time-remaining', 'No Connection', 'error');\n        this.updateElement('quality-value', 'API Error', 'error');\n        this.updateElement('ml-prediction', 'No connection', 'error');\n        this.showConnectionStatus('print', false, message);\n        this.showQualityError();\n    }\n\n    showAnalysisError() {\n        this.updateElement('correlation-status', 'API Not Connected');\n        this.updateElement('anomaly-count', 'No Data Available');\n        this.updateElement('prediction-accuracy', 'API Error');\n        this.updateElement('process-capability', 'No Connection');\n        this.updateElement('ml-confidence', 'API Error');\n        this.updateElement('training-accuracy', 'No Data');\n        this.updateElement('failure-risk', 'API Not Available');\n        this.updateElement('quality-risk', 'No Connection');\n    }\n\n    showHealthError() {\n        this.updateElement('cpu-temp', 'API Error');\n        this.updateElement('memory-usage', 'API Error');\n        this.updateElement('disk-usage', 'API Error');\n        this.updateElement('network-status', 'Disconnected');\n        this.updateElement('bme280-status', 'API Error');\n        this.updateElement('mpu-bed-status', 'API Error');\n        this.updateElement('mpu-body-status', 'API Error');\n        this.updateElement('laser-status', 'API Error');\n    }\n\n    showQualityError() {\n        this.updateElement('overall-quality', 'API Not Available');\n        this.updateElement('successful-prints', 'No Data');\n        this.updateElement('avg-print-time', 'API Error');\n        this.updateElement('material-efficiency', 'No Connection');\n        this.updateElement('critical-failures', 'API Error');\n        this.updateElement('medium-risk', 'API Error');\n        this.updateElement('low-risk', 'API Error');\n        this.updateElement('rpn-average', 'No Data');\n    }\n\n    showMaintenanceError() {\n        this.updateElement('next-calibration', 'API Error');\n        this.updateElement('sensor-cleaning', 'No Data Available');\n        this.updateElement('filter-replacement', 'API Error');\n        this.updateElement('system-backup', 'API Not Connected');\n        this.updateElement('last-bme280-cal', 'API Error');\n        this.updateElement('last-mpu-cal', 'API Error');\n        this.updateElement('laser-check', 'No Data');\n        this.updateElement('drift-compensation', 'API Error');\n    }\n\n    // =============================================================================\n    // UI UPDATE AND STATE MANAGEMENT METHODS\n    // =============================================================================\n    \n    /**\n     * Update DOM element with value and optional CSS class\n     * @param {string} id - Element ID\n     * @param {string} value - Text content to set\n     * @param {string} className - Optional CSS class to add\n     */\n    updateElement(id, value, className = '') {\n        const element = document.getElementById(id);\n        if (element) {\n            element.textContent = value;\n            \n            // Remove existing state classes\n            element.classList.remove('loading', 'error', 'success');\n            \n            // Add new class if specified\n            if (className) {\n                element.classList.add(className);\n            }\n        }\n    }\n\n    setLoadingState(id, loading = true) {\n        const element = document.getElementById(id);\n        if (element) {\n            if (loading) {\n                element.classList.add('loading');\n                element.textContent = 'Loading...';\n            } else {\n                element.classList.remove('loading');\n            }\n        }\n    }\n\n    showConnectionStatus(type, connected, details = '') {\n        const statusDot = document.getElementById(`${type}-status`);\n        const statusText = document.getElementById(`${type}-connection`);\n        \n        if (statusDot) {\n            statusDot.className = `status-dot ${connected ? 'connected' : 'disconnected'}`;\n            statusDot.setAttribute('aria-label', connected ? 'Connected' : 'Disconnected');\n        }\n        \n        if (statusText) {\n            const status = connected ? 'Connected' : 'Disconnected';\n            statusText.textContent = details ? `${status} - ${details}` : status;\n            statusText.className = `connection-status ${connected ? 'connected' : 'disconnected'}`;\n        }\n    }\n\n    showAlert(message, type = 'error') {\n        const alert = document.getElementById(`${type}-alert`);\n        if (alert) {\n            alert.textContent = message;\n            alert.style.display = 'block';\n            setTimeout(() => {\n                alert.style.display = 'none';\n            }, 5000);\n        }\n    }\n\n    startDataFetching() {\n        // Initial fetch\n        this.fetchSensorData();\n        this.fetchPrintStatus();\n        \n        // Show initial errors for all pages\n        this.showAnalysisError();\n        this.showHealthError();\n        this.showQualityError();\n        this.showMaintenanceError();\n\n        // Set up intervals\n        setInterval(() => {\n            this.fetchSensorData();\n            this.updateConnectionStatus();\n        }, this.updateInterval);\n\n        setInterval(() => {\n            this.fetchPrintStatus();\n        }, 5000); // Print status every 5 seconds\n    }\n}\n\n// =============================================================================\n// CONTROL FUNCTIONS - System Control Actions\n// =============================================================================\n\n/**\n * Emergency stop function - immediately halts printer operation\n */\nasync function emergencyStop() {\n    dashboard.showAlert('Emergency stop activated!', 'error');\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/emergency_stop`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Emergency stop successful', 'success');\n        }\n    } catch (error) {\n        console.error('Emergency stop failed:', error);\n    }\n}\n\nasync function pauseResume() {\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/pause_resume`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Pause/Resume command sent', 'success');\n        }\n    } catch (error) {\n        console.error('Pause/Resume failed:', error);\n        dashboard.showAlert('Unable to send pause/resume command', 'error');\n    }\n}\n\nasync function calibrateSensors() {\n    dashboard.showAlert('Starting sensor calibration...', 'success');\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/calibrate`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Sensor calibration initiated', 'success');\n        }\n    } catch (error) {\n        console.error('Calibration failed:', error);\n        dashboard.showAlert('Unable to start calibration', 'error');\n    }\n}\n\nasync function exportData() {\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/data/export`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' }\n        });\n        if (response.ok) {\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `navair_data_${new Date().toISOString().split('T')[0]}.json`;\n            a.click();\n            dashboard.showAlert('Data export completed', 'success');\n        }\n    } catch (error) {\n        console.error('Export failed:', error);\n        dashboard.showAlert('Unable to export data', 'error');\n    }\n}\n\n// =============================================================================\n// PAGE NAVIGATION SYSTEM\n// =============================================================================\n\n/**\n * Show specified page and update navigation state\n * @param {string} pageId - ID of page to show\n * @param {HTMLElement} element - Navigation element that was clicked\n */\nfunction showPage(pageId, element) {\n    // Hide all pages and update ARIA attributes\n    const pages = document.querySelectorAll('.page');\n    pages.forEach(page => {\n        page.classList.remove('active');\n        page.setAttribute('aria-hidden', 'true');\n    });\n    \n    // Show selected page\n    const selectedPage = document.getElementById(pageId + '-page');\n    if (selectedPage) {\n        selectedPage.classList.add('active');\n        selectedPage.setAttribute('aria-hidden', 'false');\n    }\n    \n    // Update navigation ARIA attributes\n    const navItems = document.querySelectorAll('.nav-item');\n    navItems.forEach(item => {\n        item.classList.remove('active');\n        item.setAttribute('aria-selected', 'false');\n        item.setAttribute('tabindex', '-1');\n    });\n    \n    if (element) {\n        element.classList.add('active');\n        element.setAttribute('aria-selected', 'true');\n        element.setAttribute('tabindex', '0');\n    }\n    \n    // Initialize page-specific content\n    initializePage(pageId);\n    \n    // Update page title\n    updatePageTitle(pageId);\n}\n\nfunction updatePageTitle(pageId) {\n    const titles = {\n        'dashboard': 'Dashboard',\n        'analysis': 'Analysis',\n        'health': 'System Health',\n        'quality': 'Quality Reports',\n        'maintenance': 'Maintenance',\n        'settings': 'Settings'\n    };\n    document.title = `NAVAIR Monitor - ${titles[pageId] || 'Dashboard'}`;\n}\n\nfunction initializePage(pageId) {\n    switch(pageId) {\n        case 'analysis':\n            setupAnalysisCharts();\n            break;\n        case 'health':\n            setupHealthMonitoring();\n            break;\n        case 'quality':\n            setupQualityCharts();\n            break;\n        case 'maintenance':\n            updateMaintenanceStatus();\n            break;\n        case 'settings':\n            loadSettings();\n            break;\n    }\n}\n\n// Analysis Page Functions\nfunction setupAnalysisCharts() {\n    // Populate analysis metrics in demo mode\n    if (dashboard && dashboard.demoMode) {\n        document.getElementById('correlation-status').textContent = 'Positive (0.78)';\n        document.getElementById('anomaly-count').textContent = '3 detected';\n        document.getElementById('prediction-accuracy').textContent = '96.4%';\n        document.getElementById('process-capability').textContent = '1.45 (Capable)';\n        document.getElementById('ml-confidence').textContent = '94.2%';\n        document.getElementById('training-accuracy').textContent = '96.4%';\n        document.getElementById('failure-risk').textContent = 'Low (12%)';\n        document.getElementById('quality-risk').textContent = 'Very Low (5%)';\n    }\n\n    // Correlation Chart\n    const correlationCtx = document.getElementById('correlation-chart');\n    if (correlationCtx && !correlationCtx.chart) {\n        correlationCtx.chart = new Chart(correlationCtx, {\n            type: 'scatter',\n            data: {\n                datasets: [{\n                    label: 'Temperature vs Quality',\n                    data: generateCorrelationData(),\n                    backgroundColor: 'rgba(52, 152, 219, 0.5)',\n                    borderColor: '#3498db'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    x: {\n                        title: {\n                            display: true,\n                            text: 'Temperature (°C)'\n                        }\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: 'Quality Score'\n                        },\n                        min: 0,\n                        max: 1\n                    }\n                }\n            }\n        });\n    }\n\n    // ML Performance Chart\n    const mlCtx = document.getElementById('ml-performance-chart');\n    if (mlCtx && !mlCtx.chart) {\n        mlCtx.chart = new Chart(mlCtx, {\n            type: 'line',\n            data: {\n                labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7'],\n                datasets: [{\n                    label: 'Accuracy',\n                    data: [85, 87, 89, 92, 94, 96, 96.4],\n                    borderColor: '#27ae60',\n                    backgroundColor: 'rgba(39, 174, 96, 0.1)'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: false,\n                        min: 80,\n                        max: 100,\n                        title: {\n                            display: true,\n                            text: 'Accuracy (%)'\n                        }\n                    }\n                }\n            }\n        });\n    }\n}\n\nfunction generateCorrelationData() {\n    // Generate mock correlation data in demo mode\n    if (dashboard && dashboard.demoMode) {\n        const mockPoints = [];\n        for (let i = 0; i < 30; i++) {\n            mockPoints.push({\n                x: 200 + Math.random() * 25,\n                y: 0.85 + Math.random() * 0.13\n            });\n        }\n        return mockPoints;\n    }\n\n    // Only generate data if APIs are connected\n    if (!dashboard || (!dashboard.isConnected.sensors && !dashboard.isConnected.print)) {\n        return [{ x: 0, y: 0, label: 'No API Connection' }];\n    }\n\n    // Use actual historical data if available\n    if (dashboard.sensorHistory.length > 0) {\n        return dashboard.sensorHistory.map(point => ({\n            x: point.nozzleTemp || 0,\n            y: (point.qualityScore || 0) / 100\n        }));\n    }\n\n    return [{ x: 0, y: 0, label: 'No Historical Data' }];\n}\n\n// Health Monitoring Functions\nfunction setupHealthMonitoring() {\n    updateSystemHealth();\n    \n    const perfCtx = document.getElementById('performance-chart');\n    if (perfCtx && !perfCtx.chart) {\n        perfCtx.chart = new Chart(perfCtx, {\n            type: 'line',\n            data: {\n                labels: [],\n                datasets: [{\n                    label: 'CPU Usage (%)',\n                    data: [],\n                    borderColor: '#e74c3c',\n                    backgroundColor: 'rgba(231, 76, 60, 0.1)'\n                }, {\n                    label: 'Memory Usage (%)',\n                    data: [],\n                    borderColor: '#3498db',\n                    backgroundColor: 'rgba(52, 152, 219, 0.1)'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        max: 100,\n                        title: {\n                            display: true,\n                            text: 'Usage (%)'\n                        }\n                    }\n                }\n            }\n        });\n        \n        // Simulate real-time performance data\n        setInterval(() => {\n            updatePerformanceChart(perfCtx.chart);\n        }, 5000);\n    }\n}\n\nasync function updateSystemHealth() {\n    // Use mock data in demo mode\n    if (dashboard.demoMode) {\n        const mockData = dashboard.generateMockHealthData();\n        document.getElementById('cpu-temp').textContent = `${mockData.cpu_temp.toFixed(1)}°C`;\n        document.getElementById('memory-usage').textContent = `${mockData.memory_usage.toFixed(1)}%`;\n        document.getElementById('disk-usage').textContent = `${mockData.disk_free.toFixed(1)}GB free`;\n        document.getElementById('network-status').textContent = mockData.network_status;\n        document.getElementById('bme280-status').textContent = 'Operational';\n        document.getElementById('mpu-bed-status').textContent = 'Operational';\n        document.getElementById('mpu-body-status').textContent = 'Operational';\n        document.getElementById('laser-status').textContent = 'Operational';\n        return;\n    }\n\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/system/health`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' },\n            timeout: 5000\n        });\n\n        if (!response.ok) {\n            throw new Error('API connection failed');\n        }\n\n        const data = await response.json();\n\n        document.getElementById('cpu-temp').textContent = data.cpu_temp ? `${data.cpu_temp}°C` : 'No Data';\n        document.getElementById('memory-usage').textContent = data.memory_usage ? `${data.memory_usage}%` : 'No Data';\n        document.getElementById('disk-usage').textContent = data.disk_free ? `${data.disk_free}GB free` : 'No Data';\n\n    } catch (error) {\n        console.error('System Health API Error:', error);\n        document.getElementById('cpu-temp').textContent = 'API Error';\n        document.getElementById('memory-usage').textContent = 'API Error';\n        document.getElementById('disk-usage').textContent = 'API Error';\n    }\n}\n\nasync function updatePerformanceChart(chart) {\n    const timestamp = new Date().toLocaleTimeString();\n\n    // Use mock data in demo mode\n    if (dashboard.demoMode) {\n        const mockData = dashboard.generateMockHealthData();\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(mockData.cpu_usage);\n        chart.data.datasets[1].data.push(mockData.memory_usage);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n        return;\n    }\n\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/system/performance`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' },\n            timeout: 5000\n        });\n\n        if (!response.ok) {\n            throw new Error('Performance API connection failed');\n        }\n\n        const data = await response.json();\n\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(data.cpu_usage || 0);\n        chart.data.datasets[1].data.push(data.memory_usage || 0);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n\n    } catch (error) {\n        console.error('Performance Chart Error:', error);\n        // Don't update chart if API is not available\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(null);\n        chart.data.datasets[1].data.push(null);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n    }\n}\n\n// Quality Page Functions\nfunction setupQualityCharts() {\n    // Populate quality metrics in demo mode\n    if (dashboard && dashboard.demoMode) {\n        document.getElementById('overall-quality').textContent = '92.3%';\n        document.getElementById('successful-prints').textContent = '';\n        document.getElementById('avg-print-time').textContent = '3h 24m';\n        document.getElementById('material-efficiency').textContent = '94.7%';\n        document.getElementById('critical-failures').textContent = '2';\n        document.getElementById('medium-risk').textContent = '8';\n        document.getElementById('low-risk').textContent = '15';\n        document.getElementById('rpn-average').textContent = '34.2';\n    }\n\n    const qualityCtx = document.getElementById('quality-distribution-chart');\n    if (qualityCtx && !qualityCtx.chart) {\n        qualityCtx.chart = new Chart(qualityCtx, {\n            type: 'doughnut',\n            data: {\n                labels: ['Excellent', 'Good', 'Fair', 'Poor'],\n                datasets: [{\n                    data: [65, 25, 8, 2],\n                    backgroundColor: [\n                        '#27ae60',\n                        '#f39c12',\n                        '#e67e22',\n                        '#e74c3c'\n                    ]\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n}\n\n// Maintenance Functions\nfunction updateMaintenanceStatus() {\n    // Populate maintenance data in demo mode\n    if (dashboard && dashboard.demoMode) {\n        const today = new Date();\n        const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n        const nextMonth = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000);\n        const lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n        const lastMonth = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n        document.getElementById('next-calibration').textContent = nextWeek.toLocaleDateString();\n        document.getElementById('sensor-cleaning').textContent = nextMonth.toLocaleDateString();\n        document.getElementById('filter-replacement').textContent = '---';\n        document.getElementById('system-backup').textContent = 'Last: ' + today.toLocaleDateString();\n        document.getElementById('last-bme280-cal').textContent = lastWeek.toLocaleDateString();\n        document.getElementById('last-mpu-cal').textContent = lastMonth.toLocaleDateString();\n        document.getElementById('laser-check').textContent = lastWeek.toLocaleDateString();\n        document.getElementById('drift-compensation').textContent = 'Active';\n    }\n\n    console.log('Maintenance status updated');\n}\n\nfunction startCalibration() {\n    alert('Starting sensor calibration process...');\n}\n\nfunction runDiagnostics() {\n    alert('Running system diagnostics...');\n}\n\nfunction backupSystem() {\n    alert('Starting system backup...');\n}\n\nfunction generateReport() {\n    alert('Generating maintenance report...');\n}\n\n// Settings Functions\nfunction loadSettings() {\n    // Load saved settings from localStorage\n    const updateInterval = localStorage.getItem('updateInterval') || '2000';\n    const tempUnits = localStorage.getItem('tempUnits') || 'celsius';\n    const alertSounds = localStorage.getItem('alertSounds') !== 'false';\n    const autoExport = localStorage.getItem('autoExport') === 'true';\n    const theme = localStorage.getItem('theme') || 'blue';\n    const defaultPage = localStorage.getItem('defaultPage') || 'dashboard';\n    \n    document.getElementById('update-interval').value = updateInterval;\n    document.getElementById('temp-units').value = tempUnits;\n    document.getElementById('alert-sounds').checked = alertSounds;\n    document.getElementById('auto-export').checked = autoExport;\n    document.getElementById('theme').value = theme;\n    document.getElementById('default-page').value = defaultPage;\n}\n\nfunction saveSettings() {\n    const updateInterval = document.getElementById('update-interval').value;\n    const tempUnits = document.getElementById('temp-units').value;\n    const alertSounds = document.getElementById('alert-sounds').checked;\n    const autoExport = document.getElementById('auto-export').checked;\n    const theme = document.getElementById('theme').value;\n    const defaultPage = document.getElementById('default-page').value;\n    \n    localStorage.setItem('updateInterval', updateInterval);\n    localStorage.setItem('tempUnits', tempUnits);\n    localStorage.setItem('alertSounds', alertSounds);\n    localStorage.setItem('autoExport', autoExport);\n    localStorage.setItem('theme', theme);\n    localStorage.setItem('defaultPage', defaultPage);\n    \n    alert('Settings saved successfully!');\n    \n    // Apply settings\n    if (dashboard) {\n        dashboard.updateInterval = parseInt(updateInterval);\n    }\n}\n\nfunction resetSettings() {\n    if (confirm('Are you sure you want to reset all settings to default?')) {\n        localStorage.clear();\n        loadSettings();\n        alert('Settings reset to default values');\n    }\n}\n\nfunction exportSettings() {\n    const settings = {\n        updateInterval: document.getElementById('update-interval').value,\n        tempUnits: document.getElementById('temp-units').value,\n        alertSounds: document.getElementById('alert-sounds').checked,\n        autoExport: document.getElementById('auto-export').checked,\n        theme: document.getElementById('theme').value,\n        defaultPage: document.getElementById('default-page').value\n    };\n    \n    const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'navair_settings.json';\n    a.click();\n    URL.revokeObjectURL(url);\n}\n\nfunction importSettings() {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    input.onchange = function(e) {\n        const file = e.target.files[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = function(e) {\n                try {\n                    const settings = JSON.parse(e.target.result);\n                    Object.keys(settings).forEach(key => {\n                        localStorage.setItem(key, settings[key]);\n                    });\n                    loadSettings();\n                    alert('Settings imported successfully!');\n                } catch (error) {\n                    alert('Error importing settings: Invalid file format');\n                }\n            };\n            reader.readAsText(file);\n        }\n    };\n    input.click();\n}\n\n// =============================================================================\n// APPLICATION INITIALIZATION\n// =============================================================================\n\n/**\n * Initialize dashboard when DOM is loaded\n */\nlet dashboard;\ndocument.addEventListener('DOMContentLoaded', () => {\n    dashboard = new NAVAIRDashboard();\n    \n    // Setup navigation event listeners\n    setupNavigation();\n    \n    // Load default page from settings\n    const defaultPage = localStorage.getItem('defaultPage') || 'dashboard';\n    if (defaultPage !== 'dashboard') {\n        setTimeout(() => {\n            const navItem = document.querySelector(`[data-page=\"${defaultPage}\"]`);\n            if (navItem) {\n                showPage(defaultPage, navItem);\n            }\n        }, 100);\n    }\n    \n    // Setup periodic health updates\n    setInterval(() => {\n        if (document.getElementById('health-page').classList.contains('active')) {\n            updateSystemHealth();\n        }\n    }, 10000);\n    \n    // Add keyboard navigation support\n    setupKeyboardNavigation();\n});\n\nfunction setupNavigation() {\n    const navItems = document.querySelectorAll('.nav-item[data-page]');\n    navItems.forEach(item => {\n        item.addEventListener('click', (e) => {\n            e.preventDefault();\n            const pageId = item.getAttribute('data-page');\n            showPage(pageId, item);\n        });\n        \n        // Add keyboard support\n        item.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                const pageId = item.getAttribute('data-page');\n                showPage(pageId, item);\n            }\n        });\n    });\n}\n\nfunction setupKeyboardNavigation() {\n    document.addEventListener('keydown', (e) => {\n        // Alt + number keys for quick navigation\n        if (e.altKey && e.key >= '1' && e.key <= '6') {\n            e.preventDefault();\n            const pageIndex = parseInt(e.key) - 1;\n            const navItems = document.querySelectorAll('.nav-item[data-page]');\n            if (navItems[pageIndex]) {\n                const pageId = navItems[pageIndex].getAttribute('data-page');\n                showPage(pageId, navItems[pageIndex]);\n                navItems[pageIndex].focus();\n            }\n        }\n    });\n}\n\n// =============================================================================\n// STANDALONE DEMO MODE FUNCTION\n// =============================================================================\n\n/**\n * Toggle demo mode - works even if dashboard object fails to initialize\n * Can also be called directly: dashboard.toggleDemoMode()\n */\nfunction toggleDemo() {\n    if (dashboard && typeof dashboard.toggleDemoMode === 'function') {\n        dashboard.toggleDemoMode();\n    } else {\n        console.error('%c✗ DEMO MODE ERROR', 'color: #e74c3c; font-size: 16px; font-weight: bold;');\n        console.error('Dashboard object not initialized or toggleDemoMode method not available');\n        console.error('Check for JavaScript errors above');\n    }\n}\n\n// Add helpful message on load\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');\nconsole.log('%c NAVAIR Dashboard Console', 'color: #3498db; font-size: 14px; font-weight: bold;');\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');\nconsole.log('%cTo enable DEMO MODE for presentation:', 'font-weight: bold;');\nconsole.log('%c  dashboard.toggleDemoMode()', 'color: #27ae60; font-family: monospace;');\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');","structuredPatch":[{"oldStart":261,"oldLines":10,"newStart":261,"newLines":10,"lines":["     generateMockSensorData() {","         // Add realistic variations to mock data","         this.mockData.nozzleTemp += (Math.random() - 0.5) * 2; // ±1°C variation","-        this.mockData.nozzleTemp = Math.max(200, Math.min(220, this.mockData.nozzleTemp));","+        this.mockData.nozzleTemp = Math.max(250, Math.min(254, this.mockData.nozzleTemp));"," ","         this.mockData.bedTemp += (Math.random() - 0.5) * 1; // ±0.5°C variation","-        this.mockData.bedTemp = Math.max(55, Math.min(65, this.mockData.bedTemp));","+        this.mockData.bedTemp = Math.max(83, Math.min(87, this.mockData.bedTemp));"," ","         this.mockData.humidity += (Math.random() - 0.5) * 3; // ±1.5% variation","         this.mockData.humidity = Math.max(40, Math.min(50, this.mockData.humidity));"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"d359c7d1-1eec-4772-8628-3aa9c4facb53","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01LCA94xvQBzdUUtby7s1b8Y","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01MmHcEkaYUSZRKXnzrAwCFY","name":"Edit","input":{"file_path":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js","old_string":"    generateMockPrintData() {\n        // Simulate print progress\n        this.mockData.printProgress += 0.5;\n        if (this.mockData.printProgress > 100) {\n            this.mockData.printProgress = 15; // Reset to new job\n        }\n\n        // Quality score varies slightly\n        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n\n        return {\n            job_name: 'Bracket_Assembly_v3',\n            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n            progress: Math.round(this.mockData.printProgress),\n            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 2.5)),\n            quality_score: this.mockData.qualityScore,\n            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n        };\n    }","new_string":"    generateMockPrintData() {\n        // Simulate print progress (11 hours 7 minutes = 667 minutes total)\n        this.mockData.printProgress += 0.5;\n        if (this.mockData.printProgress > 100) {\n            this.mockData.printProgress = 0; // Reset to new job\n        }\n\n        // Quality score varies slightly\n        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n\n        return {\n            job_name: 'back_bracket_cover_v4.stl',\n            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n            progress: Math.round(this.mockData.printProgress),\n            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 6.67)), // 667 minutes total\n            quality_score: this.mockData.qualityScore,\n            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n        };\n    }"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":882,"cache_read_input_tokens":34985,"cache_creation":{"ephemeral_5m_input_tokens":882,"ephemeral_1h_input_tokens":0},"output_tokens":24,"service_tier":"standard"}},"requestId":"req_011CUC38q3R7zjyyEKtwaSPf","type":"assistant","uuid":"6bd5df25-eaa7-43c3-8857-a2adac2743c0","timestamp":"2025-10-17T03:11:05.012Z"}
{"parentUuid":"6bd5df25-eaa7-43c3-8857-a2adac2743c0","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01MmHcEkaYUSZRKXnzrAwCFY","type":"tool_result","content":"The file /home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   306→    /**\n   307→     * Generate mock print status data\n   308→     * @returns {Object} Mock print data\n   309→     */\n   310→    generateMockPrintData() {\n   311→        // Simulate print progress (11 hours 7 minutes = 667 minutes total)\n   312→        this.mockData.printProgress += 0.5;\n   313→        if (this.mockData.printProgress > 100) {\n   314→            this.mockData.printProgress = 0; // Reset to new job\n   315→        }\n   316→\n   317→        // Quality score varies slightly\n   318→        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n   319→        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n   320→\n   321→        return {\n   322→            job_name: 'back_bracket_cover_v4.stl',\n   323→            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n   324→            progress: Math.round(this.mockData.printProgress),\n   325→            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 6.67)), // 667 minutes total\n   326→            quality_score: this.mockData.qualityScore,\n   327→            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n   328→        };\n   329→    }\n   330→\n   331→    /**\n   332→     * Generate mock system health data\n   333→     * @returns {Object} Mock health data"}]},"uuid":"433e30b5-2700-47d8-a8fa-bd307ce9e8f5","timestamp":"2025-10-17T03:11:09.645Z","toolUseResult":{"filePath":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js","oldString":"    generateMockPrintData() {\n        // Simulate print progress\n        this.mockData.printProgress += 0.5;\n        if (this.mockData.printProgress > 100) {\n            this.mockData.printProgress = 15; // Reset to new job\n        }\n\n        // Quality score varies slightly\n        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n\n        return {\n            job_name: 'Bracket_Assembly_v3',\n            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n            progress: Math.round(this.mockData.printProgress),\n            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 2.5)),\n            quality_score: this.mockData.qualityScore,\n            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n        };\n    }","newString":"    generateMockPrintData() {\n        // Simulate print progress (11 hours 7 minutes = 667 minutes total)\n        this.mockData.printProgress += 0.5;\n        if (this.mockData.printProgress > 100) {\n            this.mockData.printProgress = 0; // Reset to new job\n        }\n\n        // Quality score varies slightly\n        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n\n        return {\n            job_name: 'back_bracket_cover_v4.stl',\n            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n            progress: Math.round(this.mockData.printProgress),\n            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 6.67)), // 667 minutes total\n            quality_score: this.mockData.qualityScore,\n            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n        };\n    }","originalFile":"/**\n * NAVAIR Additive Manufacturing Dashboard\n * \n * A modern, professional web dashboard for monitoring NAVAIR 3D printer operations\n * with real-time data visualization, system health monitoring, and quality analytics.\n * \n * @version 2.0\n * @author NAVAIR Team\n * @created January 2025\n * \n * Features:\n * - Real-time sensor monitoring with gauges and charts\n * - Multi-page navigation with accessibility support\n * - API integration with comprehensive error handling\n * - Responsive design for mobile and desktop\n * - Professional UI with loading states and animations\n */\n\n/**\n * Main Dashboard Controller Class\n * \n * Manages all dashboard functionality including:\n * - API communication and data fetching\n * - Chart rendering and updates\n * - UI state management\n * - Error handling and user feedback\n */\nclass NAVAIRDashboard {\n    /**\n     * Initialize dashboard with configuration and state\n     */\n    constructor() {\n        this.apiBaseUrl = 'http://localhost:8000/api';\n        this.updateInterval = 2000; // 2 seconds\n        this.charts = {};\n        this.gauges = {};\n        this.isConnected = {\n            sensors: false,\n            print: false\n        };\n        this.sensorHistory = [];\n        this.maxHistoryPoints = 50;\n\n        // Demo mode for presentations\n        this.demoMode = false;\n        this.mockData = {\n            nozzleTemp: 252,\n            bedTemp: 85,\n            humidity: 45,\n            pressure: 1013,\n            ambientTemp: 22,\n            bedVibration: { x: 0.02, y: 0.015, z: 0.01 },\n            bodyVibration: { x: 0.03, y: 0.025, z: 0.015 },\n            printProgress: 0,\n            qualityScore: 0.92\n        };\n\n        this.init();\n    }\n\n    /**\n     * Initialize dashboard components and start data fetching\n     */\n    async init() {\n        try {\n            this.setupGauges();\n        } catch (error) {\n            console.error('Error setting up gauges:', error);\n        }\n\n        try {\n            this.setupCharts();\n        } catch (error) {\n            console.error('Error setting up charts:', error);\n        }\n\n        try {\n            this.startDataFetching();\n            this.updateConnectionStatus();\n        } catch (error) {\n            console.error('Error starting data fetching:', error);\n        }\n\n        console.log('Dashboard initialized successfully');\n    }\n\n    // =============================================================================\n    // CHART AND GAUGE SETUP METHODS\n    // =============================================================================\n\n    /**\n     * Setup gauges - simplified to just use text displays\n     */\n    setupGauges() {\n        // Gauges removed - using simple text display instead\n        console.log('Using simplified text-based display (gauges disabled)');\n    }\n\n    /**\n     * Setup line charts for vibration and historical data\n     */\n    setupCharts() {\n        // Vibration Chart\n        const vibCtx = document.getElementById('vibration-chart');\n        if (vibCtx) {\n            this.charts.vibration = new Chart(vibCtx, {\n                type: 'line',\n                data: {\n                    labels: [],\n                    datasets: [{\n                        label: 'Bed Vibration',\n                        data: [],\n                        borderColor: '#e74c3c',\n                        backgroundColor: 'rgba(231, 76, 60, 0.1)',\n                        tension: 0.4\n                    }, {\n                        label: 'Body Vibration',\n                        data: [],\n                        borderColor: '#3498db',\n                        backgroundColor: 'rgba(52, 152, 219, 0.1)',\n                        tension: 0.4\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        intersect: false,\n                        mode: 'index'\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            title: {\n                                display: true,\n                                text: 'Vibration (mm/s²)'\n                            }\n                        },\n                        x: {\n                            title: {\n                                display: true,\n                                text: 'Time'\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            display: true,\n                            position: 'top'\n                        }\n                    }\n                }\n            });\n        }\n\n        // Historical Data Chart\n        const historyCtx = document.getElementById('history-chart');\n        if (historyCtx) {\n            this.charts.history = new Chart(historyCtx, {\n                type: 'line',\n                data: {\n                    labels: [],\n                    datasets: [{\n                        label: 'Nozzle Temp (°C)',\n                        data: [],\n                        borderColor: '#e74c3c',\n                        backgroundColor: 'rgba(231, 76, 60, 0.1)',\n                        yAxisID: 'y'\n                    }, {\n                        label: 'Bed Temp (°C)',\n                        data: [],\n                        borderColor: '#e67e22',\n                        backgroundColor: 'rgba(230, 126, 34, 0.1)',\n                        yAxisID: 'y'\n                    }, {\n                        label: 'Humidity (%)',\n                        data: [],\n                        borderColor: '#3498db',\n                        backgroundColor: 'rgba(52, 152, 219, 0.1)',\n                        yAxisID: 'y1'\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        intersect: false,\n                        mode: 'index'\n                    },\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            display: true,\n                            position: 'left',\n                            title: {\n                                display: true,\n                                text: 'Temperature (°C)'\n                            }\n                        },\n                        y1: {\n                            type: 'linear',\n                            display: true,\n                            position: 'right',\n                            title: {\n                                display: true,\n                                text: 'Humidity (%)'\n                            },\n                            grid: {\n                                drawOnChartArea: false,\n                            },\n                        },\n                        x: {\n                            title: {\n                                display: true,\n                                text: 'Time'\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            display: true,\n                            position: 'top'\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    // =============================================================================\n    // DEMO MODE METHODS\n    // =============================================================================\n\n    /**\n     * Toggle demo mode on/off\n     */\n    toggleDemoMode() {\n        this.demoMode = !this.demoMode;\n\n        if (this.demoMode) {\n            // Immediately update connection status and fetch mock data\n            this.setConnectionStatus('sensors', true);\n            this.setConnectionStatus('print', true);\n\n            // Fetch mock data immediately\n            this.fetchSensorData();\n            this.fetchPrintStatus();\n\n            console.log('%c✓ DEMO MODE ENABLED', 'color: #27ae60; font-size: 16px; font-weight: bold;');\n            console.log('The dashboard will now display realistic mock data.');\n            console.log('To disable: dashboard.toggleDemoMode()');\n        } else {\n            console.log('%c✗ DEMO MODE DISABLED', 'color: #e74c3c; font-size: 16px; font-weight: bold;');\n        }\n    }\n\n    /**\n     * Generate realistic mock sensor data with natural variations\n     * @returns {Object} Mock sensor data\n     */\n    generateMockSensorData() {\n        // Add realistic variations to mock data\n        this.mockData.nozzleTemp += (Math.random() - 0.5) * 2; // ±1°C variation\n        this.mockData.nozzleTemp = Math.max(250, Math.min(254, this.mockData.nozzleTemp));\n\n        this.mockData.bedTemp += (Math.random() - 0.5) * 1; // ±0.5°C variation\n        this.mockData.bedTemp = Math.max(83, Math.min(87, this.mockData.bedTemp));\n\n        this.mockData.humidity += (Math.random() - 0.5) * 3; // ±1.5% variation\n        this.mockData.humidity = Math.max(40, Math.min(50, this.mockData.humidity));\n\n        this.mockData.pressure += (Math.random() - 0.5) * 2;\n        this.mockData.pressure = Math.max(1010, Math.min(1016, this.mockData.pressure));\n\n        this.mockData.ambientTemp += (Math.random() - 0.5) * 0.5;\n        this.mockData.ambientTemp = Math.max(20, Math.min(24, this.mockData.ambientTemp));\n\n        // Vibration with small random variations\n        this.mockData.bedVibration = {\n            x: 0.02 + (Math.random() - 0.5) * 0.01,\n            y: 0.015 + (Math.random() - 0.5) * 0.01,\n            z: 0.01 + (Math.random() - 0.5) * 0.005\n        };\n\n        this.mockData.bodyVibration = {\n            x: 0.03 + (Math.random() - 0.5) * 0.015,\n            y: 0.025 + (Math.random() - 0.5) * 0.015,\n            z: 0.015 + (Math.random() - 0.5) * 0.01\n        };\n\n        return {\n            temperature: {\n                nozzle: this.mockData.nozzleTemp,\n                bed: this.mockData.bedTemp,\n                ambient: this.mockData.ambientTemp\n            },\n            humidity: this.mockData.humidity,\n            pressure: this.mockData.pressure,\n            vibration: {\n                bed: this.mockData.bedVibration,\n                body: this.mockData.bodyVibration\n            }\n        };\n    }\n\n    /**\n     * Generate mock print status data\n     * @returns {Object} Mock print data\n     */\n    generateMockPrintData() {\n        // Simulate print progress\n        this.mockData.printProgress += 0.5;\n        if (this.mockData.printProgress > 100) {\n            this.mockData.printProgress = 15; // Reset to new job\n        }\n\n        // Quality score varies slightly\n        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n\n        return {\n            job_name: 'Bracket_Assembly_v3',\n            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n            progress: Math.round(this.mockData.printProgress),\n            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 2.5)),\n            quality_score: this.mockData.qualityScore,\n            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n        };\n    }\n\n    /**\n     * Generate mock system health data\n     * @returns {Object} Mock health data\n     */\n    generateMockHealthData() {\n        return {\n            cpu_temp: 45 + Math.random() * 10,\n            memory_usage: 55 + Math.random() * 15,\n            disk_free: 128 + Math.random() * 5,\n            cpu_usage: 30 + Math.random() * 20,\n            network_status: 'Connected'\n        };\n    }\n\n    // =============================================================================\n    // API COMMUNICATION METHODS\n    // =============================================================================\n\n    /**\n     * Fetch current sensor data from API with proper error handling\n     * @returns {Object|null} Sensor data or null on error\n     */\n    async fetchSensorData() {\n        // Use mock data in demo mode\n        if (this.demoMode) {\n            const mockData = this.generateMockSensorData();\n            this.updateSensorData(mockData);\n            this.setConnectionStatus('sensors', true);\n            return mockData;\n        }\n\n        // Show loading states\n        this.setLoadingState('nozzle-temp-value');\n        this.setLoadingState('bed-temp-value');\n        this.setLoadingState('humidity-value');\n\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() => controller.abort(), 5000);\n\n            const response = await fetch(`${this.apiBaseUrl}/sensors/current`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                signal: controller.signal\n            });\n\n            clearTimeout(timeoutId);\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            this.updateSensorData(data);\n            this.setConnectionStatus('sensors', true);\n            return data;\n\n        } catch (error) {\n            console.error('Sensor API Error:', error);\n            this.setConnectionStatus('sensors', false);\n\n            let errorMessage = 'Unable to connect to sensor API';\n            if (error.name === 'AbortError') {\n                errorMessage = 'Sensor API request timed out';\n            } else if (!navigator.onLine) {\n                errorMessage = 'No internet connection';\n            }\n\n            this.showSensorError(errorMessage);\n            return null;\n        }\n    }\n\n    async fetchPrintStatus() {\n        // Use mock data in demo mode\n        if (this.demoMode) {\n            const mockData = this.generateMockPrintData();\n            this.updatePrintData(mockData);\n            this.setConnectionStatus('print', true);\n            return mockData;\n        }\n\n        try {\n            const response = await fetch(`${this.apiBaseUrl}/print/status`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                timeout: 5000\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            this.updatePrintData(data);\n            this.setConnectionStatus('print', true);\n            return data;\n\n        } catch (error) {\n            console.error('Print API Error:', error);\n            this.setConnectionStatus('print', false);\n            this.showPrintError('Unable to connect to print API');\n            return null;\n        }\n    }\n\n    updateSensorData(data) {\n        if (!data || !data.temperature) {\n            this.showSensorError('Invalid sensor data received');\n            this.showAnalysisError();\n            this.showHealthError();\n            this.showQualityError();\n            return;\n        }\n\n        // Update temperature values (no gauges, just text)\n        if (data.temperature.nozzle !== undefined) {\n            const nozzleTemp = parseFloat(data.temperature.nozzle);\n            this.updateElement('nozzle-temp-value', `${nozzleTemp.toFixed(1)}°C`);\n        }\n\n        if (data.temperature.bed !== undefined) {\n            const bedTemp = parseFloat(data.temperature.bed);\n            this.updateElement('bed-temp-value', `${bedTemp.toFixed(1)}°C`);\n        }\n\n        // Update environmental data\n        if (data.humidity !== undefined) {\n            this.updateElement('humidity-value', `${parseFloat(data.humidity).toFixed(1)}%`);\n        }\n        \n        if (data.pressure !== undefined) {\n            this.updateElement('pressure-value', `${parseFloat(data.pressure).toFixed(1)} hPa`);\n        }\n        \n        if (data.temperature.ambient !== undefined) {\n            this.updateElement('ambient-temp-value', `${parseFloat(data.temperature.ambient).toFixed(1)}°C`);\n        }\n\n        // Update vibration data\n        if (data.vibration) {\n            const bedVib = this.calculateVibrationMagnitude(data.vibration.bed) * 1000;\n            const bodyVib = this.calculateVibrationMagnitude(data.vibration.body) * 1000;\n            \n            this.updateElement('bed-vibration-value', `${bedVib.toFixed(2)} mm/s²`);\n            this.updateElement('body-vibration-value', `${bodyVib.toFixed(2)} mm/s²`);\n            \n            this.updateVibrationChart(bedVib, bodyVib);\n        }\n\n        // Store historical data\n        this.addToHistory(data);\n        this.updateHistoryChart();\n    }\n\n    updatePrintData(data) {\n        if (!data) {\n            this.showPrintError('Invalid print data received');\n            return;\n        }\n\n        this.updateElement('job-name', data.job_name || 'No active job');\n        this.updateElement('job-status', data.status || 'Unknown');\n        this.updateElement('job-progress', `${data.progress || 0}%`);\n        this.updateElement('time-remaining', data.time_remaining ? `${data.time_remaining}m` : '--');\n\n        // Update quality score (no gauge, just text)\n        if (data.quality_score !== undefined) {\n            const qualityScore = Math.round(data.quality_score * 100);\n            this.updateElement('quality-value', `${qualityScore}%`);\n        }\n\n        this.updateElement('ml-prediction', data.ml_prediction || 'No prediction');\n    }\n\n    calculateVibrationMagnitude(vibData) {\n        if (!vibData || typeof vibData.x !== 'number') return 0;\n        return Math.sqrt(\n            Math.pow(vibData.x, 2) + \n            Math.pow(vibData.y, 2) + \n            Math.pow(vibData.z, 2)\n        );\n    }\n\n    addToHistory(data) {\n        const timestamp = new Date();\n        const historyPoint = {\n            timestamp: timestamp,\n            nozzleTemp: data.temperature?.nozzle || 0,\n            bedTemp: data.temperature?.bed || 0,\n            humidity: data.humidity || 0\n        };\n\n        this.sensorHistory.push(historyPoint);\n        \n        // Keep only last N points\n        if (this.sensorHistory.length > this.maxHistoryPoints) {\n            this.sensorHistory.shift();\n        }\n    }\n\n    updateVibrationChart(bedVib, bodyVib) {\n        if (!this.charts.vibration) return;\n\n        const timestamp = new Date().toLocaleTimeString();\n        const chart = this.charts.vibration;\n\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(bedVib);\n        chart.data.datasets[1].data.push(bodyVib);\n\n        // Keep only last 20 points\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n    }\n\n    updateHistoryChart() {\n        if (!this.charts.history || this.sensorHistory.length === 0) return;\n\n        const chart = this.charts.history;\n        const labels = this.sensorHistory.map(point => point.timestamp.toLocaleTimeString());\n        \n        chart.data.labels = labels;\n        chart.data.datasets[0].data = this.sensorHistory.map(point => point.nozzleTemp);\n        chart.data.datasets[1].data = this.sensorHistory.map(point => point.bedTemp);\n        chart.data.datasets[2].data = this.sensorHistory.map(point => point.humidity);\n\n        chart.update('none');\n    }\n\n    setConnectionStatus(type, connected) {\n        this.isConnected[type] = connected;\n        this.showConnectionStatus(type, connected);\n    }\n\n    updateConnectionStatus() {\n        this.updateElement('last-update', new Date().toLocaleTimeString());\n    }\n\n    showSensorError(message) {\n        this.updateElement('nozzle-temp-value', 'API Error', 'error');\n        this.updateElement('bed-temp-value', 'API Error', 'error');\n        this.updateElement('humidity-value', 'API Error', 'error');\n        this.updateElement('pressure-value', 'API Error', 'error');\n        this.updateElement('ambient-temp-value', 'API Error', 'error');\n        this.updateElement('bed-vibration-value', 'API Error', 'error');\n        this.updateElement('body-vibration-value', 'API Error', 'error');\n        this.showConnectionStatus('sensors', false, message);\n    }\n\n    showPrintError(message) {\n        this.updateElement('job-name', 'API Connection Failed', 'error');\n        this.updateElement('job-status', 'Disconnected', 'error');\n        this.updateElement('job-progress', 'API Error', 'error');\n        this.updateElement('time-remaining', 'No Connection', 'error');\n        this.updateElement('quality-value', 'API Error', 'error');\n        this.updateElement('ml-prediction', 'No connection', 'error');\n        this.showConnectionStatus('print', false, message);\n        this.showQualityError();\n    }\n\n    showAnalysisError() {\n        this.updateElement('correlation-status', 'API Not Connected');\n        this.updateElement('anomaly-count', 'No Data Available');\n        this.updateElement('prediction-accuracy', 'API Error');\n        this.updateElement('process-capability', 'No Connection');\n        this.updateElement('ml-confidence', 'API Error');\n        this.updateElement('training-accuracy', 'No Data');\n        this.updateElement('failure-risk', 'API Not Available');\n        this.updateElement('quality-risk', 'No Connection');\n    }\n\n    showHealthError() {\n        this.updateElement('cpu-temp', 'API Error');\n        this.updateElement('memory-usage', 'API Error');\n        this.updateElement('disk-usage', 'API Error');\n        this.updateElement('network-status', 'Disconnected');\n        this.updateElement('bme280-status', 'API Error');\n        this.updateElement('mpu-bed-status', 'API Error');\n        this.updateElement('mpu-body-status', 'API Error');\n        this.updateElement('laser-status', 'API Error');\n    }\n\n    showQualityError() {\n        this.updateElement('overall-quality', 'API Not Available');\n        this.updateElement('successful-prints', 'No Data');\n        this.updateElement('avg-print-time', 'API Error');\n        this.updateElement('material-efficiency', 'No Connection');\n        this.updateElement('critical-failures', 'API Error');\n        this.updateElement('medium-risk', 'API Error');\n        this.updateElement('low-risk', 'API Error');\n        this.updateElement('rpn-average', 'No Data');\n    }\n\n    showMaintenanceError() {\n        this.updateElement('next-calibration', 'API Error');\n        this.updateElement('sensor-cleaning', 'No Data Available');\n        this.updateElement('filter-replacement', 'API Error');\n        this.updateElement('system-backup', 'API Not Connected');\n        this.updateElement('last-bme280-cal', 'API Error');\n        this.updateElement('last-mpu-cal', 'API Error');\n        this.updateElement('laser-check', 'No Data');\n        this.updateElement('drift-compensation', 'API Error');\n    }\n\n    // =============================================================================\n    // UI UPDATE AND STATE MANAGEMENT METHODS\n    // =============================================================================\n    \n    /**\n     * Update DOM element with value and optional CSS class\n     * @param {string} id - Element ID\n     * @param {string} value - Text content to set\n     * @param {string} className - Optional CSS class to add\n     */\n    updateElement(id, value, className = '') {\n        const element = document.getElementById(id);\n        if (element) {\n            element.textContent = value;\n            \n            // Remove existing state classes\n            element.classList.remove('loading', 'error', 'success');\n            \n            // Add new class if specified\n            if (className) {\n                element.classList.add(className);\n            }\n        }\n    }\n\n    setLoadingState(id, loading = true) {\n        const element = document.getElementById(id);\n        if (element) {\n            if (loading) {\n                element.classList.add('loading');\n                element.textContent = 'Loading...';\n            } else {\n                element.classList.remove('loading');\n            }\n        }\n    }\n\n    showConnectionStatus(type, connected, details = '') {\n        const statusDot = document.getElementById(`${type}-status`);\n        const statusText = document.getElementById(`${type}-connection`);\n        \n        if (statusDot) {\n            statusDot.className = `status-dot ${connected ? 'connected' : 'disconnected'}`;\n            statusDot.setAttribute('aria-label', connected ? 'Connected' : 'Disconnected');\n        }\n        \n        if (statusText) {\n            const status = connected ? 'Connected' : 'Disconnected';\n            statusText.textContent = details ? `${status} - ${details}` : status;\n            statusText.className = `connection-status ${connected ? 'connected' : 'disconnected'}`;\n        }\n    }\n\n    showAlert(message, type = 'error') {\n        const alert = document.getElementById(`${type}-alert`);\n        if (alert) {\n            alert.textContent = message;\n            alert.style.display = 'block';\n            setTimeout(() => {\n                alert.style.display = 'none';\n            }, 5000);\n        }\n    }\n\n    startDataFetching() {\n        // Initial fetch\n        this.fetchSensorData();\n        this.fetchPrintStatus();\n        \n        // Show initial errors for all pages\n        this.showAnalysisError();\n        this.showHealthError();\n        this.showQualityError();\n        this.showMaintenanceError();\n\n        // Set up intervals\n        setInterval(() => {\n            this.fetchSensorData();\n            this.updateConnectionStatus();\n        }, this.updateInterval);\n\n        setInterval(() => {\n            this.fetchPrintStatus();\n        }, 5000); // Print status every 5 seconds\n    }\n}\n\n// =============================================================================\n// CONTROL FUNCTIONS - System Control Actions\n// =============================================================================\n\n/**\n * Emergency stop function - immediately halts printer operation\n */\nasync function emergencyStop() {\n    dashboard.showAlert('Emergency stop activated!', 'error');\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/emergency_stop`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Emergency stop successful', 'success');\n        }\n    } catch (error) {\n        console.error('Emergency stop failed:', error);\n    }\n}\n\nasync function pauseResume() {\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/pause_resume`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Pause/Resume command sent', 'success');\n        }\n    } catch (error) {\n        console.error('Pause/Resume failed:', error);\n        dashboard.showAlert('Unable to send pause/resume command', 'error');\n    }\n}\n\nasync function calibrateSensors() {\n    dashboard.showAlert('Starting sensor calibration...', 'success');\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/calibrate`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Sensor calibration initiated', 'success');\n        }\n    } catch (error) {\n        console.error('Calibration failed:', error);\n        dashboard.showAlert('Unable to start calibration', 'error');\n    }\n}\n\nasync function exportData() {\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/data/export`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' }\n        });\n        if (response.ok) {\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `navair_data_${new Date().toISOString().split('T')[0]}.json`;\n            a.click();\n            dashboard.showAlert('Data export completed', 'success');\n        }\n    } catch (error) {\n        console.error('Export failed:', error);\n        dashboard.showAlert('Unable to export data', 'error');\n    }\n}\n\n// =============================================================================\n// PAGE NAVIGATION SYSTEM\n// =============================================================================\n\n/**\n * Show specified page and update navigation state\n * @param {string} pageId - ID of page to show\n * @param {HTMLElement} element - Navigation element that was clicked\n */\nfunction showPage(pageId, element) {\n    // Hide all pages and update ARIA attributes\n    const pages = document.querySelectorAll('.page');\n    pages.forEach(page => {\n        page.classList.remove('active');\n        page.setAttribute('aria-hidden', 'true');\n    });\n    \n    // Show selected page\n    const selectedPage = document.getElementById(pageId + '-page');\n    if (selectedPage) {\n        selectedPage.classList.add('active');\n        selectedPage.setAttribute('aria-hidden', 'false');\n    }\n    \n    // Update navigation ARIA attributes\n    const navItems = document.querySelectorAll('.nav-item');\n    navItems.forEach(item => {\n        item.classList.remove('active');\n        item.setAttribute('aria-selected', 'false');\n        item.setAttribute('tabindex', '-1');\n    });\n    \n    if (element) {\n        element.classList.add('active');\n        element.setAttribute('aria-selected', 'true');\n        element.setAttribute('tabindex', '0');\n    }\n    \n    // Initialize page-specific content\n    initializePage(pageId);\n    \n    // Update page title\n    updatePageTitle(pageId);\n}\n\nfunction updatePageTitle(pageId) {\n    const titles = {\n        'dashboard': 'Dashboard',\n        'analysis': 'Analysis',\n        'health': 'System Health',\n        'quality': 'Quality Reports',\n        'maintenance': 'Maintenance',\n        'settings': 'Settings'\n    };\n    document.title = `NAVAIR Monitor - ${titles[pageId] || 'Dashboard'}`;\n}\n\nfunction initializePage(pageId) {\n    switch(pageId) {\n        case 'analysis':\n            setupAnalysisCharts();\n            break;\n        case 'health':\n            setupHealthMonitoring();\n            break;\n        case 'quality':\n            setupQualityCharts();\n            break;\n        case 'maintenance':\n            updateMaintenanceStatus();\n            break;\n        case 'settings':\n            loadSettings();\n            break;\n    }\n}\n\n// Analysis Page Functions\nfunction setupAnalysisCharts() {\n    // Populate analysis metrics in demo mode\n    if (dashboard && dashboard.demoMode) {\n        document.getElementById('correlation-status').textContent = 'Positive (0.78)';\n        document.getElementById('anomaly-count').textContent = '3 detected';\n        document.getElementById('prediction-accuracy').textContent = '96.4%';\n        document.getElementById('process-capability').textContent = '1.45 (Capable)';\n        document.getElementById('ml-confidence').textContent = '94.2%';\n        document.getElementById('training-accuracy').textContent = '96.4%';\n        document.getElementById('failure-risk').textContent = 'Low (12%)';\n        document.getElementById('quality-risk').textContent = 'Very Low (5%)';\n    }\n\n    // Correlation Chart\n    const correlationCtx = document.getElementById('correlation-chart');\n    if (correlationCtx && !correlationCtx.chart) {\n        correlationCtx.chart = new Chart(correlationCtx, {\n            type: 'scatter',\n            data: {\n                datasets: [{\n                    label: 'Temperature vs Quality',\n                    data: generateCorrelationData(),\n                    backgroundColor: 'rgba(52, 152, 219, 0.5)',\n                    borderColor: '#3498db'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    x: {\n                        title: {\n                            display: true,\n                            text: 'Temperature (°C)'\n                        }\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: 'Quality Score'\n                        },\n                        min: 0,\n                        max: 1\n                    }\n                }\n            }\n        });\n    }\n\n    // ML Performance Chart\n    const mlCtx = document.getElementById('ml-performance-chart');\n    if (mlCtx && !mlCtx.chart) {\n        mlCtx.chart = new Chart(mlCtx, {\n            type: 'line',\n            data: {\n                labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7'],\n                datasets: [{\n                    label: 'Accuracy',\n                    data: [85, 87, 89, 92, 94, 96, 96.4],\n                    borderColor: '#27ae60',\n                    backgroundColor: 'rgba(39, 174, 96, 0.1)'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: false,\n                        min: 80,\n                        max: 100,\n                        title: {\n                            display: true,\n                            text: 'Accuracy (%)'\n                        }\n                    }\n                }\n            }\n        });\n    }\n}\n\nfunction generateCorrelationData() {\n    // Generate mock correlation data in demo mode\n    if (dashboard && dashboard.demoMode) {\n        const mockPoints = [];\n        for (let i = 0; i < 30; i++) {\n            mockPoints.push({\n                x: 200 + Math.random() * 25,\n                y: 0.85 + Math.random() * 0.13\n            });\n        }\n        return mockPoints;\n    }\n\n    // Only generate data if APIs are connected\n    if (!dashboard || (!dashboard.isConnected.sensors && !dashboard.isConnected.print)) {\n        return [{ x: 0, y: 0, label: 'No API Connection' }];\n    }\n\n    // Use actual historical data if available\n    if (dashboard.sensorHistory.length > 0) {\n        return dashboard.sensorHistory.map(point => ({\n            x: point.nozzleTemp || 0,\n            y: (point.qualityScore || 0) / 100\n        }));\n    }\n\n    return [{ x: 0, y: 0, label: 'No Historical Data' }];\n}\n\n// Health Monitoring Functions\nfunction setupHealthMonitoring() {\n    updateSystemHealth();\n    \n    const perfCtx = document.getElementById('performance-chart');\n    if (perfCtx && !perfCtx.chart) {\n        perfCtx.chart = new Chart(perfCtx, {\n            type: 'line',\n            data: {\n                labels: [],\n                datasets: [{\n                    label: 'CPU Usage (%)',\n                    data: [],\n                    borderColor: '#e74c3c',\n                    backgroundColor: 'rgba(231, 76, 60, 0.1)'\n                }, {\n                    label: 'Memory Usage (%)',\n                    data: [],\n                    borderColor: '#3498db',\n                    backgroundColor: 'rgba(52, 152, 219, 0.1)'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        max: 100,\n                        title: {\n                            display: true,\n                            text: 'Usage (%)'\n                        }\n                    }\n                }\n            }\n        });\n        \n        // Simulate real-time performance data\n        setInterval(() => {\n            updatePerformanceChart(perfCtx.chart);\n        }, 5000);\n    }\n}\n\nasync function updateSystemHealth() {\n    // Use mock data in demo mode\n    if (dashboard.demoMode) {\n        const mockData = dashboard.generateMockHealthData();\n        document.getElementById('cpu-temp').textContent = `${mockData.cpu_temp.toFixed(1)}°C`;\n        document.getElementById('memory-usage').textContent = `${mockData.memory_usage.toFixed(1)}%`;\n        document.getElementById('disk-usage').textContent = `${mockData.disk_free.toFixed(1)}GB free`;\n        document.getElementById('network-status').textContent = mockData.network_status;\n        document.getElementById('bme280-status').textContent = 'Operational';\n        document.getElementById('mpu-bed-status').textContent = 'Operational';\n        document.getElementById('mpu-body-status').textContent = 'Operational';\n        document.getElementById('laser-status').textContent = 'Operational';\n        return;\n    }\n\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/system/health`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' },\n            timeout: 5000\n        });\n\n        if (!response.ok) {\n            throw new Error('API connection failed');\n        }\n\n        const data = await response.json();\n\n        document.getElementById('cpu-temp').textContent = data.cpu_temp ? `${data.cpu_temp}°C` : 'No Data';\n        document.getElementById('memory-usage').textContent = data.memory_usage ? `${data.memory_usage}%` : 'No Data';\n        document.getElementById('disk-usage').textContent = data.disk_free ? `${data.disk_free}GB free` : 'No Data';\n\n    } catch (error) {\n        console.error('System Health API Error:', error);\n        document.getElementById('cpu-temp').textContent = 'API Error';\n        document.getElementById('memory-usage').textContent = 'API Error';\n        document.getElementById('disk-usage').textContent = 'API Error';\n    }\n}\n\nasync function updatePerformanceChart(chart) {\n    const timestamp = new Date().toLocaleTimeString();\n\n    // Use mock data in demo mode\n    if (dashboard.demoMode) {\n        const mockData = dashboard.generateMockHealthData();\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(mockData.cpu_usage);\n        chart.data.datasets[1].data.push(mockData.memory_usage);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n        return;\n    }\n\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/system/performance`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' },\n            timeout: 5000\n        });\n\n        if (!response.ok) {\n            throw new Error('Performance API connection failed');\n        }\n\n        const data = await response.json();\n\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(data.cpu_usage || 0);\n        chart.data.datasets[1].data.push(data.memory_usage || 0);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n\n    } catch (error) {\n        console.error('Performance Chart Error:', error);\n        // Don't update chart if API is not available\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(null);\n        chart.data.datasets[1].data.push(null);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n    }\n}\n\n// Quality Page Functions\nfunction setupQualityCharts() {\n    // Populate quality metrics in demo mode\n    if (dashboard && dashboard.demoMode) {\n        document.getElementById('overall-quality').textContent = '92.3%';\n        document.getElementById('successful-prints').textContent = '';\n        document.getElementById('avg-print-time').textContent = '3h 24m';\n        document.getElementById('material-efficiency').textContent = '94.7%';\n        document.getElementById('critical-failures').textContent = '2';\n        document.getElementById('medium-risk').textContent = '8';\n        document.getElementById('low-risk').textContent = '15';\n        document.getElementById('rpn-average').textContent = '34.2';\n    }\n\n    const qualityCtx = document.getElementById('quality-distribution-chart');\n    if (qualityCtx && !qualityCtx.chart) {\n        qualityCtx.chart = new Chart(qualityCtx, {\n            type: 'doughnut',\n            data: {\n                labels: ['Excellent', 'Good', 'Fair', 'Poor'],\n                datasets: [{\n                    data: [65, 25, 8, 2],\n                    backgroundColor: [\n                        '#27ae60',\n                        '#f39c12',\n                        '#e67e22',\n                        '#e74c3c'\n                    ]\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n}\n\n// Maintenance Functions\nfunction updateMaintenanceStatus() {\n    // Populate maintenance data in demo mode\n    if (dashboard && dashboard.demoMode) {\n        const today = new Date();\n        const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n        const nextMonth = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000);\n        const lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n        const lastMonth = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n        document.getElementById('next-calibration').textContent = nextWeek.toLocaleDateString();\n        document.getElementById('sensor-cleaning').textContent = nextMonth.toLocaleDateString();\n        document.getElementById('filter-replacement').textContent = '---';\n        document.getElementById('system-backup').textContent = 'Last: ' + today.toLocaleDateString();\n        document.getElementById('last-bme280-cal').textContent = lastWeek.toLocaleDateString();\n        document.getElementById('last-mpu-cal').textContent = lastMonth.toLocaleDateString();\n        document.getElementById('laser-check').textContent = lastWeek.toLocaleDateString();\n        document.getElementById('drift-compensation').textContent = 'Active';\n    }\n\n    console.log('Maintenance status updated');\n}\n\nfunction startCalibration() {\n    alert('Starting sensor calibration process...');\n}\n\nfunction runDiagnostics() {\n    alert('Running system diagnostics...');\n}\n\nfunction backupSystem() {\n    alert('Starting system backup...');\n}\n\nfunction generateReport() {\n    alert('Generating maintenance report...');\n}\n\n// Settings Functions\nfunction loadSettings() {\n    // Load saved settings from localStorage\n    const updateInterval = localStorage.getItem('updateInterval') || '2000';\n    const tempUnits = localStorage.getItem('tempUnits') || 'celsius';\n    const alertSounds = localStorage.getItem('alertSounds') !== 'false';\n    const autoExport = localStorage.getItem('autoExport') === 'true';\n    const theme = localStorage.getItem('theme') || 'blue';\n    const defaultPage = localStorage.getItem('defaultPage') || 'dashboard';\n    \n    document.getElementById('update-interval').value = updateInterval;\n    document.getElementById('temp-units').value = tempUnits;\n    document.getElementById('alert-sounds').checked = alertSounds;\n    document.getElementById('auto-export').checked = autoExport;\n    document.getElementById('theme').value = theme;\n    document.getElementById('default-page').value = defaultPage;\n}\n\nfunction saveSettings() {\n    const updateInterval = document.getElementById('update-interval').value;\n    const tempUnits = document.getElementById('temp-units').value;\n    const alertSounds = document.getElementById('alert-sounds').checked;\n    const autoExport = document.getElementById('auto-export').checked;\n    const theme = document.getElementById('theme').value;\n    const defaultPage = document.getElementById('default-page').value;\n    \n    localStorage.setItem('updateInterval', updateInterval);\n    localStorage.setItem('tempUnits', tempUnits);\n    localStorage.setItem('alertSounds', alertSounds);\n    localStorage.setItem('autoExport', autoExport);\n    localStorage.setItem('theme', theme);\n    localStorage.setItem('defaultPage', defaultPage);\n    \n    alert('Settings saved successfully!');\n    \n    // Apply settings\n    if (dashboard) {\n        dashboard.updateInterval = parseInt(updateInterval);\n    }\n}\n\nfunction resetSettings() {\n    if (confirm('Are you sure you want to reset all settings to default?')) {\n        localStorage.clear();\n        loadSettings();\n        alert('Settings reset to default values');\n    }\n}\n\nfunction exportSettings() {\n    const settings = {\n        updateInterval: document.getElementById('update-interval').value,\n        tempUnits: document.getElementById('temp-units').value,\n        alertSounds: document.getElementById('alert-sounds').checked,\n        autoExport: document.getElementById('auto-export').checked,\n        theme: document.getElementById('theme').value,\n        defaultPage: document.getElementById('default-page').value\n    };\n    \n    const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'navair_settings.json';\n    a.click();\n    URL.revokeObjectURL(url);\n}\n\nfunction importSettings() {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    input.onchange = function(e) {\n        const file = e.target.files[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = function(e) {\n                try {\n                    const settings = JSON.parse(e.target.result);\n                    Object.keys(settings).forEach(key => {\n                        localStorage.setItem(key, settings[key]);\n                    });\n                    loadSettings();\n                    alert('Settings imported successfully!');\n                } catch (error) {\n                    alert('Error importing settings: Invalid file format');\n                }\n            };\n            reader.readAsText(file);\n        }\n    };\n    input.click();\n}\n\n// =============================================================================\n// APPLICATION INITIALIZATION\n// =============================================================================\n\n/**\n * Initialize dashboard when DOM is loaded\n */\nlet dashboard;\ndocument.addEventListener('DOMContentLoaded', () => {\n    dashboard = new NAVAIRDashboard();\n    \n    // Setup navigation event listeners\n    setupNavigation();\n    \n    // Load default page from settings\n    const defaultPage = localStorage.getItem('defaultPage') || 'dashboard';\n    if (defaultPage !== 'dashboard') {\n        setTimeout(() => {\n            const navItem = document.querySelector(`[data-page=\"${defaultPage}\"]`);\n            if (navItem) {\n                showPage(defaultPage, navItem);\n            }\n        }, 100);\n    }\n    \n    // Setup periodic health updates\n    setInterval(() => {\n        if (document.getElementById('health-page').classList.contains('active')) {\n            updateSystemHealth();\n        }\n    }, 10000);\n    \n    // Add keyboard navigation support\n    setupKeyboardNavigation();\n});\n\nfunction setupNavigation() {\n    const navItems = document.querySelectorAll('.nav-item[data-page]');\n    navItems.forEach(item => {\n        item.addEventListener('click', (e) => {\n            e.preventDefault();\n            const pageId = item.getAttribute('data-page');\n            showPage(pageId, item);\n        });\n        \n        // Add keyboard support\n        item.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                const pageId = item.getAttribute('data-page');\n                showPage(pageId, item);\n            }\n        });\n    });\n}\n\nfunction setupKeyboardNavigation() {\n    document.addEventListener('keydown', (e) => {\n        // Alt + number keys for quick navigation\n        if (e.altKey && e.key >= '1' && e.key <= '6') {\n            e.preventDefault();\n            const pageIndex = parseInt(e.key) - 1;\n            const navItems = document.querySelectorAll('.nav-item[data-page]');\n            if (navItems[pageIndex]) {\n                const pageId = navItems[pageIndex].getAttribute('data-page');\n                showPage(pageId, navItems[pageIndex]);\n                navItems[pageIndex].focus();\n            }\n        }\n    });\n}\n\n// =============================================================================\n// STANDALONE DEMO MODE FUNCTION\n// =============================================================================\n\n/**\n * Toggle demo mode - works even if dashboard object fails to initialize\n * Can also be called directly: dashboard.toggleDemoMode()\n */\nfunction toggleDemo() {\n    if (dashboard && typeof dashboard.toggleDemoMode === 'function') {\n        dashboard.toggleDemoMode();\n    } else {\n        console.error('%c✗ DEMO MODE ERROR', 'color: #e74c3c; font-size: 16px; font-weight: bold;');\n        console.error('Dashboard object not initialized or toggleDemoMode method not available');\n        console.error('Check for JavaScript errors above');\n    }\n}\n\n// Add helpful message on load\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');\nconsole.log('%c NAVAIR Dashboard Console', 'color: #3498db; font-size: 14px; font-weight: bold;');\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');\nconsole.log('%cTo enable DEMO MODE for presentation:', 'font-weight: bold;');\nconsole.log('%c  dashboard.toggleDemoMode()', 'color: #27ae60; font-family: monospace;');\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');","structuredPatch":[{"oldStart":308,"oldLines":10,"newStart":308,"newLines":10,"lines":["      * @returns {Object} Mock print data","      */","     generateMockPrintData() {","-        // Simulate print progress","+        // Simulate print progress (11 hours 7 minutes = 667 minutes total)","         this.mockData.printProgress += 0.5;","         if (this.mockData.printProgress > 100) {","-            this.mockData.printProgress = 15; // Reset to new job","+            this.mockData.printProgress = 0; // Reset to new job","         }"," ","         // Quality score varies slightly"]},{"oldStart":319,"oldLines":10,"newStart":319,"newLines":10,"lines":["         this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));"," ","         return {","-            job_name: 'Bracket_Assembly_v3',","+            job_name: 'back_bracket_cover_v4.stl',","             status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',","             progress: Math.round(this.mockData.printProgress),","-            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 2.5)),","+            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 6.67)), // 667 minutes total","             quality_score: this.mockData.qualityScore,","             ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'","         };"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"433e30b5-2700-47d8-a8fa-bd307ce9e8f5","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01VtBJ5DAqNNGacH4vr7iBmi","type":"message","role":"assistant","content":[{"type":"text","text":"Perfect! I've updated the demo mode values in [dashboard.js](navair_additive/web_dashboard/dashboard.js) to match your actual print job:\n\n**Updated values:**\n- **Nozzle temperature**: 252°C (with ±1°C variation, ranging 250-254°C)\n- **Bed temperature**: 85°C (with ±0.5°C variation, ranging 83-87°C)\n- **Print file name**: back_bracket_cover_v4.stl\n- **Print progress**: Starts at 0% (just started)\n- **Total print time**: 11 hours 7 minutes (667 minutes)\n- **Time remaining**: Calculates correctly based on progress\n\nThe demo mode will now show realistic data that matches your actual print job. When you enable demo mode with `dashboard.toggleDemoMode()` in the browser console, you'll see:\n- Nozzle temp around 252°C\n- Bed temp around 85°C\n- Print job name: back_bracket_cover_v4.stl\n- Progress starting from 0% and slowly incrementing\n- Time remaining starting at ~667 minutes and counting down"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":1249,"cache_read_input_tokens":35867,"cache_creation":{"ephemeral_5m_input_tokens":1249,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CUC3A7hJYMVGvb8CTLRme","type":"assistant","uuid":"4345a348-8a37-4eac-b962-b37dbcd35f22","timestamp":"2025-10-17T03:11:19.152Z"}
{"parentUuid":"4345a348-8a37-4eac-b962-b37dbcd35f22","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","type":"user","message":{"role":"user","content":[{"type":"text","text":"<ide_opened_file>The user opened the file /home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js in the IDE. This may or may not be related to the current task.</ide_opened_file>"},{"type":"text","text":"make it countdown at normal rate not like 3 mins per second"}]},"uuid":"cda67654-07c3-4143-b179-cf65c5857c20","timestamp":"2025-10-17T03:12:52.581Z"}
{"parentUuid":"cda67654-07c3-4143-b179-cf65c5857c20","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01Qk3Bpk829pcyiPxSWPV8bo","type":"message","role":"assistant","content":[{"type":"text","text":"I'll adjust the progress increment rate so the time countdown happens at a more realistic pace."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":21606,"cache_read_input_tokens":15786,"cache_creation":{"ephemeral_5m_input_tokens":21606,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CUC3HdQgGM6wsDFdKyTcX","type":"assistant","uuid":"80ad3171-cea5-422c-8cf5-7395f9e95255","timestamp":"2025-10-17T03:12:55.998Z"}
{"parentUuid":"80ad3171-cea5-422c-8cf5-7395f9e95255","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01Qk3Bpk829pcyiPxSWPV8bo","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01UP28emxAVzWpt9x7CFjBY4","name":"Read","input":{"file_path":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js","offset":710,"limit":25}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":21606,"cache_read_input_tokens":15786,"cache_creation":{"ephemeral_5m_input_tokens":21606,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CUC3HdQgGM6wsDFdKyTcX","type":"assistant","uuid":"d8c9b9af-862d-461b-b648-971eebb345c4","timestamp":"2025-10-17T03:12:56.731Z"}
{"parentUuid":"d8c9b9af-862d-461b-b648-971eebb345c4","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01UP28emxAVzWpt9x7CFjBY4","type":"tool_result","content":"   710→\n   711→    startDataFetching() {\n   712→        // Initial fetch\n   713→        this.fetchSensorData();\n   714→        this.fetchPrintStatus();\n   715→        \n   716→        // Show initial errors for all pages\n   717→        this.showAnalysisError();\n   718→        this.showHealthError();\n   719→        this.showQualityError();\n   720→        this.showMaintenanceError();\n   721→\n   722→        // Set up intervals\n   723→        setInterval(() => {\n   724→            this.fetchSensorData();\n   725→            this.updateConnectionStatus();\n   726→        }, this.updateInterval);\n   727→\n   728→        setInterval(() => {\n   729→            this.fetchPrintStatus();\n   730→        }, 5000); // Print status every 5 seconds\n   731→    }\n   732→}\n   733→\n   734→// =============================================================================\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"192ee4e4-72e6-4b90-a800-1d693dfa2b78","timestamp":"2025-10-17T03:12:56.770Z","toolUseResult":{"type":"text","file":{"filePath":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js","content":"\n    startDataFetching() {\n        // Initial fetch\n        this.fetchSensorData();\n        this.fetchPrintStatus();\n        \n        // Show initial errors for all pages\n        this.showAnalysisError();\n        this.showHealthError();\n        this.showQualityError();\n        this.showMaintenanceError();\n\n        // Set up intervals\n        setInterval(() => {\n            this.fetchSensorData();\n            this.updateConnectionStatus();\n        }, this.updateInterval);\n\n        setInterval(() => {\n            this.fetchPrintStatus();\n        }, 5000); // Print status every 5 seconds\n    }\n}\n\n// =============================================================================","numLines":25,"startLine":710,"totalLines":1416}}}
{"parentUuid":"192ee4e4-72e6-4b90-a800-1d693dfa2b78","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_011snmEd2r87wqjRJ9iSdgMW","type":"message","role":"assistant","content":[{"type":"text","text":"Now I need to calculate the correct progress increment. The print status updates every 5 seconds. For an 11 hour 7 minute print (667 minutes = 40,020 seconds):\n- Progress per second: 100% / 40,020 seconds = 0.0025% per second\n- Progress per 5-second update: 0.0025 * 5 = 0.0125% per update"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":458,"cache_read_input_tokens":37392,"cache_creation":{"ephemeral_5m_input_tokens":458,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CUC3HwMvYkL43Q2gERfsq","type":"assistant","uuid":"e6d9e8e7-31e9-468f-97f1-757ff2d01e1e","timestamp":"2025-10-17T03:13:01.771Z"}
{"parentUuid":"e6d9e8e7-31e9-468f-97f1-757ff2d01e1e","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_011snmEd2r87wqjRJ9iSdgMW","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01LjqidLxoLZ2zkKZpxjDe3u","name":"Edit","input":{"file_path":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js","old_string":"    generateMockPrintData() {\n        // Simulate print progress (11 hours 7 minutes = 667 minutes total)\n        this.mockData.printProgress += 0.5;\n        if (this.mockData.printProgress > 100) {\n            this.mockData.printProgress = 0; // Reset to new job\n        }\n\n        // Quality score varies slightly\n        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n\n        return {\n            job_name: 'back_bracket_cover_v4.stl',\n            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n            progress: Math.round(this.mockData.printProgress),\n            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 6.67)), // 667 minutes total\n            quality_score: this.mockData.qualityScore,\n            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n        };\n    }","new_string":"    generateMockPrintData() {\n        // Simulate print progress (11 hours 7 minutes = 667 minutes = 40,020 seconds)\n        // Print status updates every 5 seconds\n        // Progress increment per update: 100% / (40,020 / 5) = 0.0125% per 5 seconds\n        this.mockData.printProgress += 0.0125;\n        if (this.mockData.printProgress > 100) {\n            this.mockData.printProgress = 0; // Reset to new job\n        }\n\n        // Quality score varies slightly\n        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n\n        // Calculate time remaining in minutes based on actual progress\n        const totalMinutes = 667; // 11 hours 7 minutes\n        const remainingMinutes = Math.round(totalMinutes * (100 - this.mockData.printProgress) / 100);\n\n        return {\n            job_name: 'back_bracket_cover_v4.stl',\n            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n            progress: this.mockData.printProgress.toFixed(1), // Show decimal for slow progress\n            time_remaining: Math.max(0, remainingMinutes),\n            quality_score: this.mockData.qualityScore,\n            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n        };\n    }"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":458,"cache_read_input_tokens":37392,"cache_creation":{"ephemeral_5m_input_tokens":458,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CUC3HwMvYkL43Q2gERfsq","type":"assistant","uuid":"c7331d21-8fa4-4e6c-b723-9844a1c0237b","timestamp":"2025-10-17T03:13:09.127Z"}
{"parentUuid":"c7331d21-8fa4-4e6c-b723-9844a1c0237b","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01LjqidLxoLZ2zkKZpxjDe3u","type":"tool_result","content":"The file /home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   306→    /**\n   307→     * Generate mock print status data\n   308→     * @returns {Object} Mock print data\n   309→     */\n   310→    generateMockPrintData() {\n   311→        // Simulate print progress (11 hours 7 minutes = 667 minutes = 40,020 seconds)\n   312→        // Print status updates every 5 seconds\n   313→        // Progress increment per update: 100% / (40,020 / 5) = 0.0125% per 5 seconds\n   314→        this.mockData.printProgress += 0.0125;\n   315→        if (this.mockData.printProgress > 100) {\n   316→            this.mockData.printProgress = 0; // Reset to new job\n   317→        }\n   318→\n   319→        // Quality score varies slightly\n   320→        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n   321→        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n   322→\n   323→        // Calculate time remaining in minutes based on actual progress\n   324→        const totalMinutes = 667; // 11 hours 7 minutes\n   325→        const remainingMinutes = Math.round(totalMinutes * (100 - this.mockData.printProgress) / 100);\n   326→\n   327→        return {\n   328→            job_name: 'back_bracket_cover_v4.stl',\n   329→            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n   330→            progress: this.mockData.printProgress.toFixed(1), // Show decimal for slow progress\n   331→            time_remaining: Math.max(0, remainingMinutes),\n   332→            quality_score: this.mockData.qualityScore,\n   333→            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n   334→        };\n   335→    }\n   336→\n   337→    /**\n   338→     * Generate mock system health data\n   339→     * @returns {Object} Mock health data"}]},"uuid":"b0b092ca-752c-4e5c-9676-a387c2d6d680","timestamp":"2025-10-17T03:13:14.613Z","toolUseResult":{"filePath":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project/navair_additive/web_dashboard/dashboard.js","oldString":"    generateMockPrintData() {\n        // Simulate print progress (11 hours 7 minutes = 667 minutes total)\n        this.mockData.printProgress += 0.5;\n        if (this.mockData.printProgress > 100) {\n            this.mockData.printProgress = 0; // Reset to new job\n        }\n\n        // Quality score varies slightly\n        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n\n        return {\n            job_name: 'back_bracket_cover_v4.stl',\n            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n            progress: Math.round(this.mockData.printProgress),\n            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 6.67)), // 667 minutes total\n            quality_score: this.mockData.qualityScore,\n            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n        };\n    }","newString":"    generateMockPrintData() {\n        // Simulate print progress (11 hours 7 minutes = 667 minutes = 40,020 seconds)\n        // Print status updates every 5 seconds\n        // Progress increment per update: 100% / (40,020 / 5) = 0.0125% per 5 seconds\n        this.mockData.printProgress += 0.0125;\n        if (this.mockData.printProgress > 100) {\n            this.mockData.printProgress = 0; // Reset to new job\n        }\n\n        // Quality score varies slightly\n        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n\n        // Calculate time remaining in minutes based on actual progress\n        const totalMinutes = 667; // 11 hours 7 minutes\n        const remainingMinutes = Math.round(totalMinutes * (100 - this.mockData.printProgress) / 100);\n\n        return {\n            job_name: 'back_bracket_cover_v4.stl',\n            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n            progress: this.mockData.printProgress.toFixed(1), // Show decimal for slow progress\n            time_remaining: Math.max(0, remainingMinutes),\n            quality_score: this.mockData.qualityScore,\n            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n        };\n    }","originalFile":"/**\n * NAVAIR Additive Manufacturing Dashboard\n * \n * A modern, professional web dashboard for monitoring NAVAIR 3D printer operations\n * with real-time data visualization, system health monitoring, and quality analytics.\n * \n * @version 2.0\n * @author NAVAIR Team\n * @created January 2025\n * \n * Features:\n * - Real-time sensor monitoring with gauges and charts\n * - Multi-page navigation with accessibility support\n * - API integration with comprehensive error handling\n * - Responsive design for mobile and desktop\n * - Professional UI with loading states and animations\n */\n\n/**\n * Main Dashboard Controller Class\n * \n * Manages all dashboard functionality including:\n * - API communication and data fetching\n * - Chart rendering and updates\n * - UI state management\n * - Error handling and user feedback\n */\nclass NAVAIRDashboard {\n    /**\n     * Initialize dashboard with configuration and state\n     */\n    constructor() {\n        this.apiBaseUrl = 'http://localhost:8000/api';\n        this.updateInterval = 2000; // 2 seconds\n        this.charts = {};\n        this.gauges = {};\n        this.isConnected = {\n            sensors: false,\n            print: false\n        };\n        this.sensorHistory = [];\n        this.maxHistoryPoints = 50;\n\n        // Demo mode for presentations\n        this.demoMode = false;\n        this.mockData = {\n            nozzleTemp: 252,\n            bedTemp: 85,\n            humidity: 45,\n            pressure: 1013,\n            ambientTemp: 22,\n            bedVibration: { x: 0.02, y: 0.015, z: 0.01 },\n            bodyVibration: { x: 0.03, y: 0.025, z: 0.015 },\n            printProgress: 0,\n            qualityScore: 0.92\n        };\n\n        this.init();\n    }\n\n    /**\n     * Initialize dashboard components and start data fetching\n     */\n    async init() {\n        try {\n            this.setupGauges();\n        } catch (error) {\n            console.error('Error setting up gauges:', error);\n        }\n\n        try {\n            this.setupCharts();\n        } catch (error) {\n            console.error('Error setting up charts:', error);\n        }\n\n        try {\n            this.startDataFetching();\n            this.updateConnectionStatus();\n        } catch (error) {\n            console.error('Error starting data fetching:', error);\n        }\n\n        console.log('Dashboard initialized successfully');\n    }\n\n    // =============================================================================\n    // CHART AND GAUGE SETUP METHODS\n    // =============================================================================\n\n    /**\n     * Setup gauges - simplified to just use text displays\n     */\n    setupGauges() {\n        // Gauges removed - using simple text display instead\n        console.log('Using simplified text-based display (gauges disabled)');\n    }\n\n    /**\n     * Setup line charts for vibration and historical data\n     */\n    setupCharts() {\n        // Vibration Chart\n        const vibCtx = document.getElementById('vibration-chart');\n        if (vibCtx) {\n            this.charts.vibration = new Chart(vibCtx, {\n                type: 'line',\n                data: {\n                    labels: [],\n                    datasets: [{\n                        label: 'Bed Vibration',\n                        data: [],\n                        borderColor: '#e74c3c',\n                        backgroundColor: 'rgba(231, 76, 60, 0.1)',\n                        tension: 0.4\n                    }, {\n                        label: 'Body Vibration',\n                        data: [],\n                        borderColor: '#3498db',\n                        backgroundColor: 'rgba(52, 152, 219, 0.1)',\n                        tension: 0.4\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        intersect: false,\n                        mode: 'index'\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            title: {\n                                display: true,\n                                text: 'Vibration (mm/s²)'\n                            }\n                        },\n                        x: {\n                            title: {\n                                display: true,\n                                text: 'Time'\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            display: true,\n                            position: 'top'\n                        }\n                    }\n                }\n            });\n        }\n\n        // Historical Data Chart\n        const historyCtx = document.getElementById('history-chart');\n        if (historyCtx) {\n            this.charts.history = new Chart(historyCtx, {\n                type: 'line',\n                data: {\n                    labels: [],\n                    datasets: [{\n                        label: 'Nozzle Temp (°C)',\n                        data: [],\n                        borderColor: '#e74c3c',\n                        backgroundColor: 'rgba(231, 76, 60, 0.1)',\n                        yAxisID: 'y'\n                    }, {\n                        label: 'Bed Temp (°C)',\n                        data: [],\n                        borderColor: '#e67e22',\n                        backgroundColor: 'rgba(230, 126, 34, 0.1)',\n                        yAxisID: 'y'\n                    }, {\n                        label: 'Humidity (%)',\n                        data: [],\n                        borderColor: '#3498db',\n                        backgroundColor: 'rgba(52, 152, 219, 0.1)',\n                        yAxisID: 'y1'\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        intersect: false,\n                        mode: 'index'\n                    },\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            display: true,\n                            position: 'left',\n                            title: {\n                                display: true,\n                                text: 'Temperature (°C)'\n                            }\n                        },\n                        y1: {\n                            type: 'linear',\n                            display: true,\n                            position: 'right',\n                            title: {\n                                display: true,\n                                text: 'Humidity (%)'\n                            },\n                            grid: {\n                                drawOnChartArea: false,\n                            },\n                        },\n                        x: {\n                            title: {\n                                display: true,\n                                text: 'Time'\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            display: true,\n                            position: 'top'\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    // =============================================================================\n    // DEMO MODE METHODS\n    // =============================================================================\n\n    /**\n     * Toggle demo mode on/off\n     */\n    toggleDemoMode() {\n        this.demoMode = !this.demoMode;\n\n        if (this.demoMode) {\n            // Immediately update connection status and fetch mock data\n            this.setConnectionStatus('sensors', true);\n            this.setConnectionStatus('print', true);\n\n            // Fetch mock data immediately\n            this.fetchSensorData();\n            this.fetchPrintStatus();\n\n            console.log('%c✓ DEMO MODE ENABLED', 'color: #27ae60; font-size: 16px; font-weight: bold;');\n            console.log('The dashboard will now display realistic mock data.');\n            console.log('To disable: dashboard.toggleDemoMode()');\n        } else {\n            console.log('%c✗ DEMO MODE DISABLED', 'color: #e74c3c; font-size: 16px; font-weight: bold;');\n        }\n    }\n\n    /**\n     * Generate realistic mock sensor data with natural variations\n     * @returns {Object} Mock sensor data\n     */\n    generateMockSensorData() {\n        // Add realistic variations to mock data\n        this.mockData.nozzleTemp += (Math.random() - 0.5) * 2; // ±1°C variation\n        this.mockData.nozzleTemp = Math.max(250, Math.min(254, this.mockData.nozzleTemp));\n\n        this.mockData.bedTemp += (Math.random() - 0.5) * 1; // ±0.5°C variation\n        this.mockData.bedTemp = Math.max(83, Math.min(87, this.mockData.bedTemp));\n\n        this.mockData.humidity += (Math.random() - 0.5) * 3; // ±1.5% variation\n        this.mockData.humidity = Math.max(40, Math.min(50, this.mockData.humidity));\n\n        this.mockData.pressure += (Math.random() - 0.5) * 2;\n        this.mockData.pressure = Math.max(1010, Math.min(1016, this.mockData.pressure));\n\n        this.mockData.ambientTemp += (Math.random() - 0.5) * 0.5;\n        this.mockData.ambientTemp = Math.max(20, Math.min(24, this.mockData.ambientTemp));\n\n        // Vibration with small random variations\n        this.mockData.bedVibration = {\n            x: 0.02 + (Math.random() - 0.5) * 0.01,\n            y: 0.015 + (Math.random() - 0.5) * 0.01,\n            z: 0.01 + (Math.random() - 0.5) * 0.005\n        };\n\n        this.mockData.bodyVibration = {\n            x: 0.03 + (Math.random() - 0.5) * 0.015,\n            y: 0.025 + (Math.random() - 0.5) * 0.015,\n            z: 0.015 + (Math.random() - 0.5) * 0.01\n        };\n\n        return {\n            temperature: {\n                nozzle: this.mockData.nozzleTemp,\n                bed: this.mockData.bedTemp,\n                ambient: this.mockData.ambientTemp\n            },\n            humidity: this.mockData.humidity,\n            pressure: this.mockData.pressure,\n            vibration: {\n                bed: this.mockData.bedVibration,\n                body: this.mockData.bodyVibration\n            }\n        };\n    }\n\n    /**\n     * Generate mock print status data\n     * @returns {Object} Mock print data\n     */\n    generateMockPrintData() {\n        // Simulate print progress (11 hours 7 minutes = 667 minutes total)\n        this.mockData.printProgress += 0.5;\n        if (this.mockData.printProgress > 100) {\n            this.mockData.printProgress = 0; // Reset to new job\n        }\n\n        // Quality score varies slightly\n        this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;\n        this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));\n\n        return {\n            job_name: 'back_bracket_cover_v4.stl',\n            status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',\n            progress: Math.round(this.mockData.printProgress),\n            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 6.67)), // 667 minutes total\n            quality_score: this.mockData.qualityScore,\n            ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'\n        };\n    }\n\n    /**\n     * Generate mock system health data\n     * @returns {Object} Mock health data\n     */\n    generateMockHealthData() {\n        return {\n            cpu_temp: 45 + Math.random() * 10,\n            memory_usage: 55 + Math.random() * 15,\n            disk_free: 128 + Math.random() * 5,\n            cpu_usage: 30 + Math.random() * 20,\n            network_status: 'Connected'\n        };\n    }\n\n    // =============================================================================\n    // API COMMUNICATION METHODS\n    // =============================================================================\n\n    /**\n     * Fetch current sensor data from API with proper error handling\n     * @returns {Object|null} Sensor data or null on error\n     */\n    async fetchSensorData() {\n        // Use mock data in demo mode\n        if (this.demoMode) {\n            const mockData = this.generateMockSensorData();\n            this.updateSensorData(mockData);\n            this.setConnectionStatus('sensors', true);\n            return mockData;\n        }\n\n        // Show loading states\n        this.setLoadingState('nozzle-temp-value');\n        this.setLoadingState('bed-temp-value');\n        this.setLoadingState('humidity-value');\n\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() => controller.abort(), 5000);\n\n            const response = await fetch(`${this.apiBaseUrl}/sensors/current`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                signal: controller.signal\n            });\n\n            clearTimeout(timeoutId);\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            this.updateSensorData(data);\n            this.setConnectionStatus('sensors', true);\n            return data;\n\n        } catch (error) {\n            console.error('Sensor API Error:', error);\n            this.setConnectionStatus('sensors', false);\n\n            let errorMessage = 'Unable to connect to sensor API';\n            if (error.name === 'AbortError') {\n                errorMessage = 'Sensor API request timed out';\n            } else if (!navigator.onLine) {\n                errorMessage = 'No internet connection';\n            }\n\n            this.showSensorError(errorMessage);\n            return null;\n        }\n    }\n\n    async fetchPrintStatus() {\n        // Use mock data in demo mode\n        if (this.demoMode) {\n            const mockData = this.generateMockPrintData();\n            this.updatePrintData(mockData);\n            this.setConnectionStatus('print', true);\n            return mockData;\n        }\n\n        try {\n            const response = await fetch(`${this.apiBaseUrl}/print/status`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                timeout: 5000\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            this.updatePrintData(data);\n            this.setConnectionStatus('print', true);\n            return data;\n\n        } catch (error) {\n            console.error('Print API Error:', error);\n            this.setConnectionStatus('print', false);\n            this.showPrintError('Unable to connect to print API');\n            return null;\n        }\n    }\n\n    updateSensorData(data) {\n        if (!data || !data.temperature) {\n            this.showSensorError('Invalid sensor data received');\n            this.showAnalysisError();\n            this.showHealthError();\n            this.showQualityError();\n            return;\n        }\n\n        // Update temperature values (no gauges, just text)\n        if (data.temperature.nozzle !== undefined) {\n            const nozzleTemp = parseFloat(data.temperature.nozzle);\n            this.updateElement('nozzle-temp-value', `${nozzleTemp.toFixed(1)}°C`);\n        }\n\n        if (data.temperature.bed !== undefined) {\n            const bedTemp = parseFloat(data.temperature.bed);\n            this.updateElement('bed-temp-value', `${bedTemp.toFixed(1)}°C`);\n        }\n\n        // Update environmental data\n        if (data.humidity !== undefined) {\n            this.updateElement('humidity-value', `${parseFloat(data.humidity).toFixed(1)}%`);\n        }\n        \n        if (data.pressure !== undefined) {\n            this.updateElement('pressure-value', `${parseFloat(data.pressure).toFixed(1)} hPa`);\n        }\n        \n        if (data.temperature.ambient !== undefined) {\n            this.updateElement('ambient-temp-value', `${parseFloat(data.temperature.ambient).toFixed(1)}°C`);\n        }\n\n        // Update vibration data\n        if (data.vibration) {\n            const bedVib = this.calculateVibrationMagnitude(data.vibration.bed) * 1000;\n            const bodyVib = this.calculateVibrationMagnitude(data.vibration.body) * 1000;\n            \n            this.updateElement('bed-vibration-value', `${bedVib.toFixed(2)} mm/s²`);\n            this.updateElement('body-vibration-value', `${bodyVib.toFixed(2)} mm/s²`);\n            \n            this.updateVibrationChart(bedVib, bodyVib);\n        }\n\n        // Store historical data\n        this.addToHistory(data);\n        this.updateHistoryChart();\n    }\n\n    updatePrintData(data) {\n        if (!data) {\n            this.showPrintError('Invalid print data received');\n            return;\n        }\n\n        this.updateElement('job-name', data.job_name || 'No active job');\n        this.updateElement('job-status', data.status || 'Unknown');\n        this.updateElement('job-progress', `${data.progress || 0}%`);\n        this.updateElement('time-remaining', data.time_remaining ? `${data.time_remaining}m` : '--');\n\n        // Update quality score (no gauge, just text)\n        if (data.quality_score !== undefined) {\n            const qualityScore = Math.round(data.quality_score * 100);\n            this.updateElement('quality-value', `${qualityScore}%`);\n        }\n\n        this.updateElement('ml-prediction', data.ml_prediction || 'No prediction');\n    }\n\n    calculateVibrationMagnitude(vibData) {\n        if (!vibData || typeof vibData.x !== 'number') return 0;\n        return Math.sqrt(\n            Math.pow(vibData.x, 2) + \n            Math.pow(vibData.y, 2) + \n            Math.pow(vibData.z, 2)\n        );\n    }\n\n    addToHistory(data) {\n        const timestamp = new Date();\n        const historyPoint = {\n            timestamp: timestamp,\n            nozzleTemp: data.temperature?.nozzle || 0,\n            bedTemp: data.temperature?.bed || 0,\n            humidity: data.humidity || 0\n        };\n\n        this.sensorHistory.push(historyPoint);\n        \n        // Keep only last N points\n        if (this.sensorHistory.length > this.maxHistoryPoints) {\n            this.sensorHistory.shift();\n        }\n    }\n\n    updateVibrationChart(bedVib, bodyVib) {\n        if (!this.charts.vibration) return;\n\n        const timestamp = new Date().toLocaleTimeString();\n        const chart = this.charts.vibration;\n\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(bedVib);\n        chart.data.datasets[1].data.push(bodyVib);\n\n        // Keep only last 20 points\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n    }\n\n    updateHistoryChart() {\n        if (!this.charts.history || this.sensorHistory.length === 0) return;\n\n        const chart = this.charts.history;\n        const labels = this.sensorHistory.map(point => point.timestamp.toLocaleTimeString());\n        \n        chart.data.labels = labels;\n        chart.data.datasets[0].data = this.sensorHistory.map(point => point.nozzleTemp);\n        chart.data.datasets[1].data = this.sensorHistory.map(point => point.bedTemp);\n        chart.data.datasets[2].data = this.sensorHistory.map(point => point.humidity);\n\n        chart.update('none');\n    }\n\n    setConnectionStatus(type, connected) {\n        this.isConnected[type] = connected;\n        this.showConnectionStatus(type, connected);\n    }\n\n    updateConnectionStatus() {\n        this.updateElement('last-update', new Date().toLocaleTimeString());\n    }\n\n    showSensorError(message) {\n        this.updateElement('nozzle-temp-value', 'API Error', 'error');\n        this.updateElement('bed-temp-value', 'API Error', 'error');\n        this.updateElement('humidity-value', 'API Error', 'error');\n        this.updateElement('pressure-value', 'API Error', 'error');\n        this.updateElement('ambient-temp-value', 'API Error', 'error');\n        this.updateElement('bed-vibration-value', 'API Error', 'error');\n        this.updateElement('body-vibration-value', 'API Error', 'error');\n        this.showConnectionStatus('sensors', false, message);\n    }\n\n    showPrintError(message) {\n        this.updateElement('job-name', 'API Connection Failed', 'error');\n        this.updateElement('job-status', 'Disconnected', 'error');\n        this.updateElement('job-progress', 'API Error', 'error');\n        this.updateElement('time-remaining', 'No Connection', 'error');\n        this.updateElement('quality-value', 'API Error', 'error');\n        this.updateElement('ml-prediction', 'No connection', 'error');\n        this.showConnectionStatus('print', false, message);\n        this.showQualityError();\n    }\n\n    showAnalysisError() {\n        this.updateElement('correlation-status', 'API Not Connected');\n        this.updateElement('anomaly-count', 'No Data Available');\n        this.updateElement('prediction-accuracy', 'API Error');\n        this.updateElement('process-capability', 'No Connection');\n        this.updateElement('ml-confidence', 'API Error');\n        this.updateElement('training-accuracy', 'No Data');\n        this.updateElement('failure-risk', 'API Not Available');\n        this.updateElement('quality-risk', 'No Connection');\n    }\n\n    showHealthError() {\n        this.updateElement('cpu-temp', 'API Error');\n        this.updateElement('memory-usage', 'API Error');\n        this.updateElement('disk-usage', 'API Error');\n        this.updateElement('network-status', 'Disconnected');\n        this.updateElement('bme280-status', 'API Error');\n        this.updateElement('mpu-bed-status', 'API Error');\n        this.updateElement('mpu-body-status', 'API Error');\n        this.updateElement('laser-status', 'API Error');\n    }\n\n    showQualityError() {\n        this.updateElement('overall-quality', 'API Not Available');\n        this.updateElement('successful-prints', 'No Data');\n        this.updateElement('avg-print-time', 'API Error');\n        this.updateElement('material-efficiency', 'No Connection');\n        this.updateElement('critical-failures', 'API Error');\n        this.updateElement('medium-risk', 'API Error');\n        this.updateElement('low-risk', 'API Error');\n        this.updateElement('rpn-average', 'No Data');\n    }\n\n    showMaintenanceError() {\n        this.updateElement('next-calibration', 'API Error');\n        this.updateElement('sensor-cleaning', 'No Data Available');\n        this.updateElement('filter-replacement', 'API Error');\n        this.updateElement('system-backup', 'API Not Connected');\n        this.updateElement('last-bme280-cal', 'API Error');\n        this.updateElement('last-mpu-cal', 'API Error');\n        this.updateElement('laser-check', 'No Data');\n        this.updateElement('drift-compensation', 'API Error');\n    }\n\n    // =============================================================================\n    // UI UPDATE AND STATE MANAGEMENT METHODS\n    // =============================================================================\n    \n    /**\n     * Update DOM element with value and optional CSS class\n     * @param {string} id - Element ID\n     * @param {string} value - Text content to set\n     * @param {string} className - Optional CSS class to add\n     */\n    updateElement(id, value, className = '') {\n        const element = document.getElementById(id);\n        if (element) {\n            element.textContent = value;\n            \n            // Remove existing state classes\n            element.classList.remove('loading', 'error', 'success');\n            \n            // Add new class if specified\n            if (className) {\n                element.classList.add(className);\n            }\n        }\n    }\n\n    setLoadingState(id, loading = true) {\n        const element = document.getElementById(id);\n        if (element) {\n            if (loading) {\n                element.classList.add('loading');\n                element.textContent = 'Loading...';\n            } else {\n                element.classList.remove('loading');\n            }\n        }\n    }\n\n    showConnectionStatus(type, connected, details = '') {\n        const statusDot = document.getElementById(`${type}-status`);\n        const statusText = document.getElementById(`${type}-connection`);\n        \n        if (statusDot) {\n            statusDot.className = `status-dot ${connected ? 'connected' : 'disconnected'}`;\n            statusDot.setAttribute('aria-label', connected ? 'Connected' : 'Disconnected');\n        }\n        \n        if (statusText) {\n            const status = connected ? 'Connected' : 'Disconnected';\n            statusText.textContent = details ? `${status} - ${details}` : status;\n            statusText.className = `connection-status ${connected ? 'connected' : 'disconnected'}`;\n        }\n    }\n\n    showAlert(message, type = 'error') {\n        const alert = document.getElementById(`${type}-alert`);\n        if (alert) {\n            alert.textContent = message;\n            alert.style.display = 'block';\n            setTimeout(() => {\n                alert.style.display = 'none';\n            }, 5000);\n        }\n    }\n\n    startDataFetching() {\n        // Initial fetch\n        this.fetchSensorData();\n        this.fetchPrintStatus();\n        \n        // Show initial errors for all pages\n        this.showAnalysisError();\n        this.showHealthError();\n        this.showQualityError();\n        this.showMaintenanceError();\n\n        // Set up intervals\n        setInterval(() => {\n            this.fetchSensorData();\n            this.updateConnectionStatus();\n        }, this.updateInterval);\n\n        setInterval(() => {\n            this.fetchPrintStatus();\n        }, 5000); // Print status every 5 seconds\n    }\n}\n\n// =============================================================================\n// CONTROL FUNCTIONS - System Control Actions\n// =============================================================================\n\n/**\n * Emergency stop function - immediately halts printer operation\n */\nasync function emergencyStop() {\n    dashboard.showAlert('Emergency stop activated!', 'error');\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/emergency_stop`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Emergency stop successful', 'success');\n        }\n    } catch (error) {\n        console.error('Emergency stop failed:', error);\n    }\n}\n\nasync function pauseResume() {\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/pause_resume`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Pause/Resume command sent', 'success');\n        }\n    } catch (error) {\n        console.error('Pause/Resume failed:', error);\n        dashboard.showAlert('Unable to send pause/resume command', 'error');\n    }\n}\n\nasync function calibrateSensors() {\n    dashboard.showAlert('Starting sensor calibration...', 'success');\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/controls/calibrate`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n            dashboard.showAlert('Sensor calibration initiated', 'success');\n        }\n    } catch (error) {\n        console.error('Calibration failed:', error);\n        dashboard.showAlert('Unable to start calibration', 'error');\n    }\n}\n\nasync function exportData() {\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/data/export`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' }\n        });\n        if (response.ok) {\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `navair_data_${new Date().toISOString().split('T')[0]}.json`;\n            a.click();\n            dashboard.showAlert('Data export completed', 'success');\n        }\n    } catch (error) {\n        console.error('Export failed:', error);\n        dashboard.showAlert('Unable to export data', 'error');\n    }\n}\n\n// =============================================================================\n// PAGE NAVIGATION SYSTEM\n// =============================================================================\n\n/**\n * Show specified page and update navigation state\n * @param {string} pageId - ID of page to show\n * @param {HTMLElement} element - Navigation element that was clicked\n */\nfunction showPage(pageId, element) {\n    // Hide all pages and update ARIA attributes\n    const pages = document.querySelectorAll('.page');\n    pages.forEach(page => {\n        page.classList.remove('active');\n        page.setAttribute('aria-hidden', 'true');\n    });\n    \n    // Show selected page\n    const selectedPage = document.getElementById(pageId + '-page');\n    if (selectedPage) {\n        selectedPage.classList.add('active');\n        selectedPage.setAttribute('aria-hidden', 'false');\n    }\n    \n    // Update navigation ARIA attributes\n    const navItems = document.querySelectorAll('.nav-item');\n    navItems.forEach(item => {\n        item.classList.remove('active');\n        item.setAttribute('aria-selected', 'false');\n        item.setAttribute('tabindex', '-1');\n    });\n    \n    if (element) {\n        element.classList.add('active');\n        element.setAttribute('aria-selected', 'true');\n        element.setAttribute('tabindex', '0');\n    }\n    \n    // Initialize page-specific content\n    initializePage(pageId);\n    \n    // Update page title\n    updatePageTitle(pageId);\n}\n\nfunction updatePageTitle(pageId) {\n    const titles = {\n        'dashboard': 'Dashboard',\n        'analysis': 'Analysis',\n        'health': 'System Health',\n        'quality': 'Quality Reports',\n        'maintenance': 'Maintenance',\n        'settings': 'Settings'\n    };\n    document.title = `NAVAIR Monitor - ${titles[pageId] || 'Dashboard'}`;\n}\n\nfunction initializePage(pageId) {\n    switch(pageId) {\n        case 'analysis':\n            setupAnalysisCharts();\n            break;\n        case 'health':\n            setupHealthMonitoring();\n            break;\n        case 'quality':\n            setupQualityCharts();\n            break;\n        case 'maintenance':\n            updateMaintenanceStatus();\n            break;\n        case 'settings':\n            loadSettings();\n            break;\n    }\n}\n\n// Analysis Page Functions\nfunction setupAnalysisCharts() {\n    // Populate analysis metrics in demo mode\n    if (dashboard && dashboard.demoMode) {\n        document.getElementById('correlation-status').textContent = 'Positive (0.78)';\n        document.getElementById('anomaly-count').textContent = '3 detected';\n        document.getElementById('prediction-accuracy').textContent = '96.4%';\n        document.getElementById('process-capability').textContent = '1.45 (Capable)';\n        document.getElementById('ml-confidence').textContent = '94.2%';\n        document.getElementById('training-accuracy').textContent = '96.4%';\n        document.getElementById('failure-risk').textContent = 'Low (12%)';\n        document.getElementById('quality-risk').textContent = 'Very Low (5%)';\n    }\n\n    // Correlation Chart\n    const correlationCtx = document.getElementById('correlation-chart');\n    if (correlationCtx && !correlationCtx.chart) {\n        correlationCtx.chart = new Chart(correlationCtx, {\n            type: 'scatter',\n            data: {\n                datasets: [{\n                    label: 'Temperature vs Quality',\n                    data: generateCorrelationData(),\n                    backgroundColor: 'rgba(52, 152, 219, 0.5)',\n                    borderColor: '#3498db'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    x: {\n                        title: {\n                            display: true,\n                            text: 'Temperature (°C)'\n                        }\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: 'Quality Score'\n                        },\n                        min: 0,\n                        max: 1\n                    }\n                }\n            }\n        });\n    }\n\n    // ML Performance Chart\n    const mlCtx = document.getElementById('ml-performance-chart');\n    if (mlCtx && !mlCtx.chart) {\n        mlCtx.chart = new Chart(mlCtx, {\n            type: 'line',\n            data: {\n                labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7'],\n                datasets: [{\n                    label: 'Accuracy',\n                    data: [85, 87, 89, 92, 94, 96, 96.4],\n                    borderColor: '#27ae60',\n                    backgroundColor: 'rgba(39, 174, 96, 0.1)'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: false,\n                        min: 80,\n                        max: 100,\n                        title: {\n                            display: true,\n                            text: 'Accuracy (%)'\n                        }\n                    }\n                }\n            }\n        });\n    }\n}\n\nfunction generateCorrelationData() {\n    // Generate mock correlation data in demo mode\n    if (dashboard && dashboard.demoMode) {\n        const mockPoints = [];\n        for (let i = 0; i < 30; i++) {\n            mockPoints.push({\n                x: 200 + Math.random() * 25,\n                y: 0.85 + Math.random() * 0.13\n            });\n        }\n        return mockPoints;\n    }\n\n    // Only generate data if APIs are connected\n    if (!dashboard || (!dashboard.isConnected.sensors && !dashboard.isConnected.print)) {\n        return [{ x: 0, y: 0, label: 'No API Connection' }];\n    }\n\n    // Use actual historical data if available\n    if (dashboard.sensorHistory.length > 0) {\n        return dashboard.sensorHistory.map(point => ({\n            x: point.nozzleTemp || 0,\n            y: (point.qualityScore || 0) / 100\n        }));\n    }\n\n    return [{ x: 0, y: 0, label: 'No Historical Data' }];\n}\n\n// Health Monitoring Functions\nfunction setupHealthMonitoring() {\n    updateSystemHealth();\n    \n    const perfCtx = document.getElementById('performance-chart');\n    if (perfCtx && !perfCtx.chart) {\n        perfCtx.chart = new Chart(perfCtx, {\n            type: 'line',\n            data: {\n                labels: [],\n                datasets: [{\n                    label: 'CPU Usage (%)',\n                    data: [],\n                    borderColor: '#e74c3c',\n                    backgroundColor: 'rgba(231, 76, 60, 0.1)'\n                }, {\n                    label: 'Memory Usage (%)',\n                    data: [],\n                    borderColor: '#3498db',\n                    backgroundColor: 'rgba(52, 152, 219, 0.1)'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        max: 100,\n                        title: {\n                            display: true,\n                            text: 'Usage (%)'\n                        }\n                    }\n                }\n            }\n        });\n        \n        // Simulate real-time performance data\n        setInterval(() => {\n            updatePerformanceChart(perfCtx.chart);\n        }, 5000);\n    }\n}\n\nasync function updateSystemHealth() {\n    // Use mock data in demo mode\n    if (dashboard.demoMode) {\n        const mockData = dashboard.generateMockHealthData();\n        document.getElementById('cpu-temp').textContent = `${mockData.cpu_temp.toFixed(1)}°C`;\n        document.getElementById('memory-usage').textContent = `${mockData.memory_usage.toFixed(1)}%`;\n        document.getElementById('disk-usage').textContent = `${mockData.disk_free.toFixed(1)}GB free`;\n        document.getElementById('network-status').textContent = mockData.network_status;\n        document.getElementById('bme280-status').textContent = 'Operational';\n        document.getElementById('mpu-bed-status').textContent = 'Operational';\n        document.getElementById('mpu-body-status').textContent = 'Operational';\n        document.getElementById('laser-status').textContent = 'Operational';\n        return;\n    }\n\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/system/health`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' },\n            timeout: 5000\n        });\n\n        if (!response.ok) {\n            throw new Error('API connection failed');\n        }\n\n        const data = await response.json();\n\n        document.getElementById('cpu-temp').textContent = data.cpu_temp ? `${data.cpu_temp}°C` : 'No Data';\n        document.getElementById('memory-usage').textContent = data.memory_usage ? `${data.memory_usage}%` : 'No Data';\n        document.getElementById('disk-usage').textContent = data.disk_free ? `${data.disk_free}GB free` : 'No Data';\n\n    } catch (error) {\n        console.error('System Health API Error:', error);\n        document.getElementById('cpu-temp').textContent = 'API Error';\n        document.getElementById('memory-usage').textContent = 'API Error';\n        document.getElementById('disk-usage').textContent = 'API Error';\n    }\n}\n\nasync function updatePerformanceChart(chart) {\n    const timestamp = new Date().toLocaleTimeString();\n\n    // Use mock data in demo mode\n    if (dashboard.demoMode) {\n        const mockData = dashboard.generateMockHealthData();\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(mockData.cpu_usage);\n        chart.data.datasets[1].data.push(mockData.memory_usage);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n        return;\n    }\n\n    try {\n        const response = await fetch(`${dashboard.apiBaseUrl}/system/performance`, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' },\n            timeout: 5000\n        });\n\n        if (!response.ok) {\n            throw new Error('Performance API connection failed');\n        }\n\n        const data = await response.json();\n\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(data.cpu_usage || 0);\n        chart.data.datasets[1].data.push(data.memory_usage || 0);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n\n    } catch (error) {\n        console.error('Performance Chart Error:', error);\n        // Don't update chart if API is not available\n        chart.data.labels.push(timestamp);\n        chart.data.datasets[0].data.push(null);\n        chart.data.datasets[1].data.push(null);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n            chart.data.datasets[1].data.shift();\n        }\n\n        chart.update('none');\n    }\n}\n\n// Quality Page Functions\nfunction setupQualityCharts() {\n    // Populate quality metrics in demo mode\n    if (dashboard && dashboard.demoMode) {\n        document.getElementById('overall-quality').textContent = '92.3%';\n        document.getElementById('successful-prints').textContent = '';\n        document.getElementById('avg-print-time').textContent = '3h 24m';\n        document.getElementById('material-efficiency').textContent = '94.7%';\n        document.getElementById('critical-failures').textContent = '2';\n        document.getElementById('medium-risk').textContent = '8';\n        document.getElementById('low-risk').textContent = '15';\n        document.getElementById('rpn-average').textContent = '34.2';\n    }\n\n    const qualityCtx = document.getElementById('quality-distribution-chart');\n    if (qualityCtx && !qualityCtx.chart) {\n        qualityCtx.chart = new Chart(qualityCtx, {\n            type: 'doughnut',\n            data: {\n                labels: ['Excellent', 'Good', 'Fair', 'Poor'],\n                datasets: [{\n                    data: [65, 25, 8, 2],\n                    backgroundColor: [\n                        '#27ae60',\n                        '#f39c12',\n                        '#e67e22',\n                        '#e74c3c'\n                    ]\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n}\n\n// Maintenance Functions\nfunction updateMaintenanceStatus() {\n    // Populate maintenance data in demo mode\n    if (dashboard && dashboard.demoMode) {\n        const today = new Date();\n        const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n        const nextMonth = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000);\n        const lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n        const lastMonth = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n        document.getElementById('next-calibration').textContent = nextWeek.toLocaleDateString();\n        document.getElementById('sensor-cleaning').textContent = nextMonth.toLocaleDateString();\n        document.getElementById('filter-replacement').textContent = '---';\n        document.getElementById('system-backup').textContent = 'Last: ' + today.toLocaleDateString();\n        document.getElementById('last-bme280-cal').textContent = lastWeek.toLocaleDateString();\n        document.getElementById('last-mpu-cal').textContent = lastMonth.toLocaleDateString();\n        document.getElementById('laser-check').textContent = lastWeek.toLocaleDateString();\n        document.getElementById('drift-compensation').textContent = 'Active';\n    }\n\n    console.log('Maintenance status updated');\n}\n\nfunction startCalibration() {\n    alert('Starting sensor calibration process...');\n}\n\nfunction runDiagnostics() {\n    alert('Running system diagnostics...');\n}\n\nfunction backupSystem() {\n    alert('Starting system backup...');\n}\n\nfunction generateReport() {\n    alert('Generating maintenance report...');\n}\n\n// Settings Functions\nfunction loadSettings() {\n    // Load saved settings from localStorage\n    const updateInterval = localStorage.getItem('updateInterval') || '2000';\n    const tempUnits = localStorage.getItem('tempUnits') || 'celsius';\n    const alertSounds = localStorage.getItem('alertSounds') !== 'false';\n    const autoExport = localStorage.getItem('autoExport') === 'true';\n    const theme = localStorage.getItem('theme') || 'blue';\n    const defaultPage = localStorage.getItem('defaultPage') || 'dashboard';\n    \n    document.getElementById('update-interval').value = updateInterval;\n    document.getElementById('temp-units').value = tempUnits;\n    document.getElementById('alert-sounds').checked = alertSounds;\n    document.getElementById('auto-export').checked = autoExport;\n    document.getElementById('theme').value = theme;\n    document.getElementById('default-page').value = defaultPage;\n}\n\nfunction saveSettings() {\n    const updateInterval = document.getElementById('update-interval').value;\n    const tempUnits = document.getElementById('temp-units').value;\n    const alertSounds = document.getElementById('alert-sounds').checked;\n    const autoExport = document.getElementById('auto-export').checked;\n    const theme = document.getElementById('theme').value;\n    const defaultPage = document.getElementById('default-page').value;\n    \n    localStorage.setItem('updateInterval', updateInterval);\n    localStorage.setItem('tempUnits', tempUnits);\n    localStorage.setItem('alertSounds', alertSounds);\n    localStorage.setItem('autoExport', autoExport);\n    localStorage.setItem('theme', theme);\n    localStorage.setItem('defaultPage', defaultPage);\n    \n    alert('Settings saved successfully!');\n    \n    // Apply settings\n    if (dashboard) {\n        dashboard.updateInterval = parseInt(updateInterval);\n    }\n}\n\nfunction resetSettings() {\n    if (confirm('Are you sure you want to reset all settings to default?')) {\n        localStorage.clear();\n        loadSettings();\n        alert('Settings reset to default values');\n    }\n}\n\nfunction exportSettings() {\n    const settings = {\n        updateInterval: document.getElementById('update-interval').value,\n        tempUnits: document.getElementById('temp-units').value,\n        alertSounds: document.getElementById('alert-sounds').checked,\n        autoExport: document.getElementById('auto-export').checked,\n        theme: document.getElementById('theme').value,\n        defaultPage: document.getElementById('default-page').value\n    };\n    \n    const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'navair_settings.json';\n    a.click();\n    URL.revokeObjectURL(url);\n}\n\nfunction importSettings() {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    input.onchange = function(e) {\n        const file = e.target.files[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = function(e) {\n                try {\n                    const settings = JSON.parse(e.target.result);\n                    Object.keys(settings).forEach(key => {\n                        localStorage.setItem(key, settings[key]);\n                    });\n                    loadSettings();\n                    alert('Settings imported successfully!');\n                } catch (error) {\n                    alert('Error importing settings: Invalid file format');\n                }\n            };\n            reader.readAsText(file);\n        }\n    };\n    input.click();\n}\n\n// =============================================================================\n// APPLICATION INITIALIZATION\n// =============================================================================\n\n/**\n * Initialize dashboard when DOM is loaded\n */\nlet dashboard;\ndocument.addEventListener('DOMContentLoaded', () => {\n    dashboard = new NAVAIRDashboard();\n    \n    // Setup navigation event listeners\n    setupNavigation();\n    \n    // Load default page from settings\n    const defaultPage = localStorage.getItem('defaultPage') || 'dashboard';\n    if (defaultPage !== 'dashboard') {\n        setTimeout(() => {\n            const navItem = document.querySelector(`[data-page=\"${defaultPage}\"]`);\n            if (navItem) {\n                showPage(defaultPage, navItem);\n            }\n        }, 100);\n    }\n    \n    // Setup periodic health updates\n    setInterval(() => {\n        if (document.getElementById('health-page').classList.contains('active')) {\n            updateSystemHealth();\n        }\n    }, 10000);\n    \n    // Add keyboard navigation support\n    setupKeyboardNavigation();\n});\n\nfunction setupNavigation() {\n    const navItems = document.querySelectorAll('.nav-item[data-page]');\n    navItems.forEach(item => {\n        item.addEventListener('click', (e) => {\n            e.preventDefault();\n            const pageId = item.getAttribute('data-page');\n            showPage(pageId, item);\n        });\n        \n        // Add keyboard support\n        item.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                const pageId = item.getAttribute('data-page');\n                showPage(pageId, item);\n            }\n        });\n    });\n}\n\nfunction setupKeyboardNavigation() {\n    document.addEventListener('keydown', (e) => {\n        // Alt + number keys for quick navigation\n        if (e.altKey && e.key >= '1' && e.key <= '6') {\n            e.preventDefault();\n            const pageIndex = parseInt(e.key) - 1;\n            const navItems = document.querySelectorAll('.nav-item[data-page]');\n            if (navItems[pageIndex]) {\n                const pageId = navItems[pageIndex].getAttribute('data-page');\n                showPage(pageId, navItems[pageIndex]);\n                navItems[pageIndex].focus();\n            }\n        }\n    });\n}\n\n// =============================================================================\n// STANDALONE DEMO MODE FUNCTION\n// =============================================================================\n\n/**\n * Toggle demo mode - works even if dashboard object fails to initialize\n * Can also be called directly: dashboard.toggleDemoMode()\n */\nfunction toggleDemo() {\n    if (dashboard && typeof dashboard.toggleDemoMode === 'function') {\n        dashboard.toggleDemoMode();\n    } else {\n        console.error('%c✗ DEMO MODE ERROR', 'color: #e74c3c; font-size: 16px; font-weight: bold;');\n        console.error('Dashboard object not initialized or toggleDemoMode method not available');\n        console.error('Check for JavaScript errors above');\n    }\n}\n\n// Add helpful message on load\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');\nconsole.log('%c NAVAIR Dashboard Console', 'color: #3498db; font-size: 14px; font-weight: bold;');\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');\nconsole.log('%cTo enable DEMO MODE for presentation:', 'font-weight: bold;');\nconsole.log('%c  dashboard.toggleDemoMode()', 'color: #27ae60; font-family: monospace;');\nconsole.log('%c━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━', 'color: #3498db');","structuredPatch":[{"oldStart":308,"oldLines":8,"newStart":308,"newLines":10,"lines":["      * @returns {Object} Mock print data","      */","     generateMockPrintData() {","-        // Simulate print progress (11 hours 7 minutes = 667 minutes total)","-        this.mockData.printProgress += 0.5;","+        // Simulate print progress (11 hours 7 minutes = 667 minutes = 40,020 seconds)","+        // Print status updates every 5 seconds","+        // Progress increment per update: 100% / (40,020 / 5) = 0.0125% per 5 seconds","+        this.mockData.printProgress += 0.0125;","         if (this.mockData.printProgress > 100) {","             this.mockData.printProgress = 0; // Reset to new job","         }"]},{"oldStart":318,"oldLines":11,"newStart":320,"newLines":15,"lines":["         this.mockData.qualityScore += (Math.random() - 0.5) * 0.02;","         this.mockData.qualityScore = Math.max(0.85, Math.min(0.98, this.mockData.qualityScore));"," ","+        // Calculate time remaining in minutes based on actual progress","+        const totalMinutes = 667; // 11 hours 7 minutes","+        const remainingMinutes = Math.round(totalMinutes * (100 - this.mockData.printProgress) / 100);","+","         return {","             job_name: 'back_bracket_cover_v4.stl',","             status: this.mockData.printProgress < 100 ? 'Printing' : 'Completing',","-            progress: Math.round(this.mockData.printProgress),","-            time_remaining: Math.max(1, Math.round((100 - this.mockData.printProgress) * 6.67)), // 667 minutes total","+            progress: this.mockData.printProgress.toFixed(1), // Show decimal for slow progress","+            time_remaining: Math.max(0, remainingMinutes),","             quality_score: this.mockData.qualityScore,","             ml_prediction: this.mockData.qualityScore > 0.9 ? 'Excellent' : 'Good'","         };"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"b0b092ca-752c-4e5c-9676-a387c2d6d680","isSidechain":false,"userType":"external","cwd":"/home/navair/Desktop/navair-app/navair-fake-dash/Navair_Project","sessionId":"7f9d82aa-41b0-425b-9510-e8cda3cd7150","version":"2.0.21","gitBranch":"main","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01AeCaSidon8k2Dxyu8suHnP","type":"message","role":"assistant","content":[{"type":"text","text":"Perfect! I've updated the countdown to happen at a realistic rate. Here's what changed:\n\n**Progress Rate:**\n- The dashboard updates print status every 5 seconds\n- For an 11 hour 7 minute print (40,020 seconds total):\n  - Progress now increments by **0.0125%** every 5 seconds\n  - This means it will take the full 11 hours 7 minutes to reach 100%\n\n**What you'll see in demo mode:**\n- Progress will show with one decimal place (e.g., \"0.1%\", \"0.2%\", etc.) so you can see it's actually moving\n- Time remaining will accurately count down from 667 minutes\n- Every 5 seconds, progress increases by ~0.0125% and time decreases by ~5 seconds worth of the total time\n\nThis creates a much more realistic simulation that matches the actual print duration!"}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":1681,"cache_read_input_tokens":37850,"cache_creation":{"ephemeral_5m_input_tokens":1681,"ephemeral_1h_input_tokens":0},"output_tokens":208,"service_tier":"standard"}},"requestId":"req_011CUC3KL1UVwvBuQ1KRTVVW","type":"assistant","uuid":"605bcd99-a414-4eae-84cb-c5ffb47d2249","timestamp":"2025-10-17T03:13:36.308Z"}
